/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-10-06 ( Date ISO 2022-10-06 - Time 15:40:39 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.service.impl;

import java.math.BigDecimal;
import java.rmi.UnexpectedException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.maan.eway.bean.EserviceMotorDetails;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.bean.MotorBodyTypeMaster;
import com.maan.eway.bean.MotorColorMaster;
import com.maan.eway.bean.MotorMakeModelMaster;
import com.maan.eway.bean.MotorVehicleInfo;
import com.maan.eway.bean.MotorVehicleInfoArch;
import com.maan.eway.bean.MotorVehicleUsageMaster;
import com.maan.eway.bean.PolicyHolderInfo;
import com.maan.eway.bean.PolicyHolderInfoId;
import com.maan.eway.bean.TiraErrorHistory;
import com.maan.eway.common.req.EserviceMotorDetailsSaveReq;
import com.maan.eway.common.res.CommonRes;
import com.maan.eway.error.Error;
import com.maan.eway.repository.EServiceMotorDetailsRepository;
import com.maan.eway.repository.ListItemValueRepository;
import com.maan.eway.repository.MotorBodyTypeMasterRepository;
import com.maan.eway.repository.MotorMakeModelMasterRepository;
import com.maan.eway.repository.MotorVehicleInfoArchRepository;
import com.maan.eway.repository.MotorVehicleInfoRepository;
import com.maan.eway.repository.MotorVehicleUsageMasterRepository;
import com.maan.eway.repository.PolicyHolderInfoRepository;
import com.maan.eway.repository.TiraErrorHistoryRepository;
import com.maan.eway.req.ExternalTokenReq;
import com.maan.eway.req.MotorTiraMsgReq;
import com.maan.eway.req.MotorVehicleInfoGetAllReq;
import com.maan.eway.req.MotorVehicleInfoGetReq;
import com.maan.eway.req.MotorVehicleInfoListSaveReq;
import com.maan.eway.req.MotorVehicleInfoSaveReq;
import com.maan.eway.req.MotorVerificationReq;
import com.maan.eway.req.TiraMsg;
import com.maan.eway.req.VehicleInfoSaveReq;
import com.maan.eway.req.VerificationDetailsReq;
import com.maan.eway.req.VerificationHdrReq;
import com.maan.eway.req.verification.CoverNoteDtl;
import com.maan.eway.req.verification.CoverNoteVerificationReq;
import com.maan.eway.req.verification.PolicyHolder;
import com.maan.eway.req.verification.PolicyHolders;
import com.maan.eway.req.verification.TiraMsgVehicleVerification;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.ExternalTokenRes;
import com.maan.eway.res.MotorSaveRes;
import com.maan.eway.res.MotorTiraMsgRes;
import com.maan.eway.res.MotorVehicleInfoCommonRes;
import com.maan.eway.res.MotorVehicleInfoExternalApiRes;
import com.maan.eway.res.MotorVehicleInfoRes;
import com.maan.eway.res.MotorVerificationRes;
import com.maan.eway.res.PolicyHolderInfoDto;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.res.verification.MotorTiraMsgVerificationRes;
import com.maan.eway.service.ExternalApiCallService;
import com.maan.eway.service.RegulatoryInfoService;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;
import javassist.NotFoundException;

/**
* <h2>MotorVehicleInfoServiceimpl</h2>
*/
@Service
@Transactional
public class RegulatoryInfoServiceImpl implements RegulatoryInfoService {

@Autowired
private MotorVehicleInfoRepository repository;

@Autowired
private MotorVehicleInfoArchRepository motorArchRepo;
@Autowired
private ListItemValueRepository constDet;
@Lazy
@Autowired
private ExternalApiCallService externalApiCallService;

@Autowired
private TiraErrorHistoryRepository tiraErrorHistoryRepo;

@Autowired
private MotorVehicleUsageMasterRepository motorVehicleUsageMasterRepo;


@Autowired
private MotorMakeModelMasterRepository motorMakeModelMasterRepo;

@Autowired
private MotorBodyTypeMasterRepository motorBodyTypeMasterRepo;



@Autowired
private  SanlamMotorVehicleDetails sanlamMotorVehicleDetails;

@Autowired
private  TanzaniaMotorVehicleDetails tanzaniaMotorVehicleDetails;

@Autowired
private  EServiceMotorDetailsRepository repo;
@PersistenceContext
private EntityManager em;

private Logger log=LogManager.getLogger(RegulatoryInfoServiceImpl.class);

Gson json = new Gson();


@Value(value = "${vehicle.token.api}")
private String vehicleTokenApi;

@Value(value = "${vehicle.info.api}")
private String vehicleInfoApi;

@Value(value = "${savemotor}")
private String saveMotorApi;

@Value(value = "${EwayBasicAuthPass}")
private String EwayBasicAuthPass;

@Value(value = "${EwayBasicAuthName}")
private String EwayBasicAuthName;

@Value(value = "${savevehicleinfocall}")
private String savevehicleinfocall;


SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

	@Override
	public SuccessRes saveMotorInfo(TiraMsg req, MotorTiraMsgRes motorRes,MotorTiraMsgVerificationRes motorTiraMsgVerificationRes, String companyId) {
		 
		SuccessRes res = new SuccessRes();
		SimpleDateFormat arf = new SimpleDateFormat("yyMMddhhmmsss")  ;
		DozerBeanMapper dz = new DozerBeanMapper(); 
		 try {
			 	String regNo = req.getMotorVerificationReq().getVerificationDtl().getMotorRegistrationNumber() ;
			 	String chassisNo = req.getMotorVerificationReq().getVerificationDtl().getMotorChassisNumber() ;
			 	
			 	MotorVehicleInfo findData = repository.findTop1ByResRegNumberAndResChassisNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(regNo , chassisNo,"API", companyId) ;
				if(findData!=null  ) {
					repository.delete(findData);
					MotorVehicleInfoArch archData   = new MotorVehicleInfoArch();  
					archData   = dz.map(findData, MotorVehicleInfoArch.class);
					archData.setArchId(arf.format(new Date()) );
					motorArchRepo.save(archData);
				}
				
				MotorVehicleInfo saveInfo = new MotorVehicleInfo();
			 	
			 	// Request
			 	MotorVerificationReq motorVerReq = req.getMotorVerificationReq() ;
			 // Response
			 	MotorVerificationRes motorVerRes = motorRes.getMotorVerificationRes() ;
				
			 	
			 	//saveInfo.setCreatedBy(motorVerReq.getVerificationHdr().getCreatedBy() );
			 	saveInfo.setEntryDate(new Date());
			 	saveInfo.setStatus("Y");
			 	saveInfo.setReqChassisNumber(StringUtils.isBlank(motorVerReq.getVerificationDtl().getMotorChassisNumber())?motorVerRes.getVerificationDtl().getChassisNumber():motorVerReq.getVerificationDtl().getMotorChassisNumber());	
			 	saveInfo.setReqCompanyCode(motorVerReq.getVerificationHdr().getCompanyCode() );
			 	saveInfo.setReqMotorCategory(motorVerReq.getVerificationDtl().getMotorCategory()==null ? null : Integer.valueOf(motorVerReq.getVerificationDtl().getMotorCategory()) );
			 	saveInfo.setReqMsgSignature(req.getMsgSignature());
			 	saveInfo.setReqRegNumber(StringUtils.isBlank(motorVerReq.getVerificationDtl().getMotorRegistrationNumber())?motorVerRes.getVerificationDtl().getRegistrationNumber():motorVerReq.getVerificationDtl().getMotorRegistrationNumber());
			 	saveInfo.setReqMsgSignature(req.getMsgSignature());
			 	saveInfo.setReqRequestId(motorVerReq.getVerificationHdr().getRequestId());
			 	saveInfo.setReqSystemCode(motorVerReq.getVerificationHdr().getSystemCode());
			 	
			 	
			 	saveInfo.setResAxleDistance(motorVerRes.getVerificationDtl().getAxleDistance()==null?null : Double.valueOf(motorVerRes.getVerificationDtl().getAxleDistance()) );
			 	saveInfo.setResBodyType(motorVerRes.getVerificationDtl().getBodyType());
			 	saveInfo.setResChassisNumber((motorVerRes.getVerificationDtl().getChassisNumber()));
			 	saveInfo.setResColor((motorVerRes.getVerificationDtl().getColor()));
			 	saveInfo.setResEngineCapacity(motorVerRes.getVerificationDtl().getEngineCapacity());
			 	saveInfo.setResEngineNumber(motorVerRes.getVerificationDtl().getEngineNumber());
			 	saveInfo.setResFuelUsed(motorVerRes.getVerificationDtl().getFuelUsed());
			 	saveInfo.setResGrossWeight(motorVerRes.getVerificationDtl().getGrossWeight()==null?null : Double.valueOf(motorVerRes.getVerificationDtl().getGrossWeight()) );
			 	saveInfo.setResMake(motorVerRes.getVerificationDtl().getMake());
			 	saveInfo.setResModel(motorVerRes.getVerificationDtl().getModel());
			 	saveInfo.setResMotorCategory(motorVerRes.getVerificationDtl().getMotorCategory()==null?null : Integer.valueOf(motorVerRes.getVerificationDtl().getMotorCategory()) );
			 	saveInfo.setResMsgSignature(motorRes.getMsgSignature());
			 	saveInfo.setResNumberOfAxles(motorVerRes.getVerificationDtl().getNumberOfAxles()==null?null : Integer.valueOf(motorVerRes.getVerificationDtl().getNumberOfAxles()) );
			 	saveInfo.setResOwnerCategory(motorVerRes.getVerificationDtl().getOwnerCategory());
			 	saveInfo.setResOwnerName(motorVerRes.getVerificationDtl().getOwnerName());
			 	saveInfo.setResRegNumber(motorVerRes.getVerificationDtl().getRegistrationNumber());
			 	saveInfo.setResRequestId(motorVerRes.getVerificationHdr().getRequestId());
			 	saveInfo.setResResponseId(motorVerRes.getVerificationHdr().getResponseId());
			 	saveInfo.setResSittingCapacity(motorVerRes.getVerificationDtl().getSittingCapacity()==null?null : Integer.valueOf(motorVerRes.getVerificationDtl().getSittingCapacity())  );
			 	saveInfo.setResStatusCode(motorVerRes.getVerificationHdr().getResponseStatusCode());
			 	saveInfo.setResStatusDesc(motorVerRes.getVerificationHdr().getResponseStatusDesc());
			 	saveInfo.setResTareWeight(motorVerRes.getVerificationDtl().getTareWeight()==null?null : Double.valueOf(motorVerRes.getVerificationDtl().getTareWeight()) );
			 	saveInfo.setResYearOfManufacture(motorVerRes.getVerificationDtl().getYearOfManufacture()==null?null : Integer.valueOf(motorVerRes.getVerificationDtl().getYearOfManufacture()) );
			 	saveInfo.setResMotorUsage(motorVerRes.getVerificationDtl().getMotorUsage()==null?null :motorVerRes.getVerificationDtl().getMotorUsage());
			 	saveInfo.setSavedFrom("API");
			 	saveInfo.setModelNumber(motorVerRes.getVerificationDtl().getModelNumber()==null?null : motorVerRes.getVerificationDtl().getModelNumber());
			 	if(motorTiraMsgVerificationRes!=null && motorTiraMsgVerificationRes.getCoverNoteVerifications()!=null) {
			 		CoverNoteDtl coverNote = motorTiraMsgVerificationRes.getCoverNoteVerifications().getCoverNoteDtlList();
			 		if(coverNote!=null) {
			 			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", Locale.ENGLISH);

			 			saveInfo.setCovernoteEndDate(formatter.parse(coverNote.getCoverNoteEndDate()));
			 			saveInfo.setCovernoteStartDate(formatter.parse(coverNote.getCoverNoteStartDate()));
			 			saveInfo.setCurrencyCode(coverNote.getCurrencyCode());
			 			saveInfo.setProductCode(coverNote.getProductCode());
			 			saveInfo.setPolicytypeId(policyHolderRepo.fuGetCode("PRODUCT_CODE", coverNote.getProductCode(), "100002", "", "", ""));
			 			if(coverNote.getMotorDtlBean()!=null) {
			 				BigDecimal sumInsured=StringUtils.isBlank(coverNote.getRisksCoveredBean().getRiskCoveredBeanList().get(0).getSumInsured())?BigDecimal.ZERO:
			 					new BigDecimal(coverNote.getRisksCoveredBean().getRiskCoveredBeanList().get(0).getSumInsured());
			 				saveInfo.setOwnerAddress(coverNote.getMotorDtlBean().getOwnerAddress());
			 				saveInfo.setOwnerCategoryId(coverNote.getMotorDtlBean().getOwnerCategory());
			 				saveInfo.setSumInsured(sumInsured);
			 				saveInfo.setRiskCode(coverNote.getRisksCoveredBean().getRiskCoveredBeanList().get(0).getRiskCode());
			 			}
			 		}
			 	}
			 	saveInfo.setCompanyId(companyId);
			 	repository.save(saveInfo);
			 	DozerBeanMapper mapper = new DozerBeanMapper();
			 	 MotorVehicleInfoRes map = mapper.map(saveInfo, MotorVehicleInfoRes.class);
			 	 res.setVehicle(map);
			 	log.info(" Saved Details is ---> " + json.toJson(saveInfo) );
			 	
		 } catch (Exception e) {
			 e.printStackTrace();
			 log.info("Exception is ---> " + e.getMessage());
			 return null ;
		 }
			return res;
		}

	@Value("${HeadearAdd1Value}")
	private String headearAdd1Value ;
	@Value("${tiraSystemCode}")
	private String tiraSystemCode;
	@Autowired
	private ApiService apiService; 
	
	@Override
	public MotorVehicleInfoRes getVehicleInfo(MotorVehicleInfoGetReq req,String tokens) {

		MotorVehicleInfoRes res = new MotorVehicleInfoRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		MotorVehicleInfo data=new MotorVehicleInfo();
		ListItemValue itemValue=new ListItemValue();
		TiraMsg tiraReq = new TiraMsg();
		try {
			MotorTiraMsgVerificationRes coverVerification=null;
			itemValue=constDet.findByItemTypeAndStatusOrderByAmendIdDesc("NO_OF_DAYS","Y").get(0);
			Date entryDate = null;
			Date today = new Date();
			
			boolean apiOfmotorVerification=false;
			boolean apiOfCoverVerification=false;
			
			VerificationHdrReq hdr=new VerificationHdrReq();
			hdr.setCompanyCode(headearAdd1Value);
			hdr.setRequestId("EWAY"+Calendar.getInstance().getTimeInMillis());
			hdr.setSystemCode(tiraSystemCode);
			if (StringUtils.isBlank(req.getReqChassisNumber()) ) {
			// Fetch Data By Register No
				data = repository.findTop1ByResRegNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(req.getReqRegNumber() , "API", req.getInsuranceId() );
				
				if (data != null  ) {	
					entryDate = data.getEntryDate();
					long dateBeforeInMs = entryDate.getTime();
					long dateAfterInMs = today.getTime();

					long timeDiff = Math.abs(dateAfterInMs - dateBeforeInMs);

					long daysDiff = TimeUnit.DAYS.convert(timeDiff, TimeUnit.MILLISECONDS);
				
					
					if (daysDiff >= Integer.valueOf(itemValue.getItemValue()) && data.getPolicyYn().equalsIgnoreCase("N")) {
						
						apiOfmotorVerification=true; 
					}

				} else if (data == null) {
					apiOfmotorVerification=true; 
				} 
				
			// Fetch Data By Chassis No
			} else  {
				
				data = repository.findTop1ByResChassisNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(req.getReqChassisNumber(),"API", req.getInsuranceId() );
				
				if (data != null ) {
					entryDate = data.getEntryDate();
					long dateBeforeInMs = entryDate.getTime();
					long dateAfterInMs = today.getTime();

					long timeDiff = Math.abs(dateAfterInMs - dateBeforeInMs);

					long daysDiff = TimeUnit.DAYS.convert(timeDiff, TimeUnit.MILLISECONDS);
					if (daysDiff >= Integer.valueOf(itemValue.getItemValue()) && data.getPolicyYn().equalsIgnoreCase("N")) {
						apiOfmotorVerification=true; 
					}

				} else {
					apiOfmotorVerification=true; 
				}
			}
			
			 
			PolicyHolderInfo holdersInfo = policyHolderRepo.findByReqRegNumber(req.getReqRegNumber());
			if( holdersInfo==null) apiOfCoverVerification=true;
			System.out.println("T"+ apiOfmotorVerification +","+ apiOfCoverVerification );
				
			if(!"100002".equals(req.getInsuranceId())){
				apiOfmotorVerification = false;
				apiOfCoverVerification = false;
			}
			if( apiOfmotorVerification || apiOfCoverVerification ) {
				
		/*	CompletableFuture<MotorTiraMsgRes> callApi2Async =null;
				if(apiOfmotorVerification) {
					VerificationDetailsReq verReq1 = new VerificationDetailsReq();
					verReq1.setMotorCategory("1");
					verReq1.setMotorRegistrationNumber(req.getReqRegNumber());
					verReq1.setMotorChassisNumber(req.getReqChassisNumber());	
					MotorVerificationReq verReq2 = new MotorVerificationReq();
					verReq2.setVerificationDtl(verReq1);

					verReq2.setVerificationHdr(hdr);
					tiraReq.setMotorVerificationReq(verReq2);
					callApi2Async= apiService.callApi2Async(tiraReq,req);
				}*/
				
				CompletableFuture<MotorVehicleInfoRes> coverVerification2 =null;
				if( apiOfmotorVerification || apiOfCoverVerification ){
					TiraMsgVehicleVerification tiraMsg=new TiraMsgVehicleVerification();
					CoverNoteVerificationReq creq=new CoverNoteVerificationReq();
					VerificationHdrReq vhdr=new VerificationHdrReq();
					vhdr.setCompanyCode(headearAdd1Value);
					vhdr.setSystemCode(tiraSystemCode);
					vhdr.setRequestId("EWAY"+Calendar.getInstance().getTimeInMillis());
					creq.setVerificationHdr(hdr);
					com.maan.eway.req.verification.VerificationDetailsReq vreq=new com.maan.eway.req.verification.VerificationDetailsReq();
					vreq.setMotorRegistrationNumber(req.getReqRegNumber());
					vreq.setMotorChassisNumber(req.getReqChassisNumber());
					vreq.setStickerNumber("");
					vreq.setCoverNoteReferenceNumber("");
					creq.setVerificationDtl(vreq);
					tiraMsg.setCoverNoteVerificationReq(creq);					
					//coverVerification=externalApiCallService.coverVerification(tiraMsg);
					
					
					VerificationDetailsReq verReq1 = new VerificationDetailsReq();
					verReq1.setMotorCategory("1");
					verReq1.setMotorRegistrationNumber(req.getReqRegNumber());
					verReq1.setMotorChassisNumber(req.getReqChassisNumber());	
					MotorVerificationReq verReq2 = new MotorVerificationReq();
					verReq2.setVerificationDtl(verReq1);

					verReq2.setVerificationHdr(hdr);
					tiraReq.setMotorVerificationReq(verReq2);
					
					coverVerification2= apiService.coverVerification(tiraMsg,tokens,req,tiraReq, req.getInsuranceId());
				}
				
			/*	CompletableFuture<Void> allOf = null;
				if(callApi2Async!=null && coverVerification2!=null)
					allOf=CompletableFuture.allOf(callApi2Async,coverVerification2);
				else if(callApi2Async!=null && coverVerification2==null)
					allOf=CompletableFuture.allOf(callApi2Async);
				else if( coverVerification2!=null)*/
					CompletableFuture<Void> allOf = CompletableFuture.allOf(coverVerification2);
				
				allOf.join();  
				
				/*if(callApi2Async!=null) {
					MotorTiraMsgRes motorTiraMsgRes = callApi2Async.get();

					if(motorTiraMsgRes.getMotorVerificationRes()!=null && motorTiraMsgRes.getMotorVerificationRes().getVerificationDtl()==null){
						res.setErrorMessage(motorTiraMsgRes.getMotorVerificationRes().getVerificationHdr().getResponseStatusCode()+" "+motorTiraMsgRes.getMotorVerificationRes().getVerificationHdr().getResponseStatusDesc());
					}
					if(motorTiraMsgRes.getMotorVerificationRes()!=null && motorTiraMsgRes.getMotorVerificationRes().getVerificationDtl()!=null)
						saveMotorInfo(tiraReq , callApi2Async.get(),coverVerification2.get()) ;
				}if(coverVerification2!=null) {
					MotorTiraMsgVerificationRes motorTiraMsgVerificationRes = coverVerification2.get();
					if(motorTiraMsgVerificationRes!=null && motorTiraMsgVerificationRes.getCoverNoteVerifications()!=null) {
				 		CoverNoteDtl coverNote = motorTiraMsgVerificationRes.getCoverNoteVerifications().getCoverNoteDtlList();
				 		if(coverNote!=null) {
				 			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", Locale.ENGLISH);

				 			data.setCovernoteEndDate(formatter.parse(coverNote.getCoverNoteEndDate()));
				 			data.setCovernoteStartDate(formatter.parse(coverNote.getCoverNoteStartDate()));
				 			data.setCurrencyCode(coverNote.getCurrencyCode());
				 			data.setProductCode(coverNote.getProductCode());
				 			data.setPolicyTypeId(policyHolderRepo.fuGetCode("PRODUCT_CODE", coverNote.getProductCode(), "100002", "", "", ""));
				 			if(coverNote.getMotorDtlBean()!=null) {
				 				BigDecimal sumInsured=StringUtils.isBlank(coverNote.getRisksCoveredBean().getRiskCoveredBeanList().get(0).getSumInsured())?BigDecimal.ZERO:
				 					new BigDecimal(coverNote.getRisksCoveredBean().getRiskCoveredBeanList().get(0).getSumInsured());
				 				data.setOwnerAddress(coverNote.getMotorDtlBean().getOwnerAddress());
				 				data.setOwnerCategoryId(coverNote.getMotorDtlBean().getOwnerCategory());
				 				data.setSumInsured(sumInsured);
				 				data.setRiskCode(coverNote.getRisksCoveredBean().getRiskCoveredBeanList().get(0).getRiskCode());
				 			}				 			
				 			repository.save(data);
				 		}
				 	}
				}
				*/
				res = coverVerification2.get();
				if(res==null) {
					if(StringUtils.isNotBlank(req.getReqRegNumber()) ) {
						data = repository.findTop1ByResRegNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(req.getReqRegNumber(),"API", req.getInsuranceId());
						if(data==null  ) {
							data = repository.findTop1ByResRegNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(req.getReqRegNumber() , "WEB", req.getInsuranceId());
						}
					}  else {
						data = repository.findTop1ByResChassisNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(req.getReqChassisNumber(),"API", req.getInsuranceId());
						if(data==null  ) {
							data = repository.findTop1ByResChassisNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(req.getReqChassisNumber(),"WEB", req.getInsuranceId());
						}
					}


					PolicyHolderInfoDto person =null;
					if(StringUtils.isNotBlank(req.getReqRegNumber())) {
						PolicyHolderInfo policyHolderInfo = policyHolderRepo.findByReqRegNumber(req.getReqRegNumber());
						if(policyHolderInfo!=null)
							person = mapper.map(policyHolderInfo, PolicyHolderInfoDto.class);
					}
					if(data!=null) {
						res = mapper.map(data, MotorVehicleInfoRes.class);
						res.setHolder(person);
						res.setReqRegNumber(data.getResRegNumber());
						res.setReqChassisNumber(data.getResChassisNumber());
					}else {
						res=null;
					}
				}
			}else  {

				if(StringUtils.isNotBlank(req.getReqRegNumber()) ) {
					data = repository.findTop1ByResRegNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(req.getReqRegNumber(),"API", req.getInsuranceId());
					if(data==null  ) {
						data = repository.findTop1ByResRegNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(req.getReqRegNumber() , "WEB" , req.getInsuranceId());
					}
				}  else {
					data = repository.findTop1ByResChassisNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(req.getReqChassisNumber(),"API", req.getInsuranceId());
					if(data==null  ) {
						data = repository.findTop1ByResChassisNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(req.getReqChassisNumber(),"WEB", req.getInsuranceId());
					}
				}


				PolicyHolderInfoDto person =null;
				if(StringUtils.isNotBlank(req.getReqRegNumber())) {
					PolicyHolderInfo policyHolderInfo = policyHolderRepo.findByReqRegNumber(req.getReqRegNumber());
					if(policyHolderInfo!=null)
						person = mapper.map(policyHolderInfo, PolicyHolderInfoDto.class);
				}

				if(data!=null) {
					res = mapper.map(data, MotorVehicleInfoRes.class);
					res.setHolder(person);
					res.setReqRegNumber(data.getResRegNumber());
					res.setReqChassisNumber(data.getResChassisNumber());
				}else {
					res=null;
				}

			}
			if(res !=null && res.getCovernoteEndDate()!=null) {
				Date covernoteEndDate = res.getCovernoteEndDate();
				LocalDateTime endDate = covernoteEndDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
				LocalDateTime startDate = new Date().toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();	
			    long numOfDaysBetween = ChronoUnit.DAYS.between(startDate, endDate); 
			    if(numOfDaysBetween>30) {
			    	res.setErrorMessage("Sorry this Vechicle we cant Insured ");
			    }
			}
			
			
			
			
		
		} catch (Exception e) {
			 e.printStackTrace();
			 log.info("Exception is ---> " + e.getMessage());
			 

				if(StringUtils.isNotBlank(req.getReqRegNumber()) ) {
					data = repository.findTop1ByResRegNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(req.getReqRegNumber(),"API", req.getInsuranceId());
					if(data==null  ) {
						data = repository.findTop1ByResRegNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(req.getReqRegNumber() , "WEB" , req.getInsuranceId());
					}
				}  else {
					data = repository.findTop1ByResChassisNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(req.getReqChassisNumber(),"API", req.getInsuranceId());
					if(data==null  ) {
						data = repository.findTop1ByResChassisNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(req.getReqChassisNumber(),"WEB", req.getInsuranceId());
					}
				}


				PolicyHolderInfoDto person =null;
				if(StringUtils.isNotBlank(req.getReqRegNumber())) {
					PolicyHolderInfo policyHolderInfo = policyHolderRepo.findByReqRegNumber(req.getReqRegNumber());
					if(policyHolderInfo!=null)
						person = mapper.map(policyHolderInfo, PolicyHolderInfoDto.class);
				}

				if(data!=null) {
					res = mapper.map(data, MotorVehicleInfoRes.class);
					res.setHolder(person);
					res.setReqRegNumber(data.getResRegNumber());
					res.setReqChassisNumber(data.getResChassisNumber());
				}else {
					res=null;
				}
				
				
				
				

			

		}
		return res;
	}


	private SuccessRes saveMotorInfo(MotorVehicleInfoGetReq req, MotorTiraMsgRes motorTiraMsgRes,
			MotorTiraMsgVerificationRes motorTiraMsgVerificationRes) {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public List<MotorVehicleInfoRes> getallVehicleInfo(MotorVehicleInfoGetAllReq req) {
		List<MotorVehicleInfoRes> resList = new ArrayList<MotorVehicleInfoRes>();

		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			Calendar cal = new GregorianCalendar();

			Date today = new Date();
			
			cal.setTime(req.getEffectiveDateStart());  cal.set(Calendar.HOUR_OF_DAY, today.getHours()); cal.set(Calendar.MINUTE, today.getMinutes()) ;
			cal.set(Calendar.SECOND, today.getSeconds());
			Date effDate = cal.getTime();
			
			Date endDate = req.getEffectiveDateEnd();
			
			cal.setTime(req.getEffectiveDateEnd());  cal.set(Calendar.HOUR_OF_DAY, 23); cal.set(Calendar.MINUTE, 59) ;
			endDate = cal.getTime() ;
			
			// Limit , Offset
			int limit = StringUtils.isBlank(req.getLimit()) ? 0 : Integer.valueOf(req.getLimit());
			int offset = StringUtils.isBlank(req.getOffset()) ? 100 : Integer.valueOf(req.getOffset());
			Pageable paging = PageRequest.of(limit, offset, Sort.by("entryDate").descending());

			// Find
			Page<MotorVehicleInfo> VehicleDetails = repository.findByEntryDateBetween(paging ,effDate,endDate);

			// Map
			for (MotorVehicleInfo data : VehicleDetails.getContent()) {
				MotorVehicleInfoRes res = new MotorVehicleInfoRes();

				res = mapper.map(data, MotorVehicleInfoRes.class);

				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}

	@Override
	public List<Error>  getSearchErrorDetails(MotorVehicleInfoGetReq req ) {
		List<Error> error = new ArrayList<Error>();
		try {
			if(StringUtils.isNotBlank(req.getReqRegNumber()) ) {
				Date today = new Date();
				Calendar cal = new GregorianCalendar();
				cal.setTime(today);
				today = cal.getTime();
				cal.set(Calendar.HOUR_OF_DAY, 1);
				cal.set(Calendar.MINUTE, 1);
				today = cal.getTime();
				
				// Find Error Table
				List<TiraErrorHistory> errDatas =  tiraErrorHistoryRepo.
						findByReqRegNumberAndApiDescriptionAndEntryDateGreaterThanEqualOrderByEntryDateDesc(
								req.getReqRegNumber() ,"Motor Verification", today );
				
				if(errDatas.size() > 0 && errDatas.get(0).getResponseStatusDesc() !=null ) {
					error.add(new Error("01","Tira Msg", "Tira Msg - " + errDatas.get(0).getResponseStatusDesc() ));
				} else {
					error.add(new Error("01","Not Found", "No Data Found"));
				}
				
			}  else {
				error.add(new Error("01","Not Found", "No Data Found"));
			}
			
	
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			error.add(new Error("01","Not Found", "No Data Found"));

		}
		return error;
	}

	@Override
	public SuccessRes saveMotorInfo(MotorTiraMsgReq req, MotorTiraMsgRes res) {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public MotorSaveRes saveVehicleInfo(MotorVehicleInfoSaveReq req) {
		MotorSaveRes res = new MotorSaveRes();
		
		if("100040".equalsIgnoreCase(req.getInsuranceId()))	{
			res=sanlamMotorVehicleDetails.saveVehicleInfo(req);
		}else {
			res=tanzaniaMotorVehicleDetails.saveVehicleInfo(req);
		}
		return res;
	}


	@Override
	public List<Error> validateVehicleInfo(MotorVehicleInfoSaveReq req) {
		List<Error> errors = new ArrayList<Error>();
		if("100040".equalsIgnoreCase(req.getInsuranceId()))	{
			errors=sanlamMotorVehicleDetails.validateVehicleInfo(req);
		}else {
			errors=tanzaniaMotorVehicleDetails.validateVehicleInfo(req);
		}
		return errors;
		
	}

	public List<MotorBodyTypeMaster> getInduvidualBodyTypeMasterDropdown(String insuranceId , String branchCode , String bodyName ) {
		List<MotorBodyTypeMaster> list = new ArrayList<MotorBodyTypeMaster>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<MotorBodyTypeMaster> query = cb.createQuery(MotorBodyTypeMaster.class);
			
			// Find All
			Root<MotorBodyTypeMaster> c = query.from(MotorBodyTypeMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<MotorBodyTypeMaster> ocpm1 = effectiveDate.from(MotorBodyTypeMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("bodyId"), ocpm1.get("bodyId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a4 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
			Predicate a5 = cb.equal(c.get("sectionId"), ocpm1.get("sectionId"));
			effectiveDate.where(a1, a2,a3,a4,a5);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<MotorBodyTypeMaster> ocpm2 = effectiveDate2.from(MotorBodyTypeMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a6 = cb.equal(c.get("bodyId"), ocpm2.get("bodyId"));
			Predicate a7 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a8 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a9 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			Predicate a10 = cb.equal(c.get("sectionId"),  ocpm2.get("sectionId"));
			
			effectiveDate2.where(a6,a7,a8,a9,a10);
			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n5 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n6 = cb.equal(c.get("branchCode"), "99999");
			Predicate n7 = cb.or(n5,n6);
			Predicate n8 = cb.equal(c.get("bodyNameEn"), bodyName );
			query.where(n1,n2,n3,n4,n7,n8).orderBy(orderList);
			// Get Result
			TypedQuery<MotorBodyTypeMaster> result = em.createQuery(query);
			list = result.getResultList();
			
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return list;
	}

	@Autowired
	private PolicyHolderInfoRepository policyHolderRepo;
	@Value(value = "${life.commonapi}")
	private String COMMON_API;
	
	@Override
	 
	public MotorVehicleInfoRes saveVerification(MotorTiraMsgVerificationRes body,TiraMsgVehicleVerification req,String tokens,MotorVehicleInfoGetReq request) {
		MotorVehicleInfoRes res=new MotorVehicleInfoRes();
		/*
			SimpleDateFormat arf = new SimpleDateFormat("yyMMddhhmmsss")  ;
			DozerBeanMapper dz = new DozerBeanMapper(); 
			 try {
				 	String regNo = req.getCoverNoteVerificationReq().getVerificationDtl().getMotorRegistrationNumber(); // getMotorVerificationReq().getVerificationDtl().getMotorRegistrationNumber() ;
				 	String chassisNo = req.getCoverNoteVerificationReq().getVerificationDtl().getMotorChassisNumber();
				 	
				 	MotorVehicleInfo findData = repository.findByResRegNumberAndResChassisNumberAndSavedFrom(regNo , chassisNo,"API") ;
					if(findData!=null  ) {
						repository.delete(findData);
						MotorVehicleInfoArch archData   = new MotorVehicleInfoArch();  
						archData   = dz.map(findData, MotorVehicleInfoArch.class);
						archData.setArchId(arf.format(new Date()) );
						motorArchRepo.save(archData);
					}
					
					MotorVehicleInfo saveInfo = new MotorVehicleInfo();
				 	
				 	// Request
				 	CoverNoteVerificationReq motorVerReq = req.getCoverNoteVerificationReq();
				 // Response
				 	MotorDtl motorVerRes = body.getCoverNoteVerifications().getCoverNoteDtlList().getMotorDtlBean();
					
				 	if(motorVerRes==null)
				 		return null;
				 	
				 	//saveInfo.setCreatedBy(motorVerReq.getVerificationHdr().getCreatedBy() );
				 	saveInfo.setEntryDate(new Date());
				 	saveInfo.setStatus("Y");
				 	saveInfo.setReqChassisNumber(StringUtils.isBlank(chassisNo)?motorVerRes.getChassisNumber():chassisNo);	
				 	saveInfo.setReqCompanyCode(motorVerReq.getVerificationHdr().getCompanyCode() );
				 	saveInfo.setReqMotorCategory(1);
				 	saveInfo.setReqMsgSignature(req.getMsgSignature());
				 	saveInfo.setReqRegNumber(StringUtils.isBlank(regNo)?motorVerRes.getRegistrationNumber():regNo);
				 	saveInfo.setReqMsgSignature(req.getMsgSignature());
				 	saveInfo.setReqRequestId(motorVerReq.getVerificationHdr().getRequestId());
				 	saveInfo.setReqSystemCode(motorVerReq.getVerificationHdr().getSystemCode());
				 	
				 	
				 	saveInfo.setResAxleDistance(motorVerRes.getAxleDistance()==null?null : Double.valueOf(motorVerRes.getAxleDistance()) );
				 	saveInfo.setResBodyType(motorVerRes.getBodyType());
				 	saveInfo.setResChassisNumber((motorVerRes.getChassisNumber()));
				 	saveInfo.setResColor((motorVerRes.getColor()));
				 	saveInfo.setResEngineCapacity(motorVerRes.getEngineCapacity());
				 	saveInfo.setResEngineNumber(motorVerRes.getEngineNumber());
				 	saveInfo.setResFuelUsed(motorVerRes.getFuelUsed());
				 	saveInfo.setResGrossWeight(motorVerRes.getGrossWeight()==null?null : Double.valueOf(motorVerRes.getGrossWeight()) );
				 	saveInfo.setResMake(motorVerRes.getMake());
				 	saveInfo.setResModel(motorVerRes.getModel());
				 	saveInfo.setResMotorCategory(motorVerRes.getMotorCategory()==null?null : Integer.valueOf(motorVerRes.getMotorCategory()) );
				 	saveInfo.setResMsgSignature(body.getMsgSignature());
				 	saveInfo.setResNumberOfAxles(motorVerRes.getNumberOfAxles()==null?null : Integer.valueOf(motorVerRes.getNumberOfAxles()) );
				 	saveInfo.setResOwnerCategory(motorVerRes.getOwnerCategory());
				 	saveInfo.setResOwnerName(motorVerRes.getOwnerName());
				 	saveInfo.setResRegNumber(motorVerRes.getRegistrationNumber());
				 	saveInfo.setResRequestId(motorVerReq.getVerificationHdr().getRequestId());
				 	saveInfo.setResResponseId(body.getCoverNoteVerifications().getCoverNoteHdrList().getResponseId());
				 	saveInfo.setResSittingCapacity(motorVerRes.getSittingCapacity()==null?null : Integer.valueOf(motorVerRes.getSittingCapacity())  );
				 	saveInfo.setResStatusCode(body.getCoverNoteVerifications().getCoverNoteHdrList().getResponseStatusCode());
				 	saveInfo.setResStatusDesc(body.getCoverNoteVerifications().getCoverNoteHdrList().getResponseStatusDesc());
				 	saveInfo.setResTareWeight(motorVerRes.getTareWeight()==null?null : Double.valueOf(motorVerRes.getTareWeight()) );
				 	saveInfo.setResYearOfManufacture(motorVerRes.getYearOfManufacture()==null?null : Integer.valueOf(motorVerRes.getYearOfManufacture()) );
				 	saveInfo.setResMotorUsage(motorVerRes.getMotorUsage()==null?null :motorVerRes.getMotorUsage());
				 	saveInfo.setSavedFrom("API");
				 	if(body!=null && body.getCoverNoteVerifications()!=null) {
				 		CoverNoteDtl coverNote = body.getCoverNoteVerifications().getCoverNoteDtlList();
				 		if(coverNote!=null) {
				 			SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", Locale.ENGLISH);

				 			saveInfo.setCovernoteEndDate(formatter.parse(coverNote.getCoverNoteEndDate()));
				 			saveInfo.setCovernoteStartDate(formatter.parse(coverNote.getCoverNoteStartDate()));
				 			saveInfo.setCurrencyCode(coverNote.getCurrencyCode());
				 			saveInfo.setProductCode(coverNote.getProductCode());
				 			saveInfo.setPolicyTypeId(policyHolderRepo.fuGetCode("PRODUCT_CODE", coverNote.getProductCode(), "100002", "", "", ""));
				 			if(coverNote.getMotorDtlBean()!=null) {
				 				BigDecimal sumInsured=StringUtils.isBlank(coverNote.getRisksCoveredBean().getRiskCoveredBeanList().get(0).getSumInsured())?BigDecimal.ZERO:
				 					new BigDecimal(coverNote.getRisksCoveredBean().getRiskCoveredBeanList().get(0).getSumInsured());
				 				saveInfo.setOwnerAddress(coverNote.getMotorDtlBean().getOwnerAddress());
				 				saveInfo.setOwnerCategoryId(coverNote.getMotorDtlBean().getOwnerCategory());
				 				saveInfo.setSumInsured(sumInsured);
				 				saveInfo.setRiskCode(coverNote.getRisksCoveredBean().getRiskCoveredBeanList().get(0).getRiskCode());
				 			}
				 		}
				 	}
				 	repository.save(saveInfo);
				 	DozerBeanMapper mapper = new DozerBeanMapper();
				 	res = mapper.map(saveInfo, MotorVehicleInfoRes.class);
				 	log.info(" Saved Details is ---> " + json.toJson(saveInfo) );
				 	
			 } catch (Exception e) {
				 e.printStackTrace();
				 log.info("Exception is ---> " + e.getMessage());
				 return null ;
			 }
		*/
		try {
			
			
			
			
			
			
			
			PolicyHolders holders = (body!=null && body.getCoverNoteVerifications() !=null && body.getCoverNoteVerifications().getCoverNoteDtlList()!=null )? body.getCoverNoteVerifications().getCoverNoteDtlList().getPolicyHoldersBean():null;
			if(holders!=null && holders.getPolicyHolderBeanList()!=null && holders.getPolicyHolderBeanList().size()>0) {
				for(int i=0;i<holders.getPolicyHolderBeanList().size();i++) {
					PolicyHolder holder = holders.getPolicyHolderBeanList().get(i);
					PolicyHolderInfoId primary=PolicyHolderInfoId.builder()
							.policyHolderType(holder.getPolicyHolderType())
							.policyHolderIdType(holder.getPolicyHolderIdType())
							.policyHolderIdNumber(holder.getPolicyHolderIdNumber())
							.build();
					Optional<PolicyHolderInfo> dataHolder = policyHolderRepo.findById(primary);
					if(dataHolder.isPresent()) {

						String customerId=null;
						{
							JSONObject orderDict = new JSONObject();
							orderDict.put("InsuranceId", request.getInsuranceId());
							orderDict.put("BranchCode", request.getBranchCode());
							orderDict.put("ProductId", request.getProductId());
							orderDict.put("Address1", holder.getStreet());
							orderDict.put("CityCode", policyHolderRepo.fuGetCode("DISTRICT", holder.getDistrict(), "100002", holder.getCountryCode(), request.getProductId(), ""));
							orderDict.put("CityName", holder.getDistrict());
							orderDict.put("ClientName", holder.getPolicyHolderName());
							orderDict.put("Clientstatus", "Y");
							orderDict.put("CreatedBy", request.getCreatedBy());
							orderDict.put("Email1", StringUtils.isBlank(holder.getEmailAddress())?"":holder.getEmailAddress());
							orderDict.put("Gender", holder.getGender());
							orderDict.put("IsTaxExempted", "N");
							orderDict.put("Language", "1");
							orderDict.put("MobileNo1", holder.getPolicyHolderPhoneNumber()==null?"":holder.getPolicyHolderPhoneNumber().substring(3, holder.getPolicyHolderPhoneNumber().length()));
							orderDict.put("Nationality", holder.getCountryCode());
							orderDict.put("Occupation", "99");
							orderDict.put("PolicyHolderType", holder.getPolicyHolderType());
							orderDict.put("PolicyHolderTypeid", holder.getPolicyHolderIdType());
							orderDict.put("IdNumber", holder.getPolicyHolderIdNumber());
							orderDict.put("IdType", holder.getPolicyHolderIdType());
							orderDict.put("PreferredNotification", "mail");

							orderDict.put("RegionCode",policyHolderRepo.fuGetCode("REGION", holder.getRegion(), "100002", holder.getCountryCode(), "", ""));
							orderDict.put("MobileCode1", holder.getPolicyHolderPhoneNumber()==null?"":holder.getPolicyHolderPhoneNumber().substring(0, 3));
							orderDict.put("WhatsappCode", holder.getPolicyHolderPhoneNumber()==null?"":holder.getPolicyHolderPhoneNumber().substring(0, 3));
							orderDict.put("MobileCodeDesc1", holder.getPolicyHolderPhoneNumber()==null?"":holder.getPolicyHolderPhoneNumber().substring(0, 3));
							orderDict.put("WhatsappDesc", holder.getPolicyHolderPhoneNumber()==null?"":holder.getPolicyHolderPhoneNumber().substring(3, holder.getPolicyHolderPhoneNumber().length()));
							orderDict.put("WhatsappNo", holder.getPolicyHolderPhoneNumber()==null?"":holder.getPolicyHolderPhoneNumber().substring(3, holder.getPolicyHolderPhoneNumber().length()));
							orderDict.put("StateCode", policyHolderRepo.fuGetCode("REGION", holder.getRegion(), "100002", holder.getCountryCode(), "", ""));
							orderDict.put("StateName", holder.getRegion());
							orderDict.put("Status", "Y");
							orderDict.put("Street", holder.getStreet());
							orderDict.put("PinCode", holder.getPostalAddress().substring(0, holder.getPostalAddress().length()>20?19:holder.getPostalAddress().length()));
							orderDict.put("Title", "1");
							orderDict.put("VrTinNo", holder.getPolicyHolderIdNumber());
							orderDict.put("SaveOrSubmit", "Submit"); 

							RestTemplate restTemplate = new RestTemplate();
							HttpHeaders headers = new HttpHeaders();
							headers.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
							headers.setContentType(MediaType.APPLICATION_JSON);
							headers.set("Authorization", tokens.split(",")[0]);
							HttpEntity<Object> entityReq = new HttpEntity<>(orderDict, headers);
							System.out.println(entityReq.getBody());
							ResponseEntity<CommonRes> response = restTemplate.postForEntity(COMMON_API+"/api/savecustomerdetails", entityReq, CommonRes.class);
							System.out.print(""+ response.getBody());
							if(!response.getBody().getIsError()) {
								JSONObject jsonObject = new JSONObject((LinkedHashMap) response.getBody().getCommonResponse());						
								customerId=jsonObject.get("SuccessId").toString();
							}

						}


						Calendar instance = Calendar.getInstance();
						instance.add(Calendar.YEAR, 1);
						Date endDate = instance.getTime();
						PolicyHolderInfo p=PolicyHolderInfo.builder()
								.effectiveDateStart(new Date())
								.effectiveDateEnd(endDate)
								.amendId(0)
								.coreAppCode("NA")
								.countryCode(holder.getCountryCode())
								.countryName(policyHolderRepo.fuGetCode("COUNTRY", holder.getCountryCode(), "100002", holder.getCountryCode(), "", ""))
								.districtCode(policyHolderRepo.fuGetCode("DISTRICT", holder.getDistrict(), "100002", holder.getCountryCode(), "", ""))
								.districtName(holder.getDistrict())
								//.dob(holder.getPolicyHolderBirthDate())
								.email(holder.getEmailAddress())
								.entryDate(new Date())
								.fax(holder.getPolicyHolderFax())
								.gender(holder.getGender())
								.genderDesc(policyHolderRepo.fuGetCode("POLICY_HOLDER_GENDER", holder.getGender(), "100002", holder.getCountryCode(), "", "")) //
								.mobileNo(holder.getPolicyHolderPhoneNumber()==null?"":holder.getPolicyHolderPhoneNumber().substring(3, holder.getPolicyHolderPhoneNumber().length()))
								.mobileCode(holder.getPolicyHolderPhoneNumber()==null?"":holder.getPolicyHolderPhoneNumber().substring(0, 3))
								.pinCode(holder.getPostalAddress())
								.policyHolderName(holder.getPolicyHolderName())
								.policyHolderIdDesc(policyHolderRepo.fuGetCode("POLICY_HOLDER_ID_TYPE", holder.getPolicyHolderIdType(), "100002", holder.getCountryCode(), "", ""))
								.policyHolderIdType(holder.getPolicyHolderIdType())
								.policyHolderType(holder.getPolicyHolderType())
								.policyHolderTypeDesc(policyHolderRepo.fuGetCode("POLICY_HOLDER_TYPE", holder.getPolicyHolderType(), "100002", holder.getCountryCode(), "", ""))
								.policyHolderIdNumber(holder.getPolicyHolderIdNumber())
								.reqRegNumber(req.getCoverNoteVerificationReq().getVerificationDtl().getMotorRegistrationNumber())
								.regionCode(policyHolderRepo.fuGetCode("REGION", holder.getRegion(), "100002", holder.getCountryCode(), "", ""))
								.regionName(holder.getRegion())
								.customerReferenceNo(customerId)
								.build();
						policyHolderRepo.save(p);

						DozerBeanMapper mapper = new DozerBeanMapper();
						PolicyHolderInfoDto map = mapper.map(p, PolicyHolderInfoDto.class);
						res.setHolder(map);
						//return map;
					}


				}
			}
			
			
		}catch (Exception e) {
			e.printStackTrace();
		}
		return res;
	}


	@Override
	public PolicyHolderInfoDto showPolicyHolder(MotorVehicleInfoGetReq req, String tokens) {
		PolicyHolderInfoDto person =null;
		if(StringUtils.isNotBlank(req.getReqRegNumber())) {
			PolicyHolderInfo policyHolderInfo = policyHolderRepo.findByReqRegNumber(req.getReqRegNumber());
			DozerBeanMapper mapper = new DozerBeanMapper();
			if(policyHolderInfo!=null)
				person = mapper.map(policyHolderInfo, PolicyHolderInfoDto.class);
			return person;
		}
		return null;
	}

	/*public static void main(String []args) {
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
		try {
			System.out.println( "Date "+formatter.parse("2023-10-30T11:59:59"));
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}*/
	
	
	public synchronized String getListItem(String insuranceId , String branchCode, String itemType, String itemCode) {
		String itemDesc = "" ;
		List<ListItemValue> list = new ArrayList<ListItemValue>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ListItemValue> query=  cb.createQuery(ListItemValue.class);
			// Find All
			Root<ListItemValue> c = query.from(ListItemValue.class);
			
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));
			
			
			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
			Predicate b3 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
			Predicate b4 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2,b3,b4);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
			Predicate b1 = cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
			Predicate b2 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3,a4,b1,b2);
						
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n12 = cb.equal(c.get("status"),"R");
			Predicate n13 = cb.or(n1,n12);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n5 = cb.equal(c.get("companyId"), "99999");
			Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
			Predicate n8 = cb.or(n4,n5);
			Predicate n9 = cb.or(n6,n7);
			Predicate n10 = cb.equal(c.get("itemType"),itemType );
			Predicate n11 = cb.equal(c.get("itemCode"), itemCode);
			
			query.where(n13,n2,n3,n4,n9,n10,n11).orderBy(orderList);
			
		
			// Get Result
			TypedQuery<ListItemValue> result = em.createQuery(query);
			list = result.getResultList();
			
			itemDesc = list.size() > 0 ? list.get(0).getItemValue() : "" ; 
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return itemDesc ;
	}
	
	
	
	
	
	@Override
	public MotorVehicleInfoRes getVehicleInfoExternal(MotorVehicleInfoGetReq req, String tokens) {
		MotorVehicleInfoRes res = new MotorVehicleInfoRes();
		MotorVehicleInfo data=new MotorVehicleInfo();
		Date entryDate = null;
		Date today = new Date();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {

			// Fetch Data By Register No
			ListItemValue itemValue=new ListItemValue();
			itemValue=constDet.findByItemTypeAndStatusOrderByAmendIdDesc("NO_OF_DAYS","Y").get(0);
				
			if (StringUtils.isNotBlank(req.getReqRegNumber()) ) {
				data = repository.findTop1ByResRegNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(req.getReqRegNumber() , "WEB", req.getInsuranceId() ); //"API"
				if( data==null) {
					data = repository.findTop1ByResRegNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(req.getReqRegNumber() , req.getSavedFrom(), req.getInsuranceId() ); //"API"
				}
				
				if (data != null  ) {	
					entryDate = data.getEntryDate();
					long dateBeforeInMs = entryDate.getTime();
					long dateAfterInMs = today.getTime();

					long timeDiff = Math.abs(dateAfterInMs - dateBeforeInMs);

					long daysDiff = TimeUnit.DAYS.convert(timeDiff, TimeUnit.MILLISECONDS);
				
					
					if (daysDiff >= Integer.valueOf(itemValue.getItemValue())) { // daysDiff >=180
						
						//fetch data from external
						res = getTokenExternal(req);
					}	
					
					else { //old return from local
						
						res = mapper.map(data, MotorVehicleInfoRes.class);
						res.setGvm(data.getResEngineCapacity());
						res.setCurrentLicenseExpiryDate(data.getCurrentLicenseexpDt());
						res.setFirstRegDate(data.getFirstRegdate());
						res.setRoadWorthinessExpiryDate(data.getRoadWorthexpDt());						
					}

				} else if (data == null) { 
					//fetch data from external
					res = getTokenExternal(req);
				} 
			
			} 
			
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null ;
		}
		return res;
		
	}


	private MotorVehicleInfoRes getTokenExternal(MotorVehicleInfoGetReq req) {
		ExternalTokenRes tokenRes = new ExternalTokenRes();
		MotorVehicleInfoRes res = new MotorVehicleInfoRes();
		try {

			//getting token "no auth"
			ExternalTokenReq req1 = new ExternalTokenReq();
			req1.setPassword("RTSA@2023");
			req1.setUsername("mgen@madison.co.zm");
			
			String url = vehicleTokenApi ;
			// String auth = ClaimBasicAuthName +":"+ ClaimBasicAuthPass;
	
	//		byte[] encodedAuth = Base64.encodeBase64(auth.getBytes(Charset.forName("US-ASCII")));
	//		String authHeader = "Basic" + new String(encodedAuth);
			RestTemplate restTemplate = new RestTemplate();
			HttpHeaders headers = new HttpHeaders();
			headers.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
			headers.setContentType(MediaType.APPLICATION_JSON);
	//		headers.set("Authorization",authHeader);
			HttpEntity<Object> entityReq = new HttpEntity<Object>(req1, headers);
	
			log.info("Api Url -----------> " + url);
			log.info("Request -----------> " + json.toJson(req1));
			ResponseEntity<Object> response = restTemplate.postForEntity(url, entityReq, Object.class);
	
			if (response != null && response.getBody() != null) {
				System.out.println(response.getBody() );
				log.info("Response -----------> " + json.toJson(response.getBody()) );
				
				ObjectMapper mapper = new ObjectMapper();
				tokenRes = mapper.convertValue(response.getBody() ,new TypeReference<ExternalTokenRes>(){});
				System.out.println(tokenRes);
	
			}
			
			//vehicle info
			if(tokenRes!=null)
				res = getVehicleInfoExternalApi (req, tokenRes.getToken());
		} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null ;
	}
	return res;
	}


	private MotorVehicleInfoRes getVehicleInfoExternalApi(MotorVehicleInfoGetReq req, String token) {
		MotorVehicleInfoExternalApiRes res = new MotorVehicleInfoExternalApiRes();
		MotorVehicleInfoRes resp = new MotorVehicleInfoRes();
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
		String statusCode =  "";
		try {
			//vehicle info "bearer token"
			
			String url = vehicleInfoApi + req.getReqRegNumber();
	        String authHeader = "Bearer " + token ;
			
			RestTemplate restTemplate = new RestTemplate();
			HttpHeaders headers = new HttpHeaders();
			headers.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
			headers.setContentType(MediaType.APPLICATION_JSON);
	//		HttpEntity<Object> entityReq = new HttpEntity<Object>(motReq, headers);
			headers.set("Authorization", authHeader);
			HttpEntity<Void> requestEntity = new HttpEntity<>(headers);
			log.info("Api Url -----------> " +  url );
		
			ResponseEntity<Object> response = restTemplate.exchange(url,  HttpMethod.GET, requestEntity, Object.class);

			log.info("Response -----------> " + json.toJson(response.getBody()) );

			if (response != null && response.getBody() != null) {
				System.out.println(response.getBody() );
				log.info("Response -----------> " + json.toJson(response.getBody()) ); 
				
				ObjectMapper mapper = new ObjectMapper();
//				res = mapper.convertValue(response.getBody() ,new TypeReference<MotorVehicleInfoExternalApiRes>(){});
//				System.out.println(res);
				
				@SuppressWarnings("unchecked")
				Map<String, Object> responseMap = (Map<String, Object>) response.getBody();
				statusCode = mapper.convertValue( responseMap.get("code") , String.class);
				if(statusCode.equalsIgnoreCase("400"))
					return null;
				else {
					res = mapper.convertValue( responseMap.get("body"), new TypeReference<MotorVehicleInfoExternalApiRes>(){});
					statusCode = mapper.convertValue( responseMap.get("code") , String.class);
					System.out.println(res);
					res.setCurrentLicenseExpiryDate( LocalDateTime.parse(res.getCurrentLicenseExpiryDate()).format(formatter)  );
					res.setFirstRegDate(LocalDateTime.parse(res.getFirstRegDate()).format(formatter)  );
					res.setRoadWorthinessExpiryDate(LocalDateTime.parse(res.getRoadWorthinessExpiryDate()).format(formatter)  );
				}
			} else {
				return null;
			}
			
//			if(res!=null) {
//				resp.setReqRegNumber(req.getReqRegNumber());
//				resp.setResRegNumber(res.getRegistrationNo());
//				resp.setResMake(res.getMake());
//				resp.setResModel(res.getModel());
//				resp.setResChassisNumber(res.getChassisNo());
//				resp.setResEngineNumber(res.getEngineNo());
//				resp.setResYearOfManufacture(res.getYearMake());
//				resp.setGvm(res.getGvm());	
//				resp.setResBodyType(res.getBodyType());
//				resp.setResColor(res.getMainColor());
//				resp.setResSittingCapacity(res.getNumberOfSeats());
//				resp.setFirstRegDate(sdf.parse( res.getFirstRegDate()));
//				resp.setRoadWorthinessExpiryDate(sdf.parse( res.getRoadWorthinessExpiryDate()));
//				resp.setCurrentLicenseExpiryDate(sdf.parse( res.getCurrentLicenseExpiryDate()));
//				resp.setResStatusDesc(res.getRegistrationStatus());				
//			}
			
			resp  = savemotorvehicleInfo(req, res, token, statusCode);
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null ;
		}
		return resp;
		
	}


	private MotorVehicleInfoRes savemotorvehicleInfo(MotorVehicleInfoGetReq req , MotorVehicleInfoExternalApiRes res, String token, String statusCode) {
		DozerBeanMapper mapper = new DozerBeanMapper();
		SimpleDateFormat arf = new SimpleDateFormat("yyMMddmmssSSS"); 
		MotorVehicleInfoRes resp = new MotorVehicleInfoRes();
		try {
			String regNo = res.getRegistrationNo() ;
		 	String chassisNo = res.getChassisNo();
		 	MotorVehicleInfo saveInfo = new MotorVehicleInfo();
		 	
		 	MotorVehicleInfo findData = repository.findTop1ByResRegNumberAndResChassisNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(regNo , chassisNo,"API", req.getInsuranceId() ) ;
		 
			if(findData!=null  ) {
				
				repository.delete(findData);
				MotorVehicleInfoArch archData   = new MotorVehicleInfoArch();  
				archData   = mapper.map(findData, MotorVehicleInfoArch.class);
				archData.setArchId("AI-" + arf.format(new Date()) );
				motorArchRepo.save(archData);
			} 
			
				saveInfo = mapper.map(res, MotorVehicleInfo.class);
				String runningNo = "MGEN"+Calendar.getInstance().getTimeInMillis() ;
				saveInfo.setResRequestId(runningNo); 	//running num
				saveInfo.setReqCompanyCode("MGEN");
				saveInfo.setReqSystemCode("LSYS_MGEN");
				saveInfo.setReqMotorCategory(1);
				String motorCategoryDesc = getListItem(req.getInsuranceId(), req.getBranchCode(), "MOTOR_CATEGORY",  "1");
				saveInfo.setMotorCategoryDesc(motorCategoryDesc);
				saveInfo.setReqChassisNumber(chassisNo);				
				saveInfo.setReqMsgSignature(token);
				saveInfo.setResMsgSignature(token);
				saveInfo.setStatus("Y");	
				saveInfo.setReqRequestId(runningNo);//	
				saveInfo.setResStatusCode(statusCode);
				saveInfo.setResMotorCategory(1);
				saveInfo.setResRegNumber(regNo);
				saveInfo.setResChassisNumber(chassisNo);	
				saveInfo.setResMake(res.getMake());		
				saveInfo.setResModel(res.getModel());
				saveInfo.setResBodyType(res.getBodyType());
				saveInfo.setResColor(res.getMainColor());
				saveInfo.setResEngineNumber(res.getEngineNo());
				saveInfo.setResSittingCapacity(Integer.valueOf (res.getNumberOfSeats()));
				saveInfo.setResYearOfManufacture(Integer.valueOf (res.getYearMake()));;
				
				saveInfo.setEntryDate(new Date());
				saveInfo.setReqRegNumber(res.getRegistrationNo().toUpperCase());
				saveInfo.setResStatusDesc(res.getRegistrationStatus());
				saveInfo.setResEngineCapacity(res.getGvm());
				saveInfo.setResGrossWeight(Double.valueOf(res.getGvm()));
				saveInfo.setFirstRegdate(sdf.parse(res.getFirstRegDate()));
				saveInfo.setCurrentLicenseexpDt(sdf.parse(res.getCurrentLicenseExpiryDate()));
				saveInfo.setRoadWorthexpDt(sdf.parse(res.getRoadWorthinessExpiryDate()));
				saveInfo.setCompanyId(req.getInsuranceId());				;
				saveInfo.setSavedFrom("API");
			 	repository.saveAndFlush(saveInfo);
			 	log.info(" Saved Details is ---> " + json.toJson(saveInfo) );
			 	
			 	//return
			 	resp = mapper.map(saveInfo, MotorVehicleInfoRes.class);
				resp.setReqRegNumber(req.getReqRegNumber());
				resp.setResRegNumber(res.getRegistrationNo());
				resp.setResMake(res.getMake());
				resp.setResModel(res.getModel());
				resp.setResChassisNumber(res.getChassisNo());
				resp.setResEngineNumber(res.getEngineNo());
				resp.setResYearOfManufacture(res.getYearMake());
				resp.setGvm(res.getGvm());	
				resp.setResBodyType(res.getBodyType());
				resp.setResColor(res.getMainColor());
				resp.setResSittingCapacity(res.getNumberOfSeats());
				resp.setFirstRegDate(sdf.parse( res.getFirstRegDate()));
				resp.setRoadWorthinessExpiryDate(sdf.parse( res.getRoadWorthinessExpiryDate()));
				resp.setCurrentLicenseExpiryDate(sdf.parse( res.getCurrentLicenseExpiryDate()));
				resp.setResStatusDesc(res.getRegistrationStatus());	

			
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());

		}
		return resp;
	}


	@Override
	public List<Error> validateVehicleInfoList(MotorVehicleInfoListSaveReq req1) {
		 List<Error> errors = new ArrayList<Error>();
		 try {
			 List<VehicleInfoSaveReq> vehicleInfoSaveReq=new ArrayList<VehicleInfoSaveReq>();
			 vehicleInfoSaveReq=req1.getVehicleInfoSaveReq();
			 int row=0;
			 
			 ListItemValue itemValue =constDet.findByItemTypeIgnoreCaseAndStatusIgnoreCase("SKIP_VALIDATION", "Y");
			 
			 String skipValidationCompanyId =StringUtils.isBlank(itemValue.getItemValue())?"":itemValue.getItemValue();
			
			 Boolean skipYn =false;
			 
			 if(StringUtils.isNotBlank(skipValidationCompanyId)) {
				 
				 String array[] =skipValidationCompanyId.split(",");
				 
				 skipYn =Stream.of(array).anyMatch(p ->p.equals(req1.getInsuranceId()));
			 }
			 
			 for(VehicleInfoSaveReq req:vehicleInfoSaveReq) {
				 row=row+1;
			 if(!skipYn) {
				 
//				 if(!"100019".equalsIgnoreCase(skipValidationCompanyId))
				 
				 if (StringUtils.isBlank(req.getResNumberOfAxles())) {
					 errors.add(new Error("14", "NumberOfAxles" , "Please Enter NumberOfAxles In Row No : "+row));
				 } else if (! req.getResNumberOfAxles().matches("[1-9]+") ) {
					 errors.add(new Error("14", "ResNumberOfAxles" , "Please Enter Valid Number in ResNumberOfAxles In Row No : "+row));
				 }else if (Integer.valueOf(req.getResNumberOfAxles())>5)  {
					 errors.add(new Error("14", "ResNumberOfAxles" , "Please Enter No Of Axle's Less Than or Equal to 5 In Row No : "+row));
				 }
				 
				 
			   if (StringUtils.isBlank(req.getResAxleDistance()) ) {
					 errors.add(new Error("02", "ResAxleDistance" , "Please Enter ResAxleDistance In Row No : "+row));
				 }else if (Integer.valueOf(req.getResAxleDistance())<=0) {
					 errors.add(new Error("02", "ResAxleDistance" , "Please Enter Axle Distance Above Zero  In Row No : "+row));
				 }
			   
			   
			   if (StringUtils.isBlank(req.getResTareWeight()) && !skipYn) {
					 errors.add(new Error("18", "TareWeight" , "Please Enter TareWeight In Row No : "+row));
				   } else if (! req.getResTareWeight().matches("[0-9.]+") ) {
					 errors.add(new Error("18", "TareWeight" , "Please Enter Valid Number in TareWeight In Row No : "+row));
				   }else if (Integer.valueOf(req.getResTareWeight())<=0) {
					 errors.add(new Error("18", "TareWeight" , "Please Enter TareWeight Above Zero In Row No : "+row));
				   }
			 }
			 
			 
			 if (StringUtils.isBlank(req.getResBodyType())) {
				 errors.add(new Error("03", "BodyType" , "Please Select BodyType In Row No : "+row));
			 }
			 
			 if (StringUtils.isBlank(req.getResChassisNumber())) {
				 errors.add(new Error("04", "ChassisNo" , "Please Enter ChassisNo In Row No : "+row));
			 } else if (StringUtils.isNotBlank(req.getResChassisNumber())&& (!req.getResChassisNumber().matches("[a-zA-Z0-9]+"))) {
				 errors.add(new Error("04", "ChassisNo" , "Please Enter ChassisNo in Correct Format In Row No : "+row));
				 
			 }  else if (req.getResChassisNumber().length() < 5 ) {
				 errors.add(new Error("04", "ChassisNo" , "ChassisNo must be greater then 4 Charecters only allowed In Row No : "+row));
				 
			 }   else if (req.getResChassisNumber().length() > 20 ) {
				 errors.add(new Error("04", "ChassisNo" , "ChassisNo must be under 20 Charecters only allowed In Row No : "+row));
			 } else if(StringUtils.isNotBlank(req.getResChassisNumber()) && StringUtils.isNotBlank(req.getResRegNumber()) ) {
				 
				 MotorVehicleInfo 	 findData = repository.findTop1ByResChassisNumberAndCompanyIdOrderByEntryDateDesc(req.getResChassisNumber(), req1.getInsuranceId()  ) ;
				 if( findData!=null && findData.getResRegNumber().equalsIgnoreCase(req.getResRegNumber()) ) {
//					 errors.add(new Error("04", "ChassisNumber" , "Register Number Already Exist In Row No : "+row));
				 } else
				 if( findData!=null && (! findData.getResRegNumber().equalsIgnoreCase(req.getResRegNumber())) ) {
					 errors.add(new Error("04", "ChassisNumber" , "Chassis Number Already linked with " + " Register Number-"+ findData.getResRegNumber()  ));
				 }
			 }
			 
			 if(StringUtils.isNotBlank(req.getResRegNumber())) {
				 MotorVehicleInfo 	 findData = repository.findTop1ByResRegNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(req.getResRegNumber() ,"API",  req1.getInsuranceId() ) ;
				 if( findData==null ) {
					 findData = repository.findTop1ByResRegNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(req.getResRegNumber() ,"WEB", req1.getInsuranceId() ) ;
					 if( findData!=null ) {
//						 errors.add(new Error("04", "RegisterNumber" , "Register Number Already Exist In Row No : "+row));
					 }
				 }
			 }
			 
			 if (StringUtils.isBlank(req.getResColor())) {
				 errors.add(new Error("05", "Color" , "Please Select Color In Row No : "+row));
			 }
			 if (StringUtils.isBlank(req.getResEngineCapacity())) {
				 errors.add(new Error("06", "Engine Capacity" , "Please Enter Engine Capacity In Row No : "+row));
			 } else if (! req.getResEngineCapacity().matches("[0-9.]+") ) {
				 errors.add(new Error("06", "Engine Capacity" , "Please Enter Valid Number in Engine Capacity In Row No : "+row));
			 } else if (StringUtils.isNotBlank(req.getResEngineCapacity())&& req.getResEngineCapacity().equalsIgnoreCase("0")){
				 errors.add(new Error("06", "Engine Capacity" , "Please Enter Valid Capacity as Engine Capacity In Row No : "+row));				 
			 }  else if ( Double.valueOf(req.getResEngineCapacity()) > 99999 ) {
				 errors.add(new Error("04", "Engine Capacity" , "Engine Capacity must be under 5 digit only allowed In Row No : "+row));
			 } 
			 
			 if (StringUtils.isBlank(req.getResEngineNumber())) {
				 errors.add(new Error("07", "EngineNumber" , "Please Enter EngineNumber In Row No : "+row));
			 }	else if (StringUtils.isNotBlank(req.getResEngineNumber())&& (!req.getResEngineNumber().matches("[a-zA-Z0-9]+"))) {
				 errors.add(new Error("07", "EngineNumber" , "Please Enter EngineNumber in Correct Format In Row No : "+row));
			 }  else if (req.getResEngineNumber().length() < 2 ) {
				 errors.add(new Error("04", "EngineNumber" , "EngineNumber must be greater then 4 Charecters only allowed In Row No : "+row));
				 
			 }    else if (req.getResEngineNumber().length() > 20 ) {
				 errors.add(new Error("04", "EngineNumber" , "EngineNumber must be under 20 Charecters only allowed In Row No : "+row));
				 
			 } else if (StringUtils.isNotBlank(req.getResChassisNumber()) && StringUtils.isNotBlank(req.getResEngineNumber()) ) {
					if(  req.getResChassisNumber().trim().equalsIgnoreCase(req.getResEngineNumber().trim())) {
						errors.add(new Error("07", "EngineNumber", "EngineNumber Is Not Same as Chassis Number In Row No : "+row));
					}
			}
			 
			 if (StringUtils.isBlank(req.getResMake())) {
				 errors.add(new Error("10", "Make" , "Please Select Make In Row No : "+row));
			 }
			 
			 
			 if (StringUtils.isBlank(req.getResModel())  && StringUtils.isNotBlank(req.getResBodyType()) ) {
				 
				// Induvidual 
				List<String> induvidualIds = new ArrayList<String>();  
				induvidualIds.add("1");
				induvidualIds.add("2");
				induvidualIds.add("3");
				induvidualIds.add("4");
				induvidualIds.add("5");
				 if(  ! induvidualIds.contains(req.getResBodyType()) ) {
					 errors.add(new Error("11", "Model" , "Please Select Model In Row No : "+row));
				 } 
			 } else if ( StringUtils.isNotBlank(req.getResModel()) && req.getResModel().length() > 200  ) {
				 errors.add(new Error("11", "ModelDescription" , "Model Description Must be under 200 Charecters only allowed In Row No : "+row));
			 }
			
			
			 
					
			 if (StringUtils.isBlank(req.getResRegNumber())) {
				 errors.add(new Error("17", "RegNumber" , "Please Enter RegNumber In Row No : "+row));
			 }
			 else if (StringUtils.isNotBlank(req.getResRegNumber())&& (!req.getResRegNumber().matches("[a-zA-Z0-9]+"))) {
				 errors.add(new Error("17", "RegNumber" , "Please Enter RegNumber in Correct Format In Row No : "+row));
			 }else  {
				 

//				 MotorVehicleInfo findData = repository.findByResRegNumber(req.getResRegNumber()) ;
//				 if( findData!=null ) {
//					 errors.add(new Error("04", "RegNumber" , "RegNumber Already Exist In Row No : "+row));
//				 }
				 
				 
			 }


			 if (StringUtils.isBlank(req.getResSittingCapacity())) {
				 errors.add(new Error("18", "SeatingCapacity" , "Please Enter Seating Capacity In Row No : "+row));
			 } else if (! req.getResSittingCapacity().matches("[0-9]+") ) {
				 errors.add(new Error("14", "SeatingCapacity" , "Please Enter Valid Number in Seating Capacity In Row No : "+row));
			 } else if(StringUtils.isNotBlank(req1.getInsuranceId()) && StringUtils.isNotBlank(req1.getBranchCode()) && StringUtils.isNotBlank(req.getResBodyType()) ) {
					  
				 List<MotorBodyTypeMaster> bodyTypes =  getInduvidualBodyTypeMasterDropdown(req1.getInsuranceId() ,req1.getBranchCode() , req.getResBodyType() ) ;
				 if (Integer.valueOf(req.getResSittingCapacity().toString() ) <= 0 ) {
					 errors.add(new Error("09", "SeatingCapacity" , "Seating Capacity 0 not allowed  In Row No : "+row));
				 }
				 else  if( bodyTypes.size() > 0 && bodyTypes.get(0).getSeatingCapacity() !=null && bodyTypes.get(0).getSeatingCapacity()  < Integer.valueOf(req.getResSittingCapacity())   )  {
					 errors.add(new Error("09", "SeatingCapacity" , "Seating Capacity Must be under " + bodyTypes.get(0).getSeatingCapacity() +  " only allowed  In Row No : "+row));
				 }
			 }
			 
			 
			 if (StringUtils.isBlank(req.getResYearOfManufacture())) {
				 errors.add(new Error("18", "Manufacture Year" , "Please Select Manufacture Year In Row No : "+row));
			 } else if((StringUtils.isNotBlank(req.getResYearOfManufacture())&&  ! req.getResYearOfManufacture().matches("[0-9]+")) || req.getResYearOfManufacture().length()>4 ) {
					errors.add(new Error("33", "Manufacture Year", "Please Enter Manufacture Year Format in YYYY In Row No : "+row));
				}
				else if((StringUtils.isNotBlank(req.getResYearOfManufacture())&&! req.getResYearOfManufacture().matches("[0-9]+")) || req.getResYearOfManufacture().length()<4 ) {
					errors.add(new Error("33", "Manufacture Year", "Please Enter Manufacture Year Format in YYYY In Row No : "+row));
				}
			 
			 if(StringUtils.isNotBlank(req1.getInsuranceId()) && "100004".equalsIgnoreCase(req1.getInsuranceId()))
			 {
				 
			 }
			 else
			 {
				 if (StringUtils.isBlank(req.getResMotorUsage())) {
					 errors.add(new Error("13", "MotorUsage" , "Please Select MotorUsage In Row No : "+row));
				 }
				 if(StringUtils.isNotBlank(req1.getInsuranceId()) && ! ("100028".equalsIgnoreCase(req1.getInsuranceId()))) {
				 if (StringUtils.isBlank(req.getResMotorCategory())) {
					 errors.add(new Error("12", "MotorCategory" , "Please Select MotorCategory In Row No : "+row));
				   }
				 }
				 
				 if (StringUtils.isBlank(req.getResOwnerName())) {
					 errors.add(new Error("16", "OwnerName" , "Please Enter OwnerName In Row No : "+row));
				 
				   }
				   else if (StringUtils.isNotBlank(req.getResOwnerName())&& (!req.getResOwnerName().matches("[a-zA-Z ]+"))) {
					 errors.add(new Error("17", "OwnerName" , "Please Enter OwnerName in Correct Format In Row No : "+row));
				   }
				  if (StringUtils.isBlank(req.getResOwnerCategory())) {
					 errors.add(new Error("15", "OwnerCategory" , "Please Select OwnerCategory In Row No : "+row));
				    }				 
				   
				   if (StringUtils.isBlank(req.getResGrossWeight())) {
						 errors.add(new Error("18", "GrossWeight" , "Please Enter Gross Weight In Row No : "+row));
					   } else if (! req.getResGrossWeight().matches("[0-9.]+") ) {
						 errors.add(new Error("18", "GrossWeight" , "Please Enter Valid Number in Gross Weight In Row No : "+row));
						}
						if (StringUtils.isNotBlank(req.getResGrossWeight())) {
							if (Integer.valueOf(req.getResGrossWeight()) <= 0) {
								errors.add(new Error("18", "GrossWeight", "Please Enter Gross Weight Above Zero In Row No : "+row));
							}
						}
				   

				   if (StringUtils.isBlank(req.getResFuelUsed())) {
						 errors.add(new Error("08", "FuelUsed" , "Please Select FuelUsed In Row No : "+row));
					 }
				
			 }
			 }
				List<VehicleInfoSaveReq> itemslist = req1.getVehicleInfoSaveReq();
				List<String> chassisNo = itemslist.stream().map(VehicleInfoSaveReq::getResChassisNumber)
						.collect(Collectors.toList());
				System.out.println("The list of duplicate Items with frequency: ");
				List<String> count = chassisNo.stream() // converting list to stream
						.filter(itr -> Collections.frequency(chassisNo, itr) > 1).collect(Collectors.toList());// checking
																												// the
																												// duplicate

				if (count.size()>1) {
					errors.add(new Error("03", "ChassissNo", "Duplicate ChassissNo"));
				}
				
				List<String> regNo = itemslist.stream().map(VehicleInfoSaveReq::getResRegNumber)
						.collect(Collectors.toList());
				System.out.println("The list of duplicate Items with frequency: ");
				List<String> regcount = regNo.stream() // converting list to stream
						.filter(itr -> Collections.frequency(regNo, itr) > 1).collect(Collectors.toList());// checking
					

				if (regcount.size()>1) {
					errors.add(new Error("03", "Registration No", "Registration No"));
				}
				
				List<String> engineNo = itemslist.stream().map(VehicleInfoSaveReq::getResEngineNumber)
						.collect(Collectors.toList());
				System.out.println("The list of duplicate Items with frequency: ");
				List<String> enginecount = engineNo.stream() // converting list to stream
						.filter(itr -> Collections.frequency(engineNo, itr) > 1).collect(Collectors.toList());// checking
					

				if (enginecount.size()>1) {
					errors.add(new Error("03", "Engine No", "Engine No"));
				}
				
				if (StringUtils.isBlank(req1.getInsuranceId())) {
					errors.add(new Error("03", "InsuranceId", "Please Enter InsuranceId"));
				}

				if (StringUtils.isBlank(req1.getCreatedBy())) {
					errors.add(new Error("01", "CreatedBy", "Please Enter CreatedBy"));
				}

				if (StringUtils.isBlank(req1.getAgencyCode())) {
					errors.add(new Error("01", "AgencyCode", "Please Enter Agency Code "));
				}
				if (StringUtils.isBlank(req1.getApplicationId())) {
					errors.add(new Error("01", "Application Id", "Please Enter Application Id "));
				}
				if (StringUtils.isBlank(req1.getBdmCode())) {
					errors.add(new Error("01", "BdmCode", "Please Enter BdmCode"));
				}
				if (StringUtils.isBlank(req1.getBrokerBranchCode())) {
					errors.add(new Error("01", "BrokerBranchCode", "Please Enter BrokerBranchCode"));
				}
				if (StringUtils.isBlank(req1.getBrokerCode())) {
					errors.add(new Error("01", "BrokerCode", "Please Enter BrokerCode"));
				}
				if (StringUtils.isBlank(req1.getCurrency())) {
					errors.add(new Error("01", "Currency", "Please Enter Currency"));
				}
				if (StringUtils.isBlank(req1.getCustomerCode())) {
					errors.add(new Error("01", "CustomerCode", "Please Enter CustomerCode"));
				}
				if (StringUtils.isBlank(req1.getExchangeRate())) {
					errors.add(new Error("01", "ExchangeRate", "Please Enter ExchangeRate"));
				}
				if (StringUtils.isBlank(req1.getCustomerReferenceNo())) {
					errors.add(new Error("01", "CustomerReferenceNo", "Please Enter CustomerReferenceNo"));
				}
				if (StringUtils.isBlank(req1.getLoginId())) {
					errors.add(new Error("01", "LoginId", "Please Enter LoginId"));
				}
				if (StringUtils.isBlank(req1.getProductId())) {
					errors.add(new Error("01", "ProductId", "Please Enter ProductId"));
				}
				if (StringUtils.isBlank(req1.getSaveOrSubmit())) {
					errors.add(new Error("01", "SaveOrSubmit", "Please Enter SaveOrSubmit"));
				}
				if (StringUtils.isBlank(req1.getSourceTypeId())) {
					errors.add(new Error("01", "SourceTypeId", "Please Enter SourceTypeId"));
				}
				if (StringUtils.isBlank(req1.getStatus())) {
					errors.add(new Error("01", "Status", "Please Enter Status"));
				}
				if (StringUtils.isBlank(req1.getSubUserType())) {
					errors.add(new Error("01", "SubUserType", "Please Enter SubUserType"));
				}
				if (StringUtils.isBlank(req1.getUserType())) {
					errors.add(new Error("01", "UserType", "Please Enter UserType"));
				}
				if (req1.getPolicyStartDate() == null) {
//					error.add("1124");
					errors.add(new Error("13", "PolicyStartDate", "Please Enter PolicyStartDate"));
				}
				if (req1.getPolicyEndDate() == null) {
//					error.add("1126");
					errors.add(new Error("14", "PolicyEndDate", "Please Enter PolicyEndDate"));
				}
				
				
			 
		 } catch (Exception e) {
				e.printStackTrace();
				log.info(e.getMessage());
				
				return null;

		}
		 return errors;
	}


	@Override
	@Transactional
	public MotorSaveRes saveVehicleInfoList(MotorVehicleInfoListSaveReq req1, String token) {
		MotorSaveRes res = new MotorSaveRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		SimpleDateFormat arf = new SimpleDateFormat("yyMMddmmssSSS"); 
		try {
			List<VehicleInfoSaveReq> VehicleInfoSaveReq=new ArrayList<VehicleInfoSaveReq>();
			VehicleInfoSaveReq=req1.getVehicleInfoSaveReq();
			Integer vehicleId;
			String result="";
//			List<String> message=new ArrayList<String>();
			String message="";
			String requestReferenceNo="";
			if(req1.getRequestReferenceNo()==null || StringUtils.isBlank(req1.getRequestReferenceNo())) {
			 vehicleId=0;
			}else
			{
				List<EserviceMotorDetails> list=repo.findByRequestReferenceNoOrderByRiskIdDesc(req1.getRequestReferenceNo());
				vehicleId=list.get(0).getRiskId();
				requestReferenceNo=req1.getRequestReferenceNo();
			}
			String vehicleurl = savevehicleinfocall;
			
			RestTemplate restTemplate1 = new RestTemplate();
			HttpHeaders headers1 = new HttpHeaders();
			headers1.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
			headers1.setContentType(MediaType.APPLICATION_JSON);
			headers1.set("Authorization", token.split(",")[0]);
			HttpEntity<MotorVehicleInfoListSaveReq> entityReq1 = new HttpEntity<MotorVehicleInfoListSaveReq>(req1, headers1);

			ResponseEntity<MotorVehicleInfoCommonRes> response1 = restTemplate1.postForEntity(vehicleurl, entityReq1, MotorVehicleInfoCommonRes.class);
			MotorVehicleInfoRes showVehicleInfo= new MotorVehicleInfoRes();
			if (response1.getBody().getIsError()) {
				System.out.println(response1.getBody().getErrorMessage().get(0).getMessage());
				result="failed";
				}
				if (!response1.getBody().getIsError()) {
					 showVehicleInfo=response1.getBody().getCommonResponse().getShowVehicleInfo();
					 result="success";
				}
			if("success".equalsIgnoreCase(result)) {
				
				List<DropDownRes> bodyTypes = getInduvidualBodyTypeMasterDropdown(req1.getInsuranceId() ,req1.getBranchCode()); 
				
			for (VehicleInfoSaveReq req : VehicleInfoSaveReq) {
				// E Service Motor Details
				vehicleId = vehicleId + 1;
				String url = saveMotorApi;
				EserviceMotorDetailsSaveReq motorReq = new EserviceMotorDetailsSaveReq();
				motorReq.setBrokerBranchCode(req1.getBrokerBranchCode());
				motorReq.setCustomerCode(req1.getCustomerCode());
				motorReq.setBdmCode(req1.getBdmCode());
				motorReq.setBrokerCode(req1.getBrokerCode());
				motorReq.setLoginId(req1.getLoginId());
				motorReq.setSubUserType(req1.getSubUserType());
				motorReq.setApplicationId(req1.getApplicationId());
				motorReq.setCustomerReferenceNo(req1.getCustomerReferenceNo());
				motorReq.setRequestReferenceNo(requestReferenceNo);
				motorReq.setIdNumber(req1.getIdNumber());
				motorReq.setVehicleId(vehicleId.toString());
				motorReq.setCreatedBy(req1.getCreatedBy());
				motorReq.setCompanyId(req1.getInsuranceId());
				motorReq.setBranchCode(req1.getBranchCode());
				motorReq.setAgencyCode(req1.getAgencyCode());
				motorReq.setProductId(req1.getProductId());
				motorReq.setSourceTypeId(req1.getSourceTypeId());
				motorReq.setPolicyStartDate(req1.getPolicyStartDate());
				motorReq.setPolicyEndDate(req1.getPolicyEndDate());
				motorReq.setCurrency(req1.getCurrency());
				motorReq.setExchangeRate(req1.getExchangeRate());
				motorReq.setHavepromocode(req1.getHavepromocode());
				motorReq.setFleetOwnerYn(req1.getFleetOwnerYn());
				motorReq.setUserType(req1.getUserType());
				motorReq.setSaveOrSubmit(req1.getSaveOrSubmit());
				motorReq.setStatus(req1.getStatus());
				motorReq.setCarAlarmYn(req1.getCarAlarmYn());
				motorReq.setAxelDistance(null);
				motorReq.setRegistrationnumber(req.getResRegNumber());
				motorReq.setChassisNumber(req.getResChassisNumber());
				List<DropDownRes> fitlerBodyType = bodyTypes.stream().filter( o -> o.getCodeDesc().trim().toLowerCase().equalsIgnoreCase(req.getResBodyType().trim().toLowerCase())).collect(Collectors.toList());
				String bodyId  = fitlerBodyType.size() > 0 ? fitlerBodyType.get(0).getCode() : "";
				motorReq.setVehicleType(bodyId);
				//motorReq.setVehicleTypeDesc(vehicleurl);
				
				RestTemplate restTemplate = new RestTemplate();
				HttpHeaders headers = new HttpHeaders();
				headers.setAccept(Arrays.asList(new MediaType[] { MediaType.APPLICATION_JSON }));
				headers.setContentType(MediaType.APPLICATION_JSON);
				headers.set("Authorization", token.split(",")[0]);
				HttpEntity<EserviceMotorDetailsSaveReq> entityReq = new HttpEntity<EserviceMotorDetailsSaveReq>(
						motorReq, headers);

				ResponseEntity<CommonRes> response = restTemplate.postForEntity(url, entityReq, CommonRes.class);
				if (response.getBody().getIsError()) {
				System.out.println(response.getBody().getErrorMessage().get(0).getMessage());
//				message.add(response.getBody().getErrorMessage().get(0).getMessage());
				message=response.getBody().getErrorMessage().get(0).getMessage();
				result="failed";
				}
				if (!response.getBody().getIsError()) {
					
					        
					// casting saved motor details response
					
					try {

						if (null != response.getBody().getCommonResponse()) {

							Object body = response.getBody().getCommonResponse();

							LinkedHashMap<?, ?> map = new LinkedHashMap<>();

							if (body instanceof LinkedHashMap<?, ?>) {

								map = (LinkedHashMap<?, ?>) body;

								if (null != map && !map.isEmpty()) {

									requestReferenceNo = map.get("RequestReferenceNo") != null
											? map.get("RequestReferenceNo").toString()
											: "";

								} else {
									log.error("Data Not Found After Casting The Save Motor Details Response");
									throw new NotFoundException(
											"Data Not Found After Casting The Save Motor Details Response");

								}

							} else if (body instanceof ArrayList<?>) {

								List<LinkedHashMap<?, ?>> re = new ArrayList<>((List<LinkedHashMap>) body);

								map = re.get(0);

								if (null != map && !map.isEmpty()) {

									requestReferenceNo = map.get("RequestReferenceNo") != null
											? map.get("RequestReferenceNo").toString()
											: "";
								} else {
									log.error("Data Not Found After Casting The Save Motor Details Response");
									throw new NotFoundException(
											"Data Not Found After Casting The Save Motor Details Response");

								}
							} else {

								log.error("UnExpected Class Comes While Fetching RequestReferenceNo ");
								throw new UnexpectedException(
										"UnExpected Class Comes While Fetching RequestReferenceNo");
							}
						}
					} catch (Exception e) {

						log.error("Exception Occurs When Casting The Saved Motor Details  " + e.getMessage());
						e.printStackTrace();
						throw new ClassCastException("Check The Casting Block Of Saved Motor Details");

					}
						
//					JSONObject jsonObject = new JSONObject((LinkedHashMap) response.getBody().getCommonResponse());
//					requestReferenceNo = jsonObject.get("RequestReferenceNo").toString();
					result="success";
				}
			}
			}
			if ("failed".equalsIgnoreCase(result)) {
				res.setResponse("Failed");
				res.setShowVehicleInfo(showVehicleInfo);
				res.setError(message);
			} else {
				res.setResponse("Saved Successfully");
				res.setShowVehicleInfo(showVehicleInfo);
				res.setRequestReferenceNo(requestReferenceNo);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return res;

	}


	@Override
	public MotorSaveRes saveVehicleInfoListCall(MotorVehicleInfoListSaveReq req1, String tokens) {
		MotorSaveRes res = new MotorSaveRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		SimpleDateFormat arf = new SimpleDateFormat("yyMMddmmssSSS"); 
		try {
			List<VehicleInfoSaveReq> VehicleInfoSaveReq=new ArrayList<VehicleInfoSaveReq>();
			VehicleInfoSaveReq=req1.getVehicleInfoSaveReq();
			List<MotorVehicleInfo> saveInfoList = new ArrayList<MotorVehicleInfo>();
		 	MotorVehicleInfo saveInfo = new MotorVehicleInfo();
			for(VehicleInfoSaveReq req:VehicleInfoSaveReq) {
			String regNo = req.getResRegNumber() ;
		 	String chassisNo = req.getResChassisNumber();
		 	
		 	MotorVehicleInfo findData = repository.findTop1ByResRegNumberAndResChassisNumberAndSavedFromAndCompanyIdOrderByEntryDateDesc(regNo , chassisNo,"WEB", req1.getInsuranceId());
		 	
		 	String policyYn = "N" ;
		 	
			if(findData!=null  && findData.getPolicyYn().equalsIgnoreCase("N") ) {
				saveInfo = findData ;
				
				policyYn  = "N";
				repository.delete(findData);
				MotorVehicleInfoArch archData   = new MotorVehicleInfoArch();  
				archData   = mapper.map(findData, MotorVehicleInfoArch.class);
				archData.setArchId("AI-" + arf.format(new Date()) );
				motorArchRepo.save(archData);
			} else if( findData!=null){
				saveInfo = findData ;
				policyYn = findData.getPolicyYn(); 
			}
			
			if  (policyYn.equalsIgnoreCase("N") ) {
				
				saveInfo = mapper.map(req, MotorVehicleInfo.class);
				saveInfo.setEntryDate(new Date());
				saveInfo.setReqChassisNumber(req.getResChassisNumber().toUpperCase() );
				saveInfo.setReqRegNumber(req.getResRegNumber().toUpperCase());
				saveInfo.setPolicyYn("N");
				saveInfo.setStatus("Y");
				saveInfo.setReqMotorCategory(StringUtils.isBlank(req.getResMotorCategory()) ? null : Integer.valueOf(req.getResMotorCategory()));
				saveInfo.setResMotorCategory(StringUtils.isBlank(req.getResMotorCategory()) ? null :Integer.valueOf(req.getResMotorCategory()));
				String motorCategoryId = saveInfo.getResMotorCategory()!=null ?saveInfo.getResMotorCategory().toString() :""; 
				String motorCategoryDesc = getListItem(req1.getInsuranceId(), req1.getBranchCode(), "MOTOR_CATEGORY",  motorCategoryId);
				saveInfo.setMotorCategoryDesc(motorCategoryDesc);
				saveInfo.setResChassisNumber(req.getResChassisNumber().toUpperCase());
				saveInfo.setResEngineNumber(req.getResEngineNumber().toUpperCase());
				saveInfo.setResRegNumber(req.getResRegNumber().toUpperCase());
				saveInfo.setSavedFrom("WEB");
				saveInfo.setCompanyId(req1.getInsuranceId());
//				saveInfo.setResAxleDistance(Double.valueOf(req.getResAxleDistance()));
				saveInfo.setResMotorUsage(req.getResMotorUsage());
				saveInfoList.add(saveInfo);
			}
			}
			repository.saveAllAndFlush(saveInfoList);
		 	
		 	log.info(" Saved Details is ---> " + json.toJson(saveInfo) );
		
			MotorVehicleInfoRes showVehicleInfo = new  MotorVehicleInfoRes();
			mapper.map(saveInfo, showVehicleInfo);
			res.setResponse("Saved Successfully");
			res.setShowVehicleInfo(showVehicleInfo);
			
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return res;
	}
	
	public List<DropDownRes> getInduvidualBodyTypeMasterDropdown(String insuranceId , String branchCode) {
		List<DropDownRes> resList = new ArrayList<DropDownRes>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<MotorBodyTypeMaster> query = cb.createQuery(MotorBodyTypeMaster.class);
			List<MotorBodyTypeMaster> list = new ArrayList<MotorBodyTypeMaster>();
			// Find All
			Root<MotorBodyTypeMaster> c = query.from(MotorBodyTypeMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<MotorBodyTypeMaster> ocpm1 = effectiveDate.from(MotorBodyTypeMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("bodyId"), ocpm1.get("bodyId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a4 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
			Predicate a5 = cb.equal(c.get("sectionId"), ocpm1.get("sectionId"));
			effectiveDate.where(a1, a2,a3,a4,a5);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<MotorBodyTypeMaster> ocpm2 = effectiveDate2.from(MotorBodyTypeMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a6 = cb.equal(c.get("bodyId"), ocpm2.get("bodyId"));
			Predicate a7 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a8 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a9 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			Predicate a10 = cb.equal(c.get("sectionId"),  ocpm2.get("sectionId"));
			
			effectiveDate2.where(a6,a7,a8,a9,a10);
			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n5 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n6 = cb.equal(c.get("branchCode"), "99999");
			Predicate n7 = cb.or(n5,n6);
			query.where(n1,n2,n3,n4,n7).orderBy(orderList);	
			
			// Get Result
			TypedQuery<MotorBodyTypeMaster> result = em.createQuery(query);
			list = result.getResultList();
			list.sort(Comparator.comparing(MotorBodyTypeMaster :: getBodyNameEn ));
			
			List<DropDownRes> totalList = new ArrayList<DropDownRes>();
			
			for (MotorBodyTypeMaster data : list) {
				// Response
				DropDownRes res = new DropDownRes();
				res.setCode(data.getBodyId().toString());
				res.setCodeDesc(data.getBodyNameEn());
				res.setStatus(data.getStatus());
				totalList.add(res);
			}
			
			// Induvidual 
			List<String> induvidualIds = new ArrayList<String>();  
			induvidualIds.add("1");
			induvidualIds.add("2");
			induvidualIds.add("3");
			induvidualIds.add("4");
			induvidualIds.add("5");
			List<DropDownRes> induvidualList = totalList.stream().filter( o -> induvidualIds.contains(o.getCode())  ).collect(Collectors.toList());
			induvidualList.sort(Comparator.comparing( DropDownRes :: getCode));
			resList.addAll(induvidualList);
			
			// Commercial
			List<DropDownRes> commercialList = totalList.stream().filter( o -> ! induvidualIds.contains(o.getCode())  ).collect(Collectors.toList());
			commercialList.sort(Comparator.comparing( DropDownRes :: getCodeDesc));
			resList.addAll(commercialList);
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return resList;
	}
	
	public synchronized Map<String,String> getListItemLocal(String insuranceId , String branchCode, String itemType, String itemCode) {
		Map<String,String> itemDesc = new HashMap<String,String>() ;
		List<ListItemValue> list = new ArrayList<ListItemValue>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ListItemValue> query=  cb.createQuery(ListItemValue.class);
			// Find All
			Root<ListItemValue> c = query.from(ListItemValue.class);
			
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));
			
			
			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
			Predicate b3 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
			Predicate b4 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2,b3,b4);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
			Predicate b1 = cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
			Predicate b2 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3,a4,b1,b2);
						
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n12 = cb.equal(c.get("status"),"R");
			Predicate n13 = cb.or(n1,n12);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n5 = cb.equal(c.get("companyId"), "99999");
			Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
			Predicate n8 = cb.or(n4,n5);
			Predicate n9 = cb.or(n6,n7);
			Predicate n10 = cb.equal(c.get("itemType"),itemType );
			Predicate n11 = cb.equal(c.get("itemCode"), itemCode);
			
			query.where(n13,n2,n3,n4,n9,n10,n11).orderBy(orderList);
			
		
			// Get Result
			TypedQuery<ListItemValue> result = em.createQuery(query);
			list = result.getResultList();
			
			itemDesc.put("itemDesc",list.size() > 0 ? list.get(0).getItemValue() : "" );
			itemDesc.put("itemDescLocal",list.size() > 0 ? list.get(0).getItemValueLocal() : "" );
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return itemDesc ;
	}
	
	public List<MotorColorMaster> findMotorColorMasters(String companyId, String branchCode, String colorId) {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<MotorColorMaster> cq = cb.createQuery(MotorColorMaster.class);
        Root<MotorColorMaster> root = cq.from(MotorColorMaster.class);

        Predicate companyPredicate = cb.equal(root.get("companyId"), companyId);

        Predicate branchPredicate = cb.or(
            cb.equal(root.get("branchCode"), branchCode),
            cb.equal(root.get("branchCode"), "99999")
        );

        Predicate colorPredicate = cb.or(
            cb.equal(root.get("colorId"), colorId),
            cb.equal(root.get("colorCode"), colorId),
            cb.equal(root.get("colorDesc"), colorId)
        );

        cq.select(root)
          .where(cb.and(companyPredicate, branchPredicate, colorPredicate))
          .orderBy(cb.desc(root.get("amendId")));

        return em.createQuery(cq).getResultList();
    }
	
	public List<ListItemValue> findEwayListItemValues(String companyId, String branchCode, String itemType, String itemCode) {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<ListItemValue> cq = cb.createQuery(ListItemValue.class);
        Root<ListItemValue> root = cq.from(ListItemValue.class);

        Predicate companyPredicate = cb.equal(root.get("companyId"), companyId);

        Predicate branchPredicate = cb.or(
            cb.equal(root.get("branchCode"), branchCode),
            cb.equal(root.get("branchCode"), "99999")
        );

        Predicate itemTypePredicate = cb.equal(root.get("itemType"), itemType);

        Predicate itemPredicate = cb.or(
            cb.equal(root.get("itemCode"), itemCode),
            cb.equal(root.get("itemValue"), itemCode)
        );

        cq.select(root)
          .where(cb.and(companyPredicate, branchPredicate, itemTypePredicate, itemPredicate))
          .orderBy(cb.desc(root.get("amendId")));

        return em.createQuery(cq).getResultList();
    }

}
