/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-09-23 ( Date ISO 2022-09-23 - Time 15:08:00 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.common.controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.maan.eway.common.req.DepreciationReq;
import com.maan.eway.common.req.EserviceMotorDetailsGetReq;
import com.maan.eway.common.req.EserviceMotorDetailsGetallReq;
import com.maan.eway.common.req.EserviceMotorDetailsSaveReq;
import com.maan.eway.common.req.EserviceMotorDetailsSaveRes;
import com.maan.eway.common.req.EserviceMotorUwReq;
import com.maan.eway.common.req.FleetDetailsSaveReq;
import com.maan.eway.common.res.CommonRes;
import com.maan.eway.common.res.EserviceMotorDetailsRes;
import com.maan.eway.common.res.FleetDetailsRes;
import com.maan.eway.common.res.GetAllMotorDetailsRes;
import com.maan.eway.common.res.SuccessRes;
import com.maan.eway.common.res.UwQuestionsRes;
import com.maan.eway.common.service.EserviceMotorDetailsService;
import com.maan.eway.common.service.impl.FetchErrorDescServiceImpl;
import com.maan.eway.error.Error;
import com.maan.eway.res.CommonErrorModuleReq;
import com.maan.eway.service.PrintReqService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;


/**
* <h2>EserviceCustomerDetailsController</h2>
*/
@RestController
@RequestMapping("/api")
@Api(tags = "ESERVICE MOTOR DETAILS", description = "API's")
public class EserviceMotorDetailsController {

	@Autowired
	private  EserviceMotorDetailsService entityService;
	
	
	@Autowired
	private PrintReqService reqPrinter;
	
	@Autowired
	private FetchErrorDescServiceImpl errorDescService ;

/*
	private static final String ENTITY_TITLE = "EserviceCustomerDetails";


 	public EserviceCustomerDetailsController (EserviceCustomerDetailsService entityService) {
		this.entityService = entityService;
	}
*/

	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
	@PostMapping(value="/savemotordetails",produces = "application/json")
//	@PostMapping("/savemotordetails")
	public ResponseEntity<CommonRes> saveMotorDetails(@RequestBody  EserviceMotorDetailsSaveReq req,@RequestHeader("Authorization") String tokens) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		List<String> validationCodes = entityService.validateMotorDetails(req,tokens);
		
		List<Error> validation = null;
		//// validation
		if (validationCodes != null && validationCodes.size() != 0) {
			CommonErrorModuleReq comErrDescReq = new CommonErrorModuleReq();
			
			//CommonErrorModuleReq comErrDescReq = new CommonErrorModuleReq();
			comErrDescReq.setBranchCode(req.getBranchCode());
			comErrDescReq.setInsuranceId(req.getCompanyId());
			comErrDescReq.setProductId("99999");
			comErrDescReq.setModuleId("10");
			comErrDescReq.setModuleName("MOTOR CREATION");
			
			validation = errorDescService.getErrorDesc(validationCodes ,comErrDescReq);

		} 
		
		if (validation != null && validation.size() != 0) {
			data.setCommonResponse(null);
			data.setIsError(true);
			data.setErrorMessage(validation);
			data.setMessage("Failed");
			return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

		} else {
			/////// save
			List<EserviceMotorDetailsSaveRes> res = entityService.saveMotorDetails(req,tokens);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}
    }

	
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
	@PostMapping("/getmotordetails")
	public ResponseEntity<CommonRes> getMotorDetails(@RequestBody  EserviceMotorDetailsGetReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		EserviceMotorDetailsRes res = entityService.getMotorDetails(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}
    
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
	@PostMapping("/deletemotordetails")
	public ResponseEntity<CommonRes> deleteMotorDetails(@RequestBody  EserviceMotorDetailsGetReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		SuccessRes res = entityService.deleteMotorDetails(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
	@PostMapping("/getallmotordetails")
	public ResponseEntity<CommonRes> getallMotorDetails(@RequestBody  EserviceMotorDetailsGetallReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		List<GetAllMotorDetailsRes> res = entityService.getallMotorDetails(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}
	
/*	@PostMapping("/existingquotedetails")
	public ResponseEntity<CommonRes> getallExistingQuoteDetails(@RequestBody  ExistingMotorDetailsReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		List<EserviceCustomerDetailsRes> res = entityService.getallExistingQuoteDetails(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		} 
	
	@PostMapping("/lapsedquotedetails")
	public ResponseEntity<CommonRes> getallLapsedQuoteDetails(@RequestBody  ExistingMotorDetailsReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		List<EserviceCustomerDetailsRes> res = entityService.getallLapsedQuoteDetails(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}
	
	@PostMapping("/rejectedquotedetails")
	public ResponseEntity<CommonRes> getallRejectedQuoteDetails(@RequestBody  ExistingMotorDetailsReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		List<EserviceCustomerDetailsRes> res = entityService.getallRejectedQuoteDetails(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}
	
	@PostMapping("/updatelapsedquote")
	public ResponseEntity<CommonRes> updateLapsedQuote(@RequestBody  UpdateLapsedQuoteReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		SuccessRes res = entityService.updateLapsedQuote(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		} */
	/*
	@PostMapping("/existingmotordetails")
	public ResponseEntity<CommonRes> getallMotorDetails(@RequestBody  ExistingMotorDetailsReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		List<GetAllMotorDetailsRes> res = entityService.getallMotorDetails(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
	} */
    
	@PostMapping("/saveuwquestions")
	public ResponseEntity<CommonRes> uwquestions(@RequestBody  EserviceMotorUwReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		SuccessRes res = entityService.uwquestions(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}
    
	@PostMapping("/getuwquestions")
	public ResponseEntity<CommonRes> getuwquestions(@RequestBody  EserviceMotorUwReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		UwQuestionsRes res = entityService.getuwquestions(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		} 
    
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
	@PostMapping(value="/savefleetdetails",produces = "application/json")
//	@PostMapping("/savemotordetails")
	public ResponseEntity<CommonRes> saveMotorDetails(@RequestBody  FleetDetailsSaveReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		
		List<Error> validation = null;
		if(StringUtils.isBlank(req.getRequestReferenceNo()) ) {
			validation = new ArrayList<Error>();
			validation.add( new Error("01","RequestReferenceNo","Please Enter RequestReferenceNo"));
			
		}
		
		if (validation != null && validation.size() != 0) {
			data.setCommonResponse(null);
			data.setIsError(true);
			data.setErrorMessage(validation);
			data.setMessage("Failed");
			return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

		} else {
			/////// save
			FleetDetailsRes res = entityService.updateFleetDetails(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}
    }
	

	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
	@ApiOperation(value = "calculate depreciation", notes = "Api for calculate depreciation based on purchase date")
	@RequestMapping(value = "/depreciation/cal", method = RequestMethod.POST)
	public CommonRes depreciationCalculation(@RequestBody DepreciationReq req) {

		return entityService.depreciationCalculation(req);

	}

}
