/*
\*  Copyright (c) 2019. All right reserved
* Created on 2022-09-23 ( Date ISO 2022-09-23 - Time 15:08:00 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.common.service.impl;

import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.modelmapper.ModelMapper;
import org.modelmapper.TypeToken;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.BranchMaster;
import com.maan.eway.bean.BrokerCommissionDetails;
import com.maan.eway.bean.CompanyProductMaster;
import com.maan.eway.bean.CurrencyMaster;
import com.maan.eway.bean.EserviceBuildingDetails;
import com.maan.eway.bean.EserviceCommonDetails;
import com.maan.eway.bean.EserviceCustomerDetails;
import com.maan.eway.bean.EserviceDriverDetails;
import com.maan.eway.bean.EserviceMotorDetails;
import com.maan.eway.bean.ExchangeMaster;
import com.maan.eway.bean.InsuranceCompanyMaster;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.bean.LoginMaster;
import com.maan.eway.bean.LoginUserInfo;
import com.maan.eway.bean.MotorBodyTypeMaster;
import com.maan.eway.bean.MotorColorMaster;
import com.maan.eway.bean.MotorDataDetails;
import com.maan.eway.bean.MotorMakeMaster;
import com.maan.eway.bean.MotorMakeModelMaster;
import com.maan.eway.bean.MotorVehicleUsageMaster;
import com.maan.eway.bean.MsPolicyDetails;
import com.maan.eway.bean.PdRefno;
import com.maan.eway.bean.PolicyTypeMaster;
import com.maan.eway.bean.ProductSectionMaster;
import com.maan.eway.bean.StateMaster;
import com.maan.eway.common.req.DepreciationReq;
import com.maan.eway.common.req.DriverDetailsGetReq;
import com.maan.eway.common.req.DriverDetailsRes;
import com.maan.eway.common.req.DriverLicenceReq;
import com.maan.eway.common.req.DriverSaveRes;
import com.maan.eway.common.req.EserviceMotorDetailsGetReq;
import com.maan.eway.common.req.EserviceMotorDetailsGetallReq;
import com.maan.eway.common.req.EserviceMotorDetailsSaveReq;
import com.maan.eway.common.req.EserviceMotorDetailsSaveRes;
import com.maan.eway.common.req.EserviceMotorUwReq;
import com.maan.eway.common.req.ExchangeRateScenarioReq;
import com.maan.eway.common.req.ExistingMotorDetailsReq;
import com.maan.eway.common.req.FleetDetailsSaveReq;
import com.maan.eway.common.req.MotorDriverSaveReq;
import com.maan.eway.common.req.MsPolicySaveReq;
import com.maan.eway.common.req.OtherVehicleInfoGetReq;
import com.maan.eway.common.req.OtherVehicleInfoReq;
import com.maan.eway.common.req.SequenceGenerateReq;
import com.maan.eway.common.req.UpdateLapsedQuoteReq;
import com.maan.eway.common.req.VehicleDetailsReq;
import com.maan.eway.common.res.CommonRes;
import com.maan.eway.common.res.DepreciationRes;
import com.maan.eway.common.res.EserviceCustomerDetailsRes;
import com.maan.eway.common.res.EserviceMotorDetailsRes;
import com.maan.eway.common.res.FleetDetailsRes;
import com.maan.eway.common.res.GetAllMotorDetailsRes;
import com.maan.eway.common.res.GetOtherVehicleInfoRes;
import com.maan.eway.common.res.SuccessRes;
import com.maan.eway.common.res.UwQuestionsRes;
import com.maan.eway.common.service.EserviceMotorDetailsService;
import com.maan.eway.error.Error;
import com.maan.eway.repository.EServiceBuildingDetailsRepository;
import com.maan.eway.repository.EServiceDriverDetailsRepository;
import com.maan.eway.repository.EServiceMotorDetailsRepository;
import com.maan.eway.repository.EserviceCommonDetailsRepository;
import com.maan.eway.repository.EserviceCustomerDetailsRepository;
import com.maan.eway.repository.ListItemValueRepository;
import com.maan.eway.repository.MotorColorMasterRepository;
import com.maan.eway.repository.MotorDataDetailsRepository;
import com.maan.eway.repository.MsPolicyDetailsRepository;
import com.maan.eway.repository.PdRefnoRepository;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Tuple;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.CriteriaUpdate;
import jakarta.persistence.criteria.Expression;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;

@Service
@Transactional
public class EserviceMotorDetailsServiceImpl implements EserviceMotorDetailsService {

	@Autowired
	private EServiceMotorDetailsRepository repo;

	@Autowired
	private EServiceDriverDetailsRepository esDriverRepo;

	@Autowired
	private ListItemValueRepository listRepo;

	@Autowired
	private MotorDataDetailsRepository motordatarepo;

	@Autowired
	private EserviceCustomerDetailsRepository custRepo;

	@Autowired
	private MotorColorMasterRepository color;

	@Autowired
	private MsPolicyDetailsRepository msPolicyRepo;

	@Autowired
	private PdRefnoRepository pdRefNoRepo;

	@PersistenceContext
	private EntityManager em;

	private Logger log = LogManager.getLogger(EserviceMotorDetailsServiceImpl.class);

	Gson json = new Gson();
	SimpleDateFormat sdfFormat = new SimpleDateFormat("ddMMyyyyhhmmss");
	@Autowired
	private GenerateSeqNoServiceImpl genSeqNoService;

	@Autowired
	private EServiceBuildingDetailsRepository eserBuildRepo;

	@Autowired
	private EserviceCommonDetailsRepository eserCommonRepo;

	@Autowired
	private SanlamEserviceMotorDetails sanlamEserviceMotorDetails;
	
	@Autowired
	private BurkinoEserviceMotorDetails burkinoEserviceMotorDetails;
	
	@Autowired
	private AngolaEserviceMotorDetails angolaEserviceMotorDetails;
	
	@Autowired
	private MadisonEserviceMotorDetails madisonEserviceMotorDetails;
	
	@Autowired
	private OromiaEserviceMotorDetails oromiaEserviceMotorDetails;
	
	@Autowired
	private UgandaEserviceMotorDetails ugandaEserviceMotorDetails;
	
	@Autowired
	private KenyaEserviceMotorDetails kenyaEserviceMotorDetails;
	
	@Autowired
	private EagleEserviceMotorDetails eagleEserviceMotorDetails;
	
	@Autowired
	private TanzaniaEserviceMotorDetails tanzaniaEserviceMotorDetails;
	
	@Autowired
	private PhoenixEserviceMotorDetails phoenixEserviceMotorDetails;
	
	@Autowired
	private SanlamMotorDriverDetails sanlamMotDriDet;

	@Autowired
	private BurkinoMotorDriverDetails burkinoMotDriDet;

	@Autowired
	private AngolaMotorDriverDetails angolaMotDriDet;

	@Autowired
	private TanzaniaMotorDriverDetails tanzaniaMotDriDet;

	@Autowired
	private UgandaMotorDriverDetails ugandaMotDriDet;

	@Autowired
	private OromiaMotorDriverDetails oromiaMotDriDet;

	@Autowired
	private MadisonMotorDriverDetails madisonMotDriDet;

	@Autowired
	private KenyaMotorDriverDetails kenyaMotDriDet;

	@Autowired
	private EagleMotorDriverDetails eagleMotDriDet;
	
	@Autowired
	private PhoenixMotorDriverDetails phoenixMotDriDet;
	
	
	 public  static LocalDate convertToLocalDate(Date dateToConvert) {
		 if (dateToConvert == null) {
	            return null;
	        }
	        return dateToConvert.toInstant()
	                            .atZone(ZoneId.systemDefault())
	                            .toLocalDate();
	    }
	@Override
	public List<String> validateMotorDetails(EserviceMotorDetailsSaveReq req, String tokens) {
		List<String> error = new ArrayList<String>();
		
		if("100004".equalsIgnoreCase(req.getCompanyId()))	{
			error=madisonEserviceMotorDetails.validateMotorDetails(req);
		}else if("100018".equalsIgnoreCase(req.getCompanyId()))	{
			error=oromiaEserviceMotorDetails.validateMotorDetails(req);
		}else if("100019".equalsIgnoreCase(req.getCompanyId()))	{
			error=ugandaEserviceMotorDetails.validateMotorDetails(req);
		}else if("100020".equalsIgnoreCase(req.getCompanyId()))	{
			error=kenyaEserviceMotorDetails.validateMotorDetails(req);
		}else if("100027".equalsIgnoreCase(req.getCompanyId()))	{
			error=angolaEserviceMotorDetails.validateMotorDetails(req);
		}else if("100028".equalsIgnoreCase(req.getCompanyId()))	{
			error=eagleEserviceMotorDetails.validateMotorDetails(req);
		}else if("100040".equalsIgnoreCase(req.getCompanyId())){
			error=sanlamEserviceMotorDetails.validateMotorDetails(req);
		}else if("100042".equalsIgnoreCase(req.getCompanyId()))	{
			error=burkinoEserviceMotorDetails.validateMotorDetails(req);
		}else if("100046".equalsIgnoreCase(req.getCompanyId()))	{
			error=phoenixEserviceMotorDetails.validateMotorDetails(req);
		}else {
			error=tanzaniaEserviceMotorDetails.validateMotorDetails(req);
		}
		return error;
	}

	public void validateDriverExperienceWithDateOfBirth(Date driverDob, String driverExperience, List<String> error) {

		try {

			if (null != driverDob && StringUtils.isNotBlank(driverExperience) && driverExperience.matches("[0-9]+")
					&& null != error) {

				LocalDate localDate = LocalDate.now();
				Calendar cal = Calendar.getInstance();
				cal.setTime(driverDob);
				cal.add(cal.YEAR, 18);

				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");

				String driExp = formatter.format(cal.getTime());

				LocalDate localDate2 = LocalDate.parse(driExp);

				Period period = Period.between(localDate2, localDate);

				Integer years = Math.abs(period.getYears());

				Integer exp = Integer.valueOf(driverExperience);
				if (years < exp) {

					error.add("2229");
				}

			}

		} catch (Exception e) {

			log.error(
					"Exception Occurs When validating The Driving Experience Of The Driver (Inside Validate Block ) ### "
							+ e.getMessage());
			e.printStackTrace();
			// throw new DateTimeException("Date Parse Exception");
		}

	}

	public void validatePurchaseDateWithManufactureYear(Date purchaseDate, String year, boolean isCompareDate,
			List<String> error) {

		try {

			if (!isCompareDate) {

				if (null != purchaseDate && StringUtils.isNotBlank(year) && year.matches("[0-9]+") && null != error) {

					Integer manufactureYear = Integer.valueOf(year);

					SimpleDateFormat formatter = new SimpleDateFormat("yyyy");
					String purchaseYear = formatter.format(purchaseDate);

					if (StringUtils.isNotBlank(purchaseYear) && purchaseYear.matches("[0-9]+")) {

						Integer purchaseDateYear = Integer.valueOf(purchaseYear);

						if (purchaseDateYear < manufactureYear) {

							error.add("2228");
						}

					}

				}

			} else {

				try {

					if (null != purchaseDate && StringUtils.isNotBlank(year) && year.matches("[0-9]+")
							&& null != error) {

						Integer manufactureYear = Integer.valueOf(year);

						Calendar cal = Calendar.getInstance();
						cal.set(cal.YEAR, manufactureYear);

						Date manufacture = cal.getTime();

						SimpleDateFormat formatter = new SimpleDateFormat("yyyy");
						String purchaseYear = formatter.format(purchaseDate);

						if (StringUtils.isNotBlank(purchaseYear) && purchaseYear.matches("[0-9]+")) {

							Integer purchaseDateYear = Integer.valueOf(purchaseYear);

							cal.set(cal.YEAR, purchaseDateYear);
							purchaseDate = cal.getTime();

							if (purchaseDate.compareTo(manufacture) < 0) {

								error.add("2228");

							}
						}

					}

				} catch (Exception e) {
					log.error(
							"Exception Ocurs when Validate Purchase Date With Manufacture Year (Inside The Validation Block) ### "
									+ e.getMessage());
					e.printStackTrace();
					// throw

				}
			}

		} catch (Exception e) {

			log.error(
					"Exception Ocurs when Validate Purchase Date With Manufacture Year (Inside The Validation Block) ### "
							+ e.getMessage());
			e.printStackTrace();
			// throw

			validatePurchaseDateWithManufactureYear(purchaseDate, year, true, error);

		}

	}

	private String policyRestriction(String agencyCode, String loginId, String bdmCode, String companyId,
			String productId, String policyType) {
		// TODO Auto-generated method stub
		String a = "";
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();

			List<BrokerCommissionDetails> list = new ArrayList<BrokerCommissionDetails>();

			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<BrokerCommissionDetails> query = cb.createQuery(BrokerCommissionDetails.class);

			// Find All
			Root<BrokerCommissionDetails> b = query.from(BrokerCommissionDetails.class);

			// Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<BrokerCommissionDetails> ocpm1 = amendId.from(BrokerCommissionDetails.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("agencyCode"), b.get("agencyCode"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a4 = cb.equal(ocpm1.get("oaCode"), b.get("oaCode"));
			Predicate a5 = cb.equal(ocpm1.get("loginId"), b.get("loginId"));
			Predicate a6 = cb.equal(ocpm1.get("policyType"), b.get("policyType"));
			// Predicate a7 = cb.equal(ocpm1.get("id"), b.get("id"));
			Predicate a8 = cb.equal(ocpm1.get("status"), b.get("status"));

			amendId.where(a1, a2, a3, a4, a5, a6, a8);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("policyType")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), companyId);
			Predicate n3 = cb.equal(b.get("productId"), productId);
			Predicate n4 = cb.equal(b.get("oaCode"), bdmCode);
			Predicate n5 = cb.equal(b.get("loginId"), loginId);
			Predicate n6 = cb.equal(b.get("policyType"), policyType);
			Predicate n7 = cb.equal(b.get("status"), "Y");
			Predicate n8 = cb.equal(b.get("agencyCode"), agencyCode);
			Predicate n9 = cb.equal(b.get("status"), "R");
			Predicate n10 = cb.or(n7, n9);

			query.where(n1, n2, n3, n4, n5, n6, n10, n8).orderBy(orderList);

			// Get Result
			TypedQuery<BrokerCommissionDetails> result = em.createQuery(query);

			list = result.getResultList();
			List<BrokerCommissionDetails> policy = list.stream()
					.filter(c -> c.getPolicyTypeDesc().equalsIgnoreCase("ALL")).collect(Collectors.toList());
			if (policy.size() > 0 || list.size() > 0) {
				a = "Success";
			}
		} catch (Exception e) {

			log.error(e);
			e.printStackTrace();
		}
		return a;
	}

	public Tuple getMinMaxRate(String Currency, String CompanyId) {
		Tuple currencyRes = null;
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<Tuple> query = cb.createQuery(Tuple.class);
			List<Tuple> list = new ArrayList<Tuple>();

			// Find All
			Root<CurrencyMaster> c = query.from(CurrencyMaster.class);

			Subquery<Long> exchangeRate = query.subquery(Long.class);
			Root<ExchangeMaster> ex = exchangeRate.from(ExchangeMaster.class);
			// Exchange Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate3 = query.subquery(Timestamp.class);
			Root<ExchangeMaster> ocpm3 = effectiveDate3.from(ExchangeMaster.class);
			effectiveDate3.select(cb.greatest(ocpm3.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ex.get("exchangeId"), ocpm3.get("exchangeId"));
			Predicate a2 = cb.equal(ex.get("currencyId"), ocpm3.get("currencyId"));
			Predicate a15 = cb.equal(ex.get("companyId"), ocpm3.get("companyId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm3.get("effectiveDateStart"), today);
			effectiveDate3.where(a1, a2, a3, a15);

			// Exhange Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate4 = query.subquery(Timestamp.class);
			Root<ExchangeMaster> ocpm4 = effectiveDate4.from(ExchangeMaster.class);
			effectiveDate4.select(cb.greatest(ocpm4.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(ex.get("exchangeId"), ocpm4.get("exchangeId"));
			Predicate a5 = cb.equal(ex.get("currencyId"), ocpm4.get("currencyId"));
			Predicate a16 = cb.equal(ex.get("companyId"), ocpm4.get("companyId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm4.get("effectiveDateEnd"), todayEnd);
			effectiveDate4.where(a4, a5, a6, a16);

			// Exhange Rate Sub Query
			exchangeRate.select(ex.get("exchangeRate"));
			Predicate a7 = cb.equal(ex.get("currencyId"), Currency);
			Predicate a9 = cb.equal(ex.get("effectiveDateStart"), effectiveDate3);
			Predicate a10 = cb.equal(ex.get("effectiveDateEnd"), effectiveDate4);
			Predicate a17 = cb.equal(ex.get("companyId"), CompanyId);
			exchangeRate.where(a7, a9, a10, a17);

			// Select
			query.multiselect(c.get("currencyId").alias("currencyId"), c.get("minDiscount").alias("minDiscount"),
					c.get("maxLoading").alias("maxLoading"), exchangeRate.alias("exchangeRate"));

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("currencyName")));

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CurrencyMaster> ocpm1 = effectiveDate.from(CurrencyMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a11 = cb.equal(c.get("currencyId"), ocpm1.get("currencyId"));
			Predicate a12 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a18 = cb.equal(c.get("status"), ocpm1.get("status"));
			Predicate a22 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));

			effectiveDate.where(a11, a12, a18, a22);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CurrencyMaster> ocpm2 = effectiveDate2.from(CurrencyMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a13 = cb.equal(c.get("currencyId"), ocpm2.get("currencyId"));
			Predicate a14 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a19 = cb.equal(c.get("status"), ocpm2.get("status"));
			Predicate a23 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));

			effectiveDate2.where(a13, a14, a19, a23);

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n11 = cb.equal(c.get("status"), "R");
			Predicate n12 = cb.or(n1, n11);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), CompanyId);
			Predicate n5 = cb.equal(c.get("currencyId"), Currency);
//			Predicate n5 = cb.equal(c.get("companyId"),"99999");
//			Predicate n6 = cb.or(n4,n5);
			query.where(n12, n2, n3, n4, n5).orderBy(orderList);

			// Get Result
			TypedQuery<Tuple> result = em.createQuery(query);
			list = result.getResultList();
			if (list.size() > 0) {
				currencyRes = list.get(0);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
		}
		return currencyRes;
	}

	@Override
	@Transactional
	public List<EserviceMotorDetailsSaveRes> saveMotorDetails(EserviceMotorDetailsSaveReq req, String tokens) {
		List<EserviceMotorDetailsSaveRes> res = new ArrayList<EserviceMotorDetailsSaveRes>();
		
		if("100004".equalsIgnoreCase(req.getCompanyId()))	{
			res=madisonEserviceMotorDetails.saveMotorDetails(req);
		}else if("100018".equalsIgnoreCase(req.getCompanyId()))	{
			res=oromiaEserviceMotorDetails.saveMotorDetails(req);
		}else if("100019".equalsIgnoreCase(req.getCompanyId()))	{
			res=ugandaEserviceMotorDetails.saveMotorDetails(req);
		}else if("100020".equalsIgnoreCase(req.getCompanyId()))	{
			res=kenyaEserviceMotorDetails.saveMotorDetails(req);
		}else if("100027".equalsIgnoreCase(req.getCompanyId()))	{
			res=angolaEserviceMotorDetails.saveMotorDetails(req);
		}else if("100028".equalsIgnoreCase(req.getCompanyId()))	{
			res=eagleEserviceMotorDetails.saveMotorDetails(req);
		}else if("100040".equalsIgnoreCase(req.getCompanyId())){
			res=sanlamEserviceMotorDetails.saveMotorDetails(req);
		}else if("100042".equalsIgnoreCase(req.getCompanyId()))	{
			res=burkinoEserviceMotorDetails.saveMotorDetails(req);
		}else if("100046".equalsIgnoreCase(req.getCompanyId()))	{
			res=phoenixEserviceMotorDetails.saveMotorDetails(req);
		}else {
			res=tanzaniaEserviceMotorDetails.saveMotorDetails(req);
		}
		return res;
	}

	public String createCustomerForShortQuote(EserviceMotorDetailsSaveReq req) {
		try {
			List<EserviceCustomerDetails> customers = custRepo
					.findByMobileCode1AndMobileNo1AndCreatedByAndCompanyIdAndProductIdOrderByUpdatedDateDesc(
							req.getMobileCode(), req.getMobileNo(), req.getCreatedBy(), req.getCompanyId(),
							Integer.parseInt(req.getProductId()));
			if (customers == null || customers.isEmpty()) {
				Date entryDate = new Date();
				String createdBy = req.getCreatedBy();
				// Random rand = new Random();
				// int random = rand.nextInt(90) + 10;
				Integer productId = Integer.valueOf(req.getProductId());
				// custRefNo = "Cust-" + generateCustRefNo() ; // idf.format(new Date()) +
				// random ;
				// Generate Seq
				SequenceGenerateReq generateSeqReq = new SequenceGenerateReq();
				generateSeqReq.setInsuranceId(req.getCompanyId());
				generateSeqReq.setProductId(req.getProductId());
				generateSeqReq.setType("1");
				generateSeqReq.setTypeDesc("CUSTOMER_REFERENCE_NO");
				String custRefNo = genSeqNoService.generateSeqCall(generateSeqReq);
				EserviceCustomerDetails saveData = new EserviceCustomerDetails();
				saveData.setProductId(productId);
				saveData.setEntryDate(entryDate);
				saveData.setCreatedBy(createdBy);
				saveData.setUpdatedDate(new Date());
				saveData.setUpdatedBy(req.getCreatedBy());
				saveData.setCustomerReferenceNo(custRefNo);
				saveData.setStatus("P");
				saveData.setLicenseIssuedDate(new Date());
				saveData.setLicenseDuration(20);

				saveData.setWhatsappCode(req.getMobileCode());
				saveData.setMobileCode1(req.getMobileCode());
				saveData.setMobileNo1(req.getMobileNo());
				saveData.setWhatsappNo(req.getMobileNo());
				saveData.setCompanyId(req.getCompanyId());
				saveData.setClientName(req.getCustomerName());
				saveData.setPolicyHolderTypeid("1");
				saveData.setPolicyHolderType("1");
				saveData.setIdType("1");
				saveData.setAge(20);
				saveData.setGender("M");
				saveData.setOccupation("99999");
				saveData.setIsTaxExempted("N");
				saveData.setIdNumber("NA");
				saveData.setBranchCode(req.getBranchCode());
				saveData.setBrokerBranchCode(req.getBrokerBranchCode());
				ListItemValue policyHolderTypeIdL = getListItem(req.getCompanyId(), req.getBranchCode(),
						"POLICY_HOLDER_ID_TYPE", saveData.getPolicyHolderTypeid());// listRepo.findByItemTypeAndItemCode("POLICY_HOLDER_ID_TYPE",
																					// req.getPolicyHolderTypeid());
				String policyHolderTypeId_en = policyHolderTypeIdL.getItemValue();
				String policyHolderTypeId_other = policyHolderTypeIdL.getItemValueLocal();
				saveData.setPolicyHolderTypeIdDesc(policyHolderTypeId_en);
				ListItemValue policyHolderTypeL = getListItem("99999", req.getBranchCode(), "POLICY_HOLDER_TYPE",
						saveData.getPolicyHolderType());// listRepo.findByItemTypeAndItemCode("POLICY_HOLDER_TYPE",
														// req.getPolicyHolderType());
				String policyHolderType_en = policyHolderTypeL.getItemValue();
				String policyHolderType_other = policyHolderTypeL.getItemValueLocal();
				saveData.setPolicyHolderTypeDesc(policyHolderType_en);
				custRepo.save(saveData);
				return custRefNo;

			} else {
				return customers.get(0).getCustomerReferenceNo();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;

	}

	public EserviceDriverDetails eserviceDirDetailsSave(EserviceMotorDetailsSaveReq req, String refNo, Integer vehId) {
		EserviceDriverDetails saveDri = new EserviceDriverDetails();
		DozerBeanMapper mapper = new DozerBeanMapper();
		SimpleDateFormat yf = new SimpleDateFormat("yyyy");
		EserviceDriverDetails findData = null;
		try {
			MotorDriverSaveReq driReq = req.getDriverDetails();
			Date entryDate = null;
			String createdBy = "";
			String cityName = "";
			String subUrban = "";
			EserviceDriverDetails motOld = null;

			List<StateMaster> stateMasterList = getStateMaster(driReq.getCountryId());
			Integer driId = 0;
//		if(StringUtils.isBlank(req.getRequestReferenceNo())) {
//			entryDate = new Date();
//			createdBy = req.getCreatedBy();
//			driId = 0 ;
//		} 
//		else {
			if(StringUtils.isBlank(refNo))
				refNo = req.getRequestReferenceNo();
			else
				req.setRequestReferenceNo(refNo);
			EserviceDriverDetails findoldData = esDriverRepo.findByRequestReferenceNoAndRiskId(
					req.getRequestReferenceNo(), Integer.valueOf(req.getVehicleId()));
			esDriverRepo.deleteByRequestReferenceNoAndRiskId(req.getRequestReferenceNo(), Integer.valueOf(req.getVehicleId()));
			if (findoldData != null) {
				motOld = findoldData;
				findData = new EserviceDriverDetails();
				mapper.map(findoldData, findData);
				//esDriverRepo.save(findoldData);

				entryDate = findData.getEntryDate();
				createdBy = findData.getCreatedBy();
				driId = findData.getDriverId();
			} else {

				entryDate = new Date();
				createdBy = req.getCreatedBy();
				driId = driId + 1;
			}
//		}

			// Save Motor

			saveDri = mapper.map(driReq, EserviceDriverDetails.class);
			saveDri.setRequestReferenceNo(refNo);
			saveDri.setRiskId(vehId);
			saveDri.setCity(driReq.getCityId() == null ? null : driReq.getCityId());
			if (stateMasterList != null && stateMasterList.size() > 0 && StringUtils.isNotBlank(driReq.getStateId())) {

				List<StateMaster> list2 = stateMasterList.stream()
						.filter(o -> o.getStateId().equals(Integer.valueOf(driReq.getStateId()))
								&& o.getCityId().equals(Integer.valueOf(driReq.getCityId())))
						.collect(Collectors.toList());
				cityName = list2.get(0).getCity();
				List<StateMaster> list3 = stateMasterList.stream()
						.filter(o -> o.getStateId().equals(Integer.valueOf(driReq.getStateId()))
								&& o.getCityId().equals(Integer.valueOf(driReq.getCityId()))
								&& o.getSuburbId().equals(Integer.valueOf(driReq.getSuburbId())))
						.collect(Collectors.toList());
				subUrban = list3.get(0).getSuburb();
			}
			saveDri.setCity(cityName);
			saveDri.setSuburb(subUrban);
			saveDri.setCompanyId(driReq.getInsuranceId());
			saveDri.setCreatedBy(driReq.getCreatedBy());
			saveDri.setDriverDob(driReq.getDriverDob());
			saveDri.setDriverId(driId);
			saveDri.setDriverName(driReq.getDriverName());
			saveDri.setLicenseNumber(driReq.getLicenseNo());
			saveDri.setDriverType(driReq.getDriverType());
			List<ListItemValue> DriDesc = getListItemDriver(driReq.getInsuranceId(), "99999", "DRIVER_TYPES",
					driReq.getDriverType());
			saveDri.setDriverTypedesc(DriDesc.size() > 0 ? DriDesc.get(0).getItemValue() : "Driver");
			saveDri.setEntryDate(new Date());
			saveDri.setQuoteNo(driReq.getQuoteNo() == null ? null : driReq.getQuoteNo());
			saveDri.setStatus("Y");
			saveDri.setMaritalStatus(StringUtils.isBlank(driReq.getMaritalStatus()) ? "1" : driReq.getMaritalStatus());
			saveDri.setAreaGroup(driReq.getAreaGroup() == null ? 1 : Integer.valueOf(driReq.getAreaGroup()));
			saveDri.setSuburbId(driReq.getSuburbId() == null ? 1 : Integer.valueOf(driReq.getSuburbId()));
			saveDri.setStateId(StringUtils.isBlank(driReq.getStateId()) ? "1" : driReq.getStateId());
			saveDri.setCityId(driReq.getCityId() == null ? 1 : Integer.valueOf(driReq.getCityId()));
			saveDri.setCountryId(StringUtils.isBlank(driReq.getCountryId()) ? "1" : driReq.getCountryId());
			saveDri.setDriverGender(driReq.getGender() == null ? "M" : driReq.getGender());
			saveDri.setLicenseExperience(
					driReq.getDriverExperience() == null ? 0 : Integer.valueOf(driReq.getDriverExperience()));
//			saveDri.setDrivingLicenseAge(driReq.getDrivingLicensingAge());

			if (driReq.getLicenseIssueDt() != null) {
				saveDri.setLicenseIssueDt(driReq.getLicenseIssueDt());
//			Date licenceIssued = driReq.getLicenseIssueDt();
//			Date today = new Date();
//			int licenseDuration = today.getYear() - licenceIssued.getYear();
//			saveDri.setLicenseDuration(licenseDuration);

//		} else {
//			saveDri.setLicenseIssueDt(new Date());
//			saveDri.setLicenseDuration(20);
//		}

			}
			if (driReq.getDriverDob() != null) {
				saveDri.setDriverDob(driReq.getDriverDob());
				Date dob = driReq.getDriverDob();
				Date today = new Date();
				int age = today.getYear() - dob.getYear();
				saveDri.setDriverAge(age);

			} else {
				saveDri.setDriverDob(null);
				saveDri.setDriverAge(18);
			}

			// Endrosement CHanges
			if (!(driReq.getEndorsementType() == null || driReq.getEndorsementType() == 0))

			{

				saveDri.setOriginalPolicyNo(driReq.getOriginalPolicyNo());
				saveDri.setEndorsementDate(driReq.getEndorsementDate());
				saveDri.setEndorsementRemarks(driReq.getEndorsementRemarks());
				saveDri.setEndorsementEffdate(driReq.getEndorsementEffdate());
				saveDri.setEndtPrevPolicyNo(driReq.getEndtPrevPolicyNo());
				saveDri.setEndtPrevQuoteNo(driReq.getEndtPrevQuoteNo());
				saveDri.setEndtCount(driReq.getEndtCount());
				saveDri.setEndtStatus(driReq.getEndtStatus());
				saveDri.setIsFinyn((driReq.getIsFinaceYn()));
				saveDri.setEndtCategDesc(driReq.getEndtCategDesc());
				saveDri.setEndorsementType(driReq.getEndorsementType());
				saveDri.setEndorsementTypeDesc(driReq.getEndorsementTypeDesc());
			}
			saveDri.setDdRefno(0l);
			saveDri.setProductId(Integer.valueOf(req.getProductId()));
			saveDri.setCompanyId(req.getCompanyId());
			// esDriverRepo.save(saveDri);

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return saveDri;
	}

	public List<StateMaster> getStateMaster(String countryId) {
		List<StateMaster> list = new ArrayList<StateMaster>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<StateMaster> query = cb.createQuery(StateMaster.class);

			// Find All
			Root<StateMaster> c = query.from(StateMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("stateName")));

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<StateMaster> ocpm1 = effectiveDate.from(StateMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("stateId"), ocpm1.get("stateId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("countryId"), ocpm1.get("countryId"));
			Predicate a7 = cb.equal(c.get("regionCode"), ocpm1.get("regionCode"));
			Predicate a9 = cb.equal(c.get("stateShortCode"), ocpm1.get("stateShortCode"));
			Predicate a11 = cb.equal(c.get("cityId"), ocpm1.get("cityId"));
			Predicate a13 = cb.equal(c.get("suburbId"), ocpm1.get("suburbId"));
			effectiveDate.where(a1, a2, a3, a7, a9, a11, a13);

			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<StateMaster> ocpm2 = effectiveDate2.from(StateMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a5 = cb.equal(c.get("stateId"), ocpm2.get("stateId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a4 = cb.equal(c.get("countryId"), ocpm2.get("countryId"));
			Predicate a8 = cb.equal(c.get("regionCode"), ocpm2.get("regionCode"));
			Predicate a10 = cb.equal(c.get("stateShortCode"), ocpm2.get("stateShortCode"));
			Predicate a12 = cb.equal(c.get("cityId"), ocpm2.get("cityId"));
			Predicate a14 = cb.equal(c.get("suburbId"), ocpm2.get("suburbId"));
			effectiveDate2.where(a5, a6, a4, a8, a10, a12, a14);

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n11 = cb.equal(c.get("status"), "R");
			Predicate n12 = cb.or(n1, n11);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("countryId"), countryId);

			query.where(n12, n2, n3, n4).orderBy(orderList);

			// Get Result
			TypedQuery<StateMaster> result = em.createQuery(query);
			list = result.getResultList();

			Map<Integer, List<StateMaster>> groupByStates = list.stream()
					.collect(Collectors.groupingBy(StateMaster::getStateId));

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return list;
	}

	public String getMotorMakeId(String insuranceId, String branchCode, String makeDesc) {
		String makeId = "";
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
//		cal.set(Calendar.HOUR_OF_DAY, 1);;
//		cal.set(Calendar.MINUTE, 1);
//		today = cal.getTime();
//		cal.set(Calendar.HOUR_OF_DAY, 23);
//		cal.set(Calendar.MINUTE, 59);
//		Date todayEnd = cal.getTime();
			today = cal.getTime();
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<MotorMakeMaster> query = cb.createQuery(MotorMakeMaster.class);
			List<MotorMakeMaster> list = new ArrayList<MotorMakeMaster>();
			// Find All
			Root<MotorMakeMaster> c = query.from(MotorMakeMaster.class);
			// Select
			query.select(c);

			// Make EffectiveDate condition
			// Effective Date Start Max Filter

			Subquery<Timestamp> effectiveDate3 = query.subquery(Timestamp.class);
			Root<MotorMakeMaster> ocpm3 = effectiveDate3.from(MotorMakeMaster.class);
			effectiveDate3.select(cb.greatest(ocpm3.get("effectiveDateStart")));
			Predicate a13 = cb.equal(c.get("makeId"), ocpm3.get("makeId"));
			Predicate a14 = cb.lessThanOrEqualTo(ocpm3.get("effectiveDateStart"), today);
			Predicate a15 = cb.equal(c.get("companyId"), ocpm3.get("companyId"));
			Predicate a16 = cb.equal(c.get("branchCode"), ocpm3.get("branchCode"));
			effectiveDate3.where(a13, a14, a15, a16);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate4 = query.subquery(Timestamp.class);
			Root<MotorMakeMaster> ocpm4 = effectiveDate4.from(MotorMakeMaster.class);
			effectiveDate4.select(cb.greatest(ocpm4.get("effectiveDateEnd")));
			Predicate a17 = cb.equal(c.get("makeId"), ocpm4.get("makeId"));
			Predicate a18 = cb.greaterThanOrEqualTo(ocpm4.get("effectiveDateEnd"), todayEnd);
			Predicate a19 = cb.equal(c.get("companyId"), ocpm4.get("companyId"));
			Predicate a20 = cb.equal(c.get("branchCode"), ocpm4.get("branchCode"));
			effectiveDate4.where(a17, a18, a19, a20);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("makeNameEn")));

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n8 = cb.equal(c.get("status"), "R");
			Predicate n9 = cb.or(n1, n8);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate3);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate4);
			Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n5 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n6 = cb.equal(c.get("branchCode"), "99999");
			Predicate n7 = cb.or(n5, n6);
			Predicate n11 = cb.equal(c.get("makeNameEn"), makeDesc);

			query.where(n9, n2, n3, n4, n7, n11).orderBy(orderList);

			// Get Result
			TypedQuery<MotorMakeMaster> result = em.createQuery(query);
			list = result.getResultList();
			makeId = list.size() > 0 ? list.get(0).getMakeId().toString() : "";
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return makeId;
	}

	public String getMotorMakeDesc(String insuranceId, String branchCode, String makeId) {
		String makeDesc = "";
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
//		cal.set(Calendar.HOUR_OF_DAY, 1);;
//		cal.set(Calendar.MINUTE, 1);
//		today = cal.getTime();
//		cal.set(Calendar.HOUR_OF_DAY, 23);
//		cal.set(Calendar.MINUTE, 59);
//		Date todayEnd = cal.getTime();
			today = cal.getTime();
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<MotorMakeMaster> query = cb.createQuery(MotorMakeMaster.class);
			List<MotorMakeMaster> list = new ArrayList<MotorMakeMaster>();
			// Find All
			Root<MotorMakeMaster> c = query.from(MotorMakeMaster.class);
			// Select
			query.select(c);

			// Make EffectiveDate condition
			// Effective Date Start Max Filter

			Subquery<Timestamp> effectiveDate3 = query.subquery(Timestamp.class);
			Root<MotorMakeMaster> ocpm3 = effectiveDate3.from(MotorMakeMaster.class);
			effectiveDate3.select(cb.greatest(ocpm3.get("effectiveDateStart")));
			Predicate a13 = cb.equal(c.get("makeId"), ocpm3.get("makeId"));
			Predicate a14 = cb.lessThanOrEqualTo(ocpm3.get("effectiveDateStart"), today);
			Predicate a15 = cb.equal(c.get("companyId"), ocpm3.get("companyId"));
			Predicate a16 = cb.equal(c.get("branchCode"), ocpm3.get("branchCode"));
			effectiveDate3.where(a13, a14, a15, a16);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate4 = query.subquery(Timestamp.class);
			Root<MotorMakeMaster> ocpm4 = effectiveDate4.from(MotorMakeMaster.class);
			effectiveDate4.select(cb.greatest(ocpm4.get("effectiveDateEnd")));
			Predicate a17 = cb.equal(c.get("makeId"), ocpm4.get("makeId"));
			Predicate a18 = cb.greaterThanOrEqualTo(ocpm4.get("effectiveDateEnd"), todayEnd);
			Predicate a19 = cb.equal(c.get("companyId"), ocpm4.get("companyId"));
			Predicate a20 = cb.equal(c.get("branchCode"), ocpm4.get("branchCode"));
			effectiveDate4.where(a17, a18, a19, a20);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("makeNameEn")));

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n8 = cb.equal(c.get("status"), "R");
			Predicate n9 = cb.or(n1, n8);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate3);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate4);
			Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n5 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n6 = cb.equal(c.get("branchCode"), "99999");
			Predicate n7 = cb.or(n5, n6);
			Predicate n11 = cb.equal(c.get("makeId"), makeId);

			query.where(n9, n2, n3, n4, n7, n11).orderBy(orderList);

			// Get Result
			TypedQuery<MotorMakeMaster> result = em.createQuery(query);
			list = result.getResultList();
			makeDesc = list.size() > 0 ? list.get(0).getMakeNameEn().toString() : "";
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return makeId;
	}

	public List<InsuranceCompanyMaster> getInscompanyMasterDetails(String companyId) {
		List<InsuranceCompanyMaster> list = new ArrayList<InsuranceCompanyMaster>();

		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<InsuranceCompanyMaster> query = cb.createQuery(InsuranceCompanyMaster.class);

			// Find All
			Root<InsuranceCompanyMaster> c = query.from(InsuranceCompanyMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("effectiveDateStart")));

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<InsuranceCompanyMaster> ocpm1 = effectiveDate.from(InsuranceCompanyMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2);

			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<InsuranceCompanyMaster> ocpm2 = effectiveDate2.from(InsuranceCompanyMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3, a4);

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n11 = cb.equal(c.get("status"), "R");
			Predicate n12 = cb.or(n1, n11);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n4 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n13 = cb.equal(c.get("companyId"), companyId);
			query.where(n12, n2, n4, n13).orderBy(orderList);

			// Get Result
			TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);
			list = result.getResultList();

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return list;
	}

	public BranchMaster getBranchMasterRes(String companyId, String branchCode) {
		BranchMaster branchRes = new BranchMaster();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<BranchMaster> query = cb.createQuery(BranchMaster.class);
			List<BranchMaster> list = new ArrayList<BranchMaster>();

			// Find All
			Root<BranchMaster> c = query.from(BranchMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchName")));

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<BranchMaster> ocpm1 = effectiveDate.from(BranchMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2, a3);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<BranchMaster> ocpm2 = effectiveDate2.from(BranchMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			Predicate a5 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a4, a5, a6);

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), companyId);
			Predicate n5 = cb.equal(c.get("branchCode"), branchCode);

			query.where(n1, n2, n3, n4, n5).orderBy(orderList);

			// Get Result
			TypedQuery<BranchMaster> result = em.createQuery(query);
			list = result.getResultList();
			branchRes = list.get(0);

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return branchRes;
	}

	public EserviceMotorDetails exchangeRateScenario(EserviceMotorDetailsSaveReq req, EserviceMotorDetails findData,
			DecimalFormat df) {
		EserviceMotorDetails savedata = findData;
		try {
			// new
			String newCurrency = req.getCurrency();
			BigDecimal newExchangeRate = StringUtils.isBlank(req.getExchangeRate()) ? BigDecimal.ZERO
					: new BigDecimal(req.getExchangeRate());
			BigDecimal newSumInsured = StringUtils.isBlank(req.getSumInsured()) ? BigDecimal.ZERO
					: new BigDecimal(req.getSumInsured());
			BigDecimal newAccSumInsured = StringUtils.isBlank(req.getAcccessoriesSumInsured()) ? BigDecimal.ZERO
					: new BigDecimal(req.getAcccessoriesSumInsured());
			BigDecimal newTppdInsured = StringUtils.isBlank(req.getTppdIncreaeLimit()) ? BigDecimal.ZERO
					: new BigDecimal(req.getTppdIncreaeLimit());
			BigDecimal newWindSumInsured = StringUtils.isBlank(req.getWindScreenSumInsured()) ? BigDecimal.ZERO
					: new BigDecimal(req.getWindScreenSumInsured());

			// Old
			ExchangeRateScenarioReq exScenario = req.getScenarios().getExchangeRateScenario();
			String oldCurrency = exScenario.getCurrency();
			BigDecimal oldExchangeRate = StringUtils.isBlank(exScenario.getExchangeRate()) ? BigDecimal.ZERO
					: new BigDecimal(exScenario.getExchangeRate());
			BigDecimal oldSumInsured = StringUtils.isBlank(exScenario.getSumInsured()) ? BigDecimal.ZERO
					: new BigDecimal(exScenario.getSumInsured());
			BigDecimal oldAccSumInsured = StringUtils.isBlank(exScenario.getAcccessoriesSumInsured()) ? BigDecimal.ZERO
					: new BigDecimal(exScenario.getAcccessoriesSumInsured());
			BigDecimal oldTppdInsured = StringUtils.isBlank(exScenario.getTppdIncreaeLimit()) ? BigDecimal.ZERO
					: new BigDecimal(exScenario.getTppdIncreaeLimit());
			BigDecimal oldWindSumInsured = StringUtils.isBlank(exScenario.getWindScreenSumInsured()) ? BigDecimal.ZERO
					: new BigDecimal(exScenario.getWindScreenSumInsured());

			if (!newCurrency.equalsIgnoreCase(oldCurrency)) {
				String calcType = newExchangeRate.compareTo(BigDecimal.ONE) == 0 ? "multiply" : "divide";
				BigDecimal exchange = "multiply".equalsIgnoreCase(calcType) ? oldExchangeRate : newExchangeRate;
				// Suminsured
				if (newSumInsured.equals(oldSumInsured))
					savedata.setSumInsured(exchangeFcCalc(exchange, oldSumInsured, calcType, df));
				else
					savedata.setSumInsured(StringUtils.isBlank(req.getSumInsured()) ? null
							: new BigDecimal(df.format(new BigDecimal(req.getSumInsured()))));

				// Accessoried SumInsured
				if (newAccSumInsured.equals(oldAccSumInsured))
					savedata.setAcccessoriesSumInsured(exchangeFcCalc(exchange, oldAccSumInsured, calcType, df));
				else
					savedata.setAcccessoriesSumInsured(StringUtils.isBlank(req.getAcccessoriesSumInsured()) ? null
							: new BigDecimal(df.format(new BigDecimal(req.getAcccessoriesSumInsured()))));

				// WindScreen Suminsured
				if (newWindSumInsured.equals(oldWindSumInsured))
					savedata.setWindScreenSumInsured(exchangeFcCalc(exchange, oldWindSumInsured, calcType, df));
				else
					savedata.setWindScreenSumInsured(StringUtils.isBlank(req.getWindScreenSumInsured()) ? null
							: new BigDecimal(df.format(new BigDecimal(req.getWindScreenSumInsured()))));

				// Tppd Increase Suminsured
				if (newTppdInsured.equals(oldTppdInsured))
					savedata.setTppdIncreaeLimit(exchangeFcCalc(exchange, oldTppdInsured, calcType, df));
				else
					savedata.setTppdIncreaeLimit(StringUtils.isBlank(req.getTppdIncreaeLimit()) ? null
							: new BigDecimal(df.format(new BigDecimal(req.getTppdIncreaeLimit()))));

				// Tppd Free Limit
				savedata.setTppdFreeLimit(null);

			} else {
				savedata.setSumInsured(StringUtils.isBlank(req.getSumInsured()) ? null
						: new BigDecimal(df.format(new BigDecimal(req.getSumInsured()))));
				savedata.setAcccessoriesSumInsured(StringUtils.isBlank(req.getAcccessoriesSumInsured()) ? null
						: new BigDecimal(df.format(new BigDecimal(req.getAcccessoriesSumInsured()))));
				savedata.setWindScreenSumInsured(StringUtils.isBlank(req.getWindScreenSumInsured()) ? null
						: new BigDecimal(df.format(new BigDecimal(req.getWindScreenSumInsured()))));
				savedata.setTppdIncreaeLimit(StringUtils.isBlank(req.getTppdIncreaeLimit()) ? null
						: new BigDecimal(df.format(new BigDecimal(req.getTppdIncreaeLimit()))));
				savedata.setTppdFreeLimit(null);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return savedata;
	}

	public BigDecimal exchangeRateScenario2(BigDecimal oldSi, BigDecimal newSi, BigDecimal oldExRate,
			BigDecimal newExRate, String oldCurr, String newCurr, DecimalFormat df) {
		BigDecimal suminsured = BigDecimal.ZERO;
		try {
			// Change Of Currency
			if (!oldCurr.equalsIgnoreCase(newCurr) && (oldSi != null && newSi != null && oldSi.compareTo(newSi) == 0)) {
				String calcType = newExRate.compareTo(BigDecimal.ONE) == 0 ? "multiply" : "divide";
				BigDecimal exchange = "multiply".equalsIgnoreCase(calcType) ? oldExRate : newExRate;
				// Suminsured
				suminsured = exchangeFcCalc(exchange, oldSi, calcType, df);

			} else {
				suminsured = newSi;
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return suminsured;
	}

	public BigDecimal exchangeFcCalc(BigDecimal exchangeRate, BigDecimal oldSuminsured, String calcType,
			DecimalFormat df) {
		BigDecimal sumInsured = null;
		try {
			if ("divide".equalsIgnoreCase(calcType)) {
				sumInsured = new BigDecimal(Math
						.round(Double.valueOf(oldSuminsured.divide(exchangeRate, RoundingMode.UP).toPlainString())));

			} else if ("multiply".equalsIgnoreCase(calcType)) {
				sumInsured = new BigDecimal(
						Math.round(Double.valueOf(oldSuminsured.multiply(exchangeRate).toPlainString())));
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return sumInsured;
	}

	public List<MotorBodyTypeMaster> getInduvidualBodyTypeMasterDropdown(String insuranceId, String branchCode,
			String bodyId) {
		List<MotorBodyTypeMaster> list = new ArrayList<MotorBodyTypeMaster>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<MotorBodyTypeMaster> query = cb.createQuery(MotorBodyTypeMaster.class);

			// Find All
			Root<MotorBodyTypeMaster> c = query.from(MotorBodyTypeMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<MotorBodyTypeMaster> ocpm1 = effectiveDate.from(MotorBodyTypeMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("bodyId"), ocpm1.get("bodyId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a4 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
			Predicate a5 = cb.equal(c.get("sectionId"), ocpm1.get("sectionId"));
			effectiveDate.where(a1, a2, a3, a4, a5);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<MotorBodyTypeMaster> ocpm2 = effectiveDate2.from(MotorBodyTypeMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a6 = cb.equal(c.get("bodyId"), ocpm2.get("bodyId"));
			Predicate a7 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a8 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a9 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			Predicate a10 = cb.equal(c.get("sectionId"), ocpm2.get("sectionId"));

			effectiveDate2.where(a6, a7, a8, a9, a10);
			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n5 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n6 = cb.equal(c.get("branchCode"), "99999");
			Predicate n7 = cb.or(n5, n6);
			Predicate n8 = cb.equal(c.get("bodyId"), bodyId);
			query.where(n1, n2, n3, n4, n7, n8).orderBy(orderList);
			// Get Result
			TypedQuery<MotorBodyTypeMaster> result = em.createQuery(query);
			list = result.getResultList();

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return list;
	}

	public List<MotorBodyTypeMaster> getInduvidualBodyTypeMasterDropdown1(String insuranceId, String branchCode,
			String bodyDesc) {
		List<MotorBodyTypeMaster> list = new ArrayList<MotorBodyTypeMaster>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<MotorBodyTypeMaster> query = cb.createQuery(MotorBodyTypeMaster.class);

			// Find All
			Root<MotorBodyTypeMaster> c = query.from(MotorBodyTypeMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<MotorBodyTypeMaster> ocpm1 = effectiveDate.from(MotorBodyTypeMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("bodyId"), ocpm1.get("bodyId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a4 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
			Predicate a5 = cb.equal(c.get("sectionId"), ocpm1.get("sectionId"));
			effectiveDate.where(a1, a2, a3, a4, a5);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<MotorBodyTypeMaster> ocpm2 = effectiveDate2.from(MotorBodyTypeMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a6 = cb.equal(c.get("bodyId"), ocpm2.get("bodyId"));
			Predicate a7 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a8 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a9 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			Predicate a10 = cb.equal(c.get("sectionId"), ocpm2.get("sectionId"));

			effectiveDate2.where(a6, a7, a8, a9, a10);
			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n5 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n6 = cb.equal(c.get("branchCode"), "99999");
			Predicate n7 = cb.or(n5, n6);
			Predicate n8 = cb.equal(c.get("bodyNameEn"), bodyDesc);
			query.where(n1, n2, n3, n4, n7, n8).orderBy(orderList);
			// Get Result
			TypedQuery<MotorBodyTypeMaster> result = em.createQuery(query);
			list = result.getResultList();

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return list;
	}

	public List<BrokerCommissionDetails> getPolicyName(String companyId, String productId, String loginId,
			String agencyCode, String policyType, String userType) {
		// TODO Auto-generated method stub
		List<BrokerCommissionDetails> list = new ArrayList<BrokerCommissionDetails>();
		try {
			Date today = new Date();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<BrokerCommissionDetails> query = cb.createQuery(BrokerCommissionDetails.class);

			// Find All
			Root<BrokerCommissionDetails> b = query.from(BrokerCommissionDetails.class);

			// Select
			query.select(b);

			// Effective Date Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<BrokerCommissionDetails> ocpm1 = amendId.from(BrokerCommissionDetails.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("id"), b.get("id"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a4 = cb.equal(ocpm1.get("policyType"), b.get("policyType"));
			Predicate a5 = cb.equal(ocpm1.get("loginId"), b.get("loginId"));
			if ("Broker".equalsIgnoreCase(userType) || "Issuer".equalsIgnoreCase(userType)) {
				Predicate a6 = cb.equal(ocpm1.get("agencyCode"), b.get("agencyCode"));
				amendId.where(a1, a2, a3, a4, a5, a6);
			} else if ("User".equalsIgnoreCase(userType)) {
				amendId.where(a1, a2, a3, a4, a5);
			}

			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("policyType"), policyType);
			Predicate n3 = cb.equal(b.get("companyId"), companyId);
			Predicate n4 = cb.equal(b.get("productId"), productId);
			Predicate n5 = cb.equal(b.get("loginId"), loginId);
			if ("Broker".equalsIgnoreCase(userType) || "Issuer".equalsIgnoreCase(userType)) {
				Predicate n6 = cb.equal(b.get("agencyCode"), agencyCode);
				query.where(n1, n2, n3, n4, n5, n6);
			} else if ("User".equalsIgnoreCase(userType)) {
				query.where(n1, n2, n3, n4, n5);
			}

			// Get Result
			TypedQuery<BrokerCommissionDetails> result = em.createQuery(query);
			list = result.getResultList();

		} catch (Exception e) {
			e.printStackTrace();

		}
		return list;
	}

	public BranchMaster getCompanyBranch(String insuranceId, String branchCode) {
		BranchMaster branchData = new BranchMaster();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		SimpleDateFormat idf = new SimpleDateFormat("yyMMddhhssmmss");
		try {
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(new Date());
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Login Data
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<BranchMaster> query = cb.createQuery(BranchMaster.class);
			List<BranchMaster> branchlist = new ArrayList<BranchMaster>();

			// Find All
			Root<BranchMaster> c = query.from(BranchMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(c.get("branchCode")));

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<BranchMaster> ocpm1 = effectiveDate.from(BranchMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			effectiveDate.where(a1, a2, a3);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<BranchMaster> ocpm2 = effectiveDate2.from(BranchMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			Predicate a5 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a6 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			effectiveDate2.where(a4, a5, a6);

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n5 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
			query.where(n1, n2, n3, n5, n6).orderBy(orderList);

			// Get Result
			TypedQuery<BranchMaster> result = em.createQuery(query);
			branchlist = result.getResultList();

			branchData = branchlist.get(0);

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return branchData;
	}

	public Integer currencyDecimalFormat(String insuranceId, String currencyId) {
		Integer decimalFormat = 0;
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CurrencyMaster> query = cb.createQuery(CurrencyMaster.class);
			List<CurrencyMaster> list = new ArrayList<CurrencyMaster>();

			// Find All
			Root<CurrencyMaster> c = query.from(CurrencyMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("currencyName")));

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CurrencyMaster> ocpm1 = effectiveDate.from(CurrencyMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a11 = cb.equal(c.get("currencyId"), ocpm1.get("currencyId"));
			Predicate a12 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a18 = cb.equal(c.get("status"), ocpm1.get("status"));
			Predicate a22 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));

			effectiveDate.where(a11, a12, a18, a22);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CurrencyMaster> ocpm2 = effectiveDate2.from(CurrencyMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a13 = cb.equal(c.get("currencyId"), ocpm2.get("currencyId"));
			Predicate a14 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a19 = cb.equal(c.get("status"), ocpm2.get("status"));
			Predicate a23 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));

			effectiveDate2.where(a13, a14, a19, a23);

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
//		Predicate n5 = cb.equal(c.get("companyId"),"99999");
//		Predicate n6 = cb.or(n4,n5);
			Predicate n7 = cb.equal(c.get("currencyId"), currencyId);
			query.where(n1, n2, n3, n4, n7).orderBy(orderList);

			// Get Result
			TypedQuery<CurrencyMaster> result = em.createQuery(query);
			list = result.getResultList();

			decimalFormat = list.size() > 0
					? (list.get(0).getDecimalDigit() == null ? 0 : list.get(0).getDecimalDigit())
					: 0;

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return decimalFormat;
	}

	public String getInscompanyMasterDropdown(String companyId) {
		String companyName = "";
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<InsuranceCompanyMaster> query = cb.createQuery(InsuranceCompanyMaster.class);
			List<InsuranceCompanyMaster> list = new ArrayList<InsuranceCompanyMaster>();

			// Find All
			Root<InsuranceCompanyMaster> c = query.from(InsuranceCompanyMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("companyName")));

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<InsuranceCompanyMaster> ocpm1 = effectiveDate.from(InsuranceCompanyMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2);

			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<InsuranceCompanyMaster> ocpm2 = effectiveDate2.from(InsuranceCompanyMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3, a4);

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), companyId);

			query.where(n1, n2, n3, n4).orderBy(orderList);

			// Get Result
			TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);
			list = result.getResultList();
			companyName = list.size() > 0 ? list.get(0).getCompanyName() : "";

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return companyName;
	}

	public CompanyProductMaster getCompanyProductMasterDropdown(String companyId, String productId) {
		String productName = "";
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProductMaster> query = cb.createQuery(CompanyProductMaster.class);
			List<CompanyProductMaster> list = new ArrayList<CompanyProductMaster>();
			// Find All
			Root<CompanyProductMaster> c = query.from(CompanyProductMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("productName")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CompanyProductMaster> ocpm1 = effectiveDate.from(CompanyProductMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("productId"), ocpm1.get("productId"));
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2, a3);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CompanyProductMaster> ocpm2 = effectiveDate2.from(CompanyProductMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("productId"), ocpm2.get("productId"));
			Predicate a5 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a4, a5, a6);

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), companyId);
			Predicate n5 = cb.equal(c.get("productId"), productId);
			query.where(n1, n2, n3, n4, n5).orderBy(orderList);
			// Get Result
			TypedQuery<CompanyProductMaster> result = em.createQuery(query);
			list = result.getResultList();
			// productName = list.size()> 0 ? list.get(0).getProductName() : "";
			return list.get(0);
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		// return productName;
	}

	public ProductSectionMaster getProductSectionDropdown(String companyId, String productId, String sectionId) {
		ProductSectionMaster section = new ProductSectionMaster();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSectionMaster> query = cb.createQuery(ProductSectionMaster.class);
			List<ProductSectionMaster> list = new ArrayList<ProductSectionMaster>();

			// Find All
			Root<ProductSectionMaster> c = query.from(ProductSectionMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("sectionName")));

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ProductSectionMaster> ocpm1 = effectiveDate.from(ProductSectionMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("sectionId"), ocpm1.get("sectionId"));
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a3 = cb.equal(c.get("productId"), ocpm1.get("productId"));
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2, a3, a4);

			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ProductSectionMaster> ocpm2 = effectiveDate2.from(ProductSectionMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a5 = cb.equal(c.get("sectionId"), ocpm2.get("sectionId"));
			Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("productId"), ocpm2.get("productId"));

			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a5, a6, a7, a8);

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), companyId);
			Predicate n5 = cb.equal(c.get("productId"), productId);
			Predicate n6 = cb.equal(c.get("sectionId"), sectionId);
			query.where(n1, n2, n3, n4, n5, n6).orderBy(orderList);

			// Get Result
			TypedQuery<ProductSectionMaster> result = em.createQuery(query);
			list = result.getResultList();
			section = list.size() > 0 ? list.get(0) : null;
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return section;
	}

	public String getInsuranceType(String companyId, String productId, String sectionId) {
		String sectionName = "";
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSectionMaster> query = cb.createQuery(ProductSectionMaster.class);
			List<ProductSectionMaster> list = new ArrayList<ProductSectionMaster>();

			// Find All
			Root<ProductSectionMaster> c = query.from(ProductSectionMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("sectionName")));

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ProductSectionMaster> ocpm1 = effectiveDate.from(ProductSectionMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("sectionId"), ocpm1.get("sectionId"));
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a3 = cb.equal(c.get("productId"), ocpm1.get("productId"));
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2, a3, a4);

			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ProductSectionMaster> ocpm2 = effectiveDate2.from(ProductSectionMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a5 = cb.equal(c.get("sectionId"), ocpm2.get("sectionId"));
			Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("productId"), ocpm2.get("productId"));

			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a5, a6, a7, a8);

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), companyId);
			Predicate n5 = cb.equal(c.get("productId"), productId);
			Predicate n6 = cb.equal(c.get("sectionId"), sectionId);
			query.where(n1, n2, n3, n4, n5, n6).orderBy(orderList);

			// Get Result
			TypedQuery<ProductSectionMaster> result = em.createQuery(query);
			list = result.getResultList();

			sectionName = list.size() > 0 ? list.get(0).getSectionName() : "";
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return sectionName;
	}

	public synchronized ListItemValue getListItem(String insuranceId, String branchCode, String itemType,
			String itemCode) {
		String itemDesc = "";
		List<ListItemValue> list = new ArrayList<ListItemValue>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ListItemValue> query = cb.createQuery(ListItemValue.class);
			// Find All
			Root<ListItemValue> c = query.from(ListItemValue.class);

			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("itemId"), ocpm1.get("itemId"));
			Predicate b3 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
			Predicate b4 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2, b3, b4);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("itemId"), ocpm2.get("itemId"));
			Predicate b1 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			Predicate b2 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3, a4, b1, b2);

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n12 = cb.equal(c.get("status"), "R");
			Predicate n13 = cb.or(n1, n12);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n5 = cb.equal(c.get("companyId"), "99999");
			Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
			Predicate n8 = cb.or(n4, n5);
			Predicate n9 = cb.or(n6, n7);
			Predicate n10 = cb.equal(c.get("itemType"), itemType);
			Predicate n11 = cb.equal(c.get("itemCode"), itemCode);

			if (itemType.equalsIgnoreCase("PRODUCT_SHORT_CODE") || itemType.equalsIgnoreCase("PRODUCT_CATEGORY")) // not
																													// company
																													// based
				query.where(n13, n2, n3, n8, n9, n10, n11).orderBy(orderList);
			else
				query.where(n13, n2, n3, n4, n9, n10, n11).orderBy(orderList);

			// Get Result
			TypedQuery<ListItemValue> result = em.createQuery(query);
			list = result.getResultList();

			// itemDesc = list.size() > 0 ? list.get(0).getItemValue() : "" ;

			if (list != null && list.size() > 0) {
				return list.get(0);
			} else {
				return new ListItemValue();
			}

			// return new ListItemValue();
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		// return itemDesc ;
	}

	public synchronized LoginMaster getPremiaBroker(String customerCode, String subUserType, String insuranceId) {
		LoginMaster lg = new LoginMaster();
		try {

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<LoginMaster> query = cb.createQuery(LoginMaster.class);
			// Find All
			Root<LoginMaster> l = query.from(LoginMaster.class);
			Root<LoginUserInfo> lu = query.from(LoginUserInfo.class);

			// Select
			query.select(l);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(l.get("entryDate")));

			// Where
			// Predicate n1 = cb.equal(l.get("status"),"Y");
			Predicate n2 = cb.equal(l.get("companyId"), insuranceId);
			Predicate n3 = cb.equal(l.get("userType"), "Broker");
			Predicate n4 = cb.equal(l.get("userType"), "User");
			Predicate n5 = cb.or(n3, n4);
			Predicate n6 = cb.equal(lu.get("customerCode"), customerCode);
			Predicate n7 = cb.equal(l.get("loginId"), lu.get("loginId"));
			Predicate n8 = cb.equal(cb.lower(l.get("subUserType")), subUserType.toLowerCase());
			query.where(n2, n5, n6, n7, n8).orderBy(orderList);

			// Get Result
			TypedQuery<LoginMaster> result = em.createQuery(query);
			List<LoginMaster> list = result.getResultList();

			lg = list.size() > 0 ? list.get(0) : null;
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return lg;
	}

	public synchronized String getListItemvalue(String insuranceId, String branchCode, String itemType,
			String itemValue) {

		String itemDesc = "";
		List<ListItemValue> list = new ArrayList<ListItemValue>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ListItemValue> query = cb.createQuery(ListItemValue.class);
			// Find All
			Root<ListItemValue> c = query.from(ListItemValue.class);

			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("itemId"), ocpm1.get("itemId"));
			Predicate b3 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
			Predicate b4 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2, b3, b4);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("itemId"), ocpm2.get("itemId"));
			Predicate b1 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			Predicate b2 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3, a4, b1, b2);

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n12 = cb.equal(c.get("status"), "R");
			Predicate n13 = cb.or(n1, n12);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
			Predicate n9 = cb.or(n6, n7);
			Predicate n10 = cb.equal(c.get("itemType"), itemType);
			Predicate n11 = cb.equal(c.get("itemCode"), itemValue);
			query.where(n13, n2, n3, n4, n9, n10, n11).orderBy(orderList);

			// Get Result
			TypedQuery<ListItemValue> result = em.createQuery(query);
			list = result.getResultList();

			itemDesc = list.size() > 0 ? list.get(0).getItemCode() : "";
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return itemDesc;
	}

	public synchronized String getListItemCode(String insuranceId, String branchCode, String itemType,
			String itemValue) {

		String itemDesc = "";
		List<ListItemValue> list = new ArrayList<ListItemValue>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ListItemValue> query = cb.createQuery(ListItemValue.class);
			// Find All
			Root<ListItemValue> c = query.from(ListItemValue.class);

			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("itemId"), ocpm1.get("itemId"));
			Predicate b3 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
			Predicate b4 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2, b3, b4);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("itemId"), ocpm2.get("itemId"));
			Predicate b1 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			Predicate b2 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3, a4, b1, b2);

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n12 = cb.equal(c.get("status"), "R");
			Predicate n13 = cb.or(n1, n12);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
			Predicate n9 = cb.or(n6, n7);
			Predicate n10 = cb.equal(c.get("itemType"), itemType);
			Predicate n11 = cb.equal(c.get("itemValue"), itemValue);
			query.where(n13, n2, n3, n4, n9, n10, n11).orderBy(orderList);

			// Get Result
			TypedQuery<ListItemValue> result = em.createQuery(query);
			list = result.getResultList();

			itemDesc = list.size() > 0 ? list.get(0).getItemCode() : "";
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return itemDesc;
	}

	public List<MotorMakeModelMaster> getModelId(String insuranceId, String branchCode, String makeId, String bodyId,
			String modelNameEn) {
		List<MotorMakeModelMaster> list = new ArrayList<MotorMakeModelMaster>();

		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<MotorMakeModelMaster> query = cb.createQuery(MotorMakeModelMaster.class);
			// Find All
			Root<MotorMakeModelMaster> c = query.from(MotorMakeModelMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("modelNameEn")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<MotorMakeModelMaster> ocpm1 = effectiveDate.from(MotorMakeModelMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("modelId"), ocpm1.get("modelId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("makeId"), ocpm1.get("makeId"));
			Predicate a11 = cb.equal(c.get("bodyId"), ocpm1.get("bodyId"));
			Predicate a7 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a8 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
			effectiveDate.where(a1, a2, a3, a7, a8, a11);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<MotorMakeModelMaster> ocpm2 = effectiveDate2.from(MotorMakeModelMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("modelId"), ocpm2.get("modelId"));
			Predicate a5 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a6 = cb.equal(c.get("makeId"), ocpm2.get("makeId"));
			Predicate a9 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a10 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			Predicate a12 = cb.equal(c.get("bodyId"), ocpm2.get("bodyId"));
			effectiveDate2.where(a4, a5, a6, a9, a10, a12);
			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n9 = cb.equal(c.get("status"), "R");
			Predicate n10 = cb.or(n1, n9);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n5 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n6 = cb.equal(c.get("branchCode"), "99999");
			Predicate n7 = cb.or(n5, n6);
			Predicate n8 = cb.equal(c.get("makeId"), makeId);
			Predicate n14 = cb.equal(c.get("makeId"), "99999");
			Predicate n15 = cb.or(n8, n14);
//		Predicate n11 = cb.equal(c.get("bodyId"),bodyId );
//		Predicate n12 = cb.equal(c.get("bodyId"),"99999");
//		Predicate n13 = cb.or(n11,n12);
			Predicate n16 = cb.equal(c.get("modelNameEn"), modelNameEn);
//		query.where(n10,n2,n3,n4,n7,n13,n15,n16).orderBy(orderList);
			query.where(n10, n2, n3, n4, n7, n15, n16).orderBy(orderList);

			// Get Result
			TypedQuery<MotorMakeModelMaster> result = em.createQuery(query);
			list = result.getResultList();
			// modelId = list.size() > 0 ? list.get(0).getModelId().toString() : "";
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return list;
	}

	public List<MotorMakeModelMaster> getModelDesc(String insuranceId, String branchCode, String makeId,
			String modelId) {
		List<MotorMakeModelMaster> list = new ArrayList<MotorMakeModelMaster>();

		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<MotorMakeModelMaster> query = cb.createQuery(MotorMakeModelMaster.class);
			// Find All
			Root<MotorMakeModelMaster> c = query.from(MotorMakeModelMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("modelNameEn")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<MotorMakeModelMaster> ocpm1 = effectiveDate.from(MotorMakeModelMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("modelId"), ocpm1.get("modelId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("makeId"), ocpm1.get("makeId"));
			Predicate a11 = cb.equal(c.get("bodyId"), ocpm1.get("bodyId"));
			Predicate a7 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a8 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
			effectiveDate.where(a1, a2, a3, a7, a8, a11);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<MotorMakeModelMaster> ocpm2 = effectiveDate2.from(MotorMakeModelMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("modelId"), ocpm2.get("modelId"));
			Predicate a5 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a6 = cb.equal(c.get("makeId"), ocpm2.get("makeId"));
			Predicate a9 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a10 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			Predicate a12 = cb.equal(c.get("bodyId"), ocpm2.get("bodyId"));
			effectiveDate2.where(a4, a5, a6, a9, a10, a12);
			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n9 = cb.equal(c.get("status"), "R");
			Predicate n10 = cb.or(n1, n9);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n5 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n6 = cb.equal(c.get("branchCode"), "99999");
			Predicate n7 = cb.or(n5, n6);
			Predicate n8 = cb.equal(c.get("makeId"), makeId);
			Predicate n14 = cb.equal(c.get("makeId"), "99999");
			Predicate n15 = cb.or(n8, n14);
//		Predicate n11 = cb.equal(c.get("bodyId"),bodyId );
//		Predicate n12 = cb.equal(c.get("bodyId"),"99999");
//		Predicate n13 = cb.or(n11,n12);
			Predicate n16 = cb.equal(c.get("modelId"), modelId);
//		query.where(n10,n2,n3,n4,n7,n13,n15,n16).orderBy(orderList);
			query.where(n10, n2, n3, n4, n7, n15, n16).orderBy(orderList);

			// Get Result
			TypedQuery<MotorMakeModelMaster> result = em.createQuery(query);
			list = result.getResultList();
			// modelId = list.size() > 0 ? list.get(0).getModelId().toString() : "";
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return list;
	}

	public MotorBodyTypeMaster getBodyTypeName(String insuranceId, String branchCode, String bodyId) {
		String bodyTypeName = "";
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<MotorBodyTypeMaster> query = cb.createQuery(MotorBodyTypeMaster.class);
			List<MotorBodyTypeMaster> list = new ArrayList<MotorBodyTypeMaster>();
			// Find All
			Root<MotorBodyTypeMaster> c = query.from(MotorBodyTypeMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("bodyNameEn")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<MotorBodyTypeMaster> ocpm1 = effectiveDate.from(MotorBodyTypeMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("bodyId"), ocpm1.get("bodyId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a4 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));

			effectiveDate.where(a1, a2, a3, a4);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<MotorBodyTypeMaster> ocpm2 = effectiveDate2.from(MotorBodyTypeMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a5 = cb.equal(c.get("bodyId"), ocpm2.get("bodyId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));

			effectiveDate2.where(a5, a6, a7, a8);
			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("bodyId"), bodyId);
			Predicate n5 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
			Predicate n8 = cb.or(n6, n7);
			query.where(n1, n2, n3, n4, n5, n8).orderBy(orderList);
			// Get Result
			TypedQuery<MotorBodyTypeMaster> result = em.createQuery(query);
			list = result.getResultList();
			// odyTypeName = list.size() > 0 ? : "" ;
			return list.get(0);
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		// return bodyTypeName;
	}

	public MotorVehicleUsageMaster getMotorUsageName(String insuranceId, String branchCode, String sectionId,
			String usageId) {
		String usageDesc = "";
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<MotorVehicleUsageMaster> query = cb.createQuery(MotorVehicleUsageMaster.class);
			// Find All
			Root<MotorVehicleUsageMaster> c = query.from(MotorVehicleUsageMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<MotorVehicleUsageMaster> ocpm1 = effectiveDate.from(MotorVehicleUsageMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("vehicleUsageId"), ocpm1.get("vehicleUsageId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a4 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
			Predicate a10 = cb.equal(c.get("sectionId"), ocpm1.get("sectionId"));

			effectiveDate.where(a1, a2, a3, a4, a10);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<MotorVehicleUsageMaster> ocpm2 = effectiveDate2.from(MotorVehicleUsageMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a5 = cb.equal(c.get("vehicleUsageId"), ocpm2.get("vehicleUsageId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			Predicate a9 = cb.equal(c.get("sectionId"), ocpm2.get("sectionId"));
			effectiveDate2.where(a5, a6, a7, a8, a9);
			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("vehicleUsageId"), usageId);
			Predicate n5 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
			Predicate n8 = cb.or(n6, n7);

			List<MotorVehicleUsageMaster> list = new ArrayList<MotorVehicleUsageMaster>();
			if (StringUtils.isNotBlank(sectionId) && !"0".equals(sectionId)) {
				Predicate n9 = cb.equal(c.get("sectionId"), sectionId);
				query.where(n1, n2, n3, n4, n5, n8, n9).orderBy(orderList);
			} else {
				query.where(n1, n2, n3, n4, n5, n8).orderBy(orderList);
			}

			// Get Result
			TypedQuery<MotorVehicleUsageMaster> result = em.createQuery(query);
			list = result.getResultList();
			if (list.size() <= 0) {
				Predicate n9 = cb.equal(c.get("sectionId"), "99999");
				query.where(n1, n2, n3, n4, n5, n8, n9).orderBy(orderList);
				result = em.createQuery(query);
				list = result.getResultList();
			}

			// usageDesc = list.size() > 0 ? .getVehicleUsageDesc() : "" ;
			if(!list.isEmpty()) {
			return list.get(0);
			}
			else {
				return null;
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		// return usageDesc;
	}

	public String getPolicyTypeName(String policyTypeId, String InsuranceId, String productId) {
		String policyTypeName = "";
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<PolicyTypeMaster> query = cb.createQuery(PolicyTypeMaster.class);
			List<PolicyTypeMaster> list = new ArrayList<PolicyTypeMaster>();
			// Find All
			Root<PolicyTypeMaster> c = query.from(PolicyTypeMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("policyTypeId")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<PolicyTypeMaster> ocpm1 = effectiveDate.from(PolicyTypeMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("policyTypeId"), ocpm1.get("policyTypeId"));
			Predicate a5 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a6 = cb.equal(c.get("productId"), ocpm1.get("productId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2, a5, a6);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<PolicyTypeMaster> ocpm2 = effectiveDate2.from(PolicyTypeMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("policyTypeId"), ocpm2.get("policyTypeId"));
			Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("productId"), ocpm2.get("productId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3, a4, a7, a8);
			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("policyTypeId"), policyTypeId);
			Predicate n5 = cb.equal(c.get("companyId"), InsuranceId);
			Predicate n6 = cb.equal(c.get("productId"), productId);
			query.where(n1, n2, n3, n4, n5, n6).orderBy(orderList);
			// Get Result
			TypedQuery<PolicyTypeMaster> result = em.createQuery(query);
			list = result.getResultList();
			policyTypeName = list.size() > 0 ? list.get(0).getPolicyTypeName() : "";
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return policyTypeName;
	}

	@Override
	public EserviceMotorDetailsRes getMotorDetails(EserviceMotorDetailsGetReq req) {
		EserviceMotorDetailsRes res = new EserviceMotorDetailsRes();
		if("100004".equalsIgnoreCase(req.getCompanyId()))	{
			res=madisonEserviceMotorDetails.getMotorDetails(req);
		}else if("100018".equalsIgnoreCase(req.getCompanyId()))	{
			res=oromiaEserviceMotorDetails.getMotorDetails(req);
		}else if("100019".equalsIgnoreCase(req.getCompanyId()))	{
			res=ugandaEserviceMotorDetails.getMotorDetails(req);
		}else if("100020".equalsIgnoreCase(req.getCompanyId()))	{
			res=kenyaEserviceMotorDetails.getMotorDetails(req);
		}else if("100027".equalsIgnoreCase(req.getCompanyId()))	{
			res=angolaEserviceMotorDetails.getMotorDetails(req);
		}else if("100028".equalsIgnoreCase(req.getCompanyId()))	{
			res=eagleEserviceMotorDetails.getMotorDetails(req);
		}else if("100040".equalsIgnoreCase(req.getCompanyId())){
			res=sanlamEserviceMotorDetails.getMotorDetails(req);
		}else if("100042".equalsIgnoreCase(req.getCompanyId()))	{
			res=burkinoEserviceMotorDetails.getMotorDetails(req);
		}else if("100046".equalsIgnoreCase(req.getCompanyId()))	{
			res=phoenixEserviceMotorDetails.getMotorDetails(req);
		}else {
			res=tanzaniaEserviceMotorDetails.getMotorDetails(req);
		}
		return res;
	}

	public MotorBodyTypeMaster getBodyTypeId(String insuranceId, String branchCode, String body) {
		String bodyTypeId = "";
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<MotorBodyTypeMaster> query = cb.createQuery(MotorBodyTypeMaster.class);
			List<MotorBodyTypeMaster> list = new ArrayList<MotorBodyTypeMaster>();
			// Find All
			Root<MotorBodyTypeMaster> c = query.from(MotorBodyTypeMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("bodyNameEn")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<MotorBodyTypeMaster> ocpm1 = effectiveDate.from(MotorBodyTypeMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("bodyId"), ocpm1.get("bodyId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a4 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));

			effectiveDate.where(a1, a2, a3, a4);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<MotorBodyTypeMaster> ocpm2 = effectiveDate2.from(MotorBodyTypeMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a5 = cb.equal(c.get("bodyId"), ocpm2.get("bodyId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));

			effectiveDate2.where(a5, a6, a7, a8);
			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("bodyNameEn"), body);
			Predicate n5 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
			Predicate n8 = cb.or(n6, n7);
			query.where(n1, n2, n3, n4, n5, n8).orderBy(orderList);
			// Get Result
			TypedQuery<MotorBodyTypeMaster> result = em.createQuery(query);
			list = result.getResultList();
			// bodyTypeId = list.size() > 0 ? list.get(0).getBodyId().toString(): "" ;
			return list.get(0);
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		// return bodyTypeId;
	}

	public MotorVehicleUsageMaster getMotorUsageId(String insuranceId, String branchCode, String sectionId,
			String usageName) {
		String usageId = "";
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<MotorVehicleUsageMaster> query = cb.createQuery(MotorVehicleUsageMaster.class);
			// Find All
			Root<MotorVehicleUsageMaster> c = query.from(MotorVehicleUsageMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<MotorVehicleUsageMaster> ocpm1 = effectiveDate.from(MotorVehicleUsageMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("vehicleUsageId"), ocpm1.get("vehicleUsageId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a4 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
			Predicate a10 = cb.equal(c.get("sectionId"), ocpm1.get("sectionId"));

			effectiveDate.where(a1, a2, a3, a4, a10);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<MotorVehicleUsageMaster> ocpm2 = effectiveDate2.from(MotorVehicleUsageMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a5 = cb.equal(c.get("vehicleUsageId"), ocpm2.get("vehicleUsageId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			Predicate a9 = cb.equal(c.get("sectionId"), ocpm2.get("sectionId"));
			effectiveDate2.where(a5, a6, a7, a8, a9);
			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(cb.lower(c.get("vehicleUsageDesc")), usageName.toLowerCase());
			Predicate n5 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
			Predicate n8 = cb.or(n6, n7);

			List<MotorVehicleUsageMaster> list = new ArrayList<MotorVehicleUsageMaster>();
			if (StringUtils.isNotBlank(sectionId)) {
				Predicate n9 = cb.equal(c.get("sectionId"), sectionId);
				query.where(n1, n2, n3, n4, n5, n8, n9).orderBy(orderList);
			} else {
				query.where(n1, n2, n3, n4, n5, n8).orderBy(orderList);
			}

			// Get Result
			TypedQuery<MotorVehicleUsageMaster> result = em.createQuery(query);
			list = result.getResultList();
			if (list.size() <= 0) {
				Predicate n9 = cb.equal(c.get("sectionId"), "99999");
				query.where(n1, n2, n3, n4, n5, n8, n9).orderBy(orderList);
				result = em.createQuery(query);
				list = result.getResultList();
			}

			// usageId = list.size() > 0 ? .getVehicleUsageId().toString(): "" ;
			
			return !list.isEmpty() ? list.get(0): null;
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		// return usageId;
	}

	@Override
	public List<GetAllMotorDetailsRes> getallMotorDetails(EserviceMotorDetailsGetallReq req) {
		List<GetAllMotorDetailsRes> reslist = new ArrayList<GetAllMotorDetailsRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			List<EserviceMotorDetails> datas = repo
					.findByRequestReferenceNoOrderByRiskIdAsc(req.getRequestReferenceNo());
			for (EserviceMotorDetails data : datas) {
				GetAllMotorDetailsRes res = new GetAllMotorDetailsRes();
				res = mapper.map(data, GetAllMotorDetailsRes.class);
				res.setVehicleId(data.getRiskId());
				res.setQuoteNo(data.getQuoteNo() != null ? data.getQuoteNo() : "");
				res.setCustomerId(data.getCustomerId() != null ? data.getCustomerId() : "");
				res.setPolicyTypeDesc(data.getPolicyTypeDesc());
				res.setReferalRemarks(data.getReferalRemarks());
				res.setActualPremiumLc(
						data.getActualPremiumLc() == null ? "" : data.getActualPremiumLc().toPlainString());
				res.setActualPremiumFc(
						data.getActualPremiumFc() == null ? "" : data.getActualPremiumFc().toPlainString());
				res.setOverallPremiumFc(
						data.getOverallPremiumFc() == null ? "" : data.getOverallPremiumFc().toPlainString());
				res.setOverallPremiumLc(
						data.getOverallPremiumLc() == null ? "" : data.getOverallPremiumLc().toPlainString());
				res.setCarAlarmYn(StringUtils.isNotBlank(data.getCarAlarmYn()) ? data.getCarAlarmYn() : "N");
				res.setClaimType(data.getNcdYears() != null ? data.getNcdYears().toString() : "");
				res.setExcess(StringUtils.isBlank(data.getExcess()) ? null : data.getExcess());
				res.setExcessDesc(StringUtils.isBlank(data.getExcessDesc()) ? null : data.getExcessDesc());
				
				res.setNewValue(data.getNewValue());
				res.setMarketValue(data.getMarketValue());
				res.setAggregatedValue(data.getAggregatedValue());
				res.setMunicipalityTraffic(data.getMunicipalityTraffic());
				res.setTransportHydro(data.getTransportHydro());
				res.setNoOfCards(data.getNoOfCards());
				res.setDisplacementInCM3(data.getDisplacementInCM3());
				res.setNoOfCylinders(data.getNoOfCylinders());
				res.setVehicleTypeDescLocal(data.getVehicleTypeDescLocal());
				res.setVehicleMakeDescLocal(data.getVehicleMakeDescLocal());	
				System.out.println("Plate Type "+data.getPlateType());
				res.setPlateType(StringUtils.isBlank(data.getPlateType())?"":data.getPlateType());		
				res.setZone(data.getZone()!=null?data.getZone().toString():"");
				
				try {

					if (null != data) {

						String colorId = null != data.getColor() && !data.getColor().isEmpty() ? data.getColor() : null; // check
																															// with
																															// color
																															// desc

						if (null != colorId) {

							Integer colorIdValue = !colorId.isEmpty() && colorId.matches("[0-9.]+")
									? Integer.valueOf(colorId)
									: 0;

							res.setColorId(colorIdValue);

							String companyId = data.getCompanyId() != null && !data.getCompanyId().isEmpty()
									? data.getCompanyId()
									: "0";
							Date date = new Date();

							MotorColorMaster color = null;

							List<MotorColorMaster> colorLists = this.color
									.findTop1AmentIdByColorIdAndCompanyIdOrderByAmendIdDesc(colorIdValue, companyId);

							if (null != colorLists && !colorLists.isEmpty()) {

								color = colorLists.get(0);
							} else {

								List<MotorColorMaster> colorList = this.color
										.findByColorIdAndCompanyIdAndStatus(colorIdValue, companyId, "Y");

								if (null != colorList && !colorList.isEmpty()) {

									color = colorList.get(0);

								}
							}

							if (null != color) {

								String colorDesc = null != color.getColorDesc() ? color.getColorDesc() : "";

								res.setColorDesc(colorDesc);

							}
						}

					}

				} catch (Exception e) {

					log.error(
							"Exception Occurs When Fetching The Color Based On Color Id  **********" + e.getMessage());
					e.printStackTrace();
					// throw new IllegalStateException("Check Master Table Of Color");

				}

				reslist.add(res);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return reslist;
	}

	@Override
	public SuccessRes uwquestions(EserviceMotorUwReq req) {
		SuccessRes res = new SuccessRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		EserviceMotorDetails savedata = new EserviceMotorDetails();
		try {
			List<EserviceMotorDetails> data = repo.findByRequestReferenceNoAndIdNumberAndRiskId(
					req.getRequestReferenceNo(), req.getIdNumber(), Integer.valueOf(req.getVehicleId()));
			savedata = mapper.map(data.get(0), EserviceMotorDetails.class);
			savedata.setDrivenByUnderAge(req.getDrivenByUnderAge());
			savedata.setDefectiveVisionOrHearing(req.getDefectiveVisionOrHearing());
			savedata.setMotoringOffence(req.getMotoringOffence());
			savedata.setSuspensionOfLicense(req.getSuspensionOfLicense());
			savedata.setSpecialTermsOfPremium(req.getSpecialTermsOfPremium());
			savedata.setIrrespectiveOfBlame(req.getIrrespectiveOfBlame());
			repo.save(savedata);
			res.setSuccessId(req.getRequestReferenceNo());
			res.setResponse("Updated Successful");
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public UwQuestionsRes getuwquestions(EserviceMotorUwReq req) {
		UwQuestionsRes res = new UwQuestionsRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			List<EserviceMotorDetails> data = repo.findByRequestReferenceNoAndIdNumberAndRiskId(
					req.getRequestReferenceNo(), req.getIdNumber(), Integer.valueOf(req.getVehicleId()));
			res = mapper.map(data.get(0), UwQuestionsRes.class);
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public List<EserviceCustomerDetailsRes> getallMotorDetails(ExistingMotorDetailsReq req) {
		List<EserviceCustomerDetailsRes> custRes = new ArrayList<EserviceCustomerDetailsRes>();
		ModelMapper mapper = new ModelMapper();
		mapper.getConfiguration().setAmbiguityIgnored(true);
		try {
			int limit = StringUtils.isBlank(req.getLimit()) ? 0 : Integer.valueOf(req.getLimit());
			int offset = StringUtils.isBlank(req.getOffset()) ? 100 : Integer.valueOf(req.getOffset());

			// Find Motor Details
			List<Tuple> motorIds = new ArrayList<Tuple>();

			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<Tuple> query = cb.createQuery(Tuple.class);

			// Find All
			Root<EserviceMotorDetails> b = query.from(EserviceMotorDetails.class);

			// Select
			query.multiselect(b.get("requestReferenceNo").alias("requestReferenceNo")).distinct(true);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("updatedDate")));

			// Where
			Predicate n1 = cb.equal(b.get("companyId"), req.getInsuranceId());
			Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
			Predicate n4 = cb.equal(b.get("createdBy"), req.getCreatedBy());
			Predicate n5 = cb.equal(b.get("status"), "Y");
			query.where(n1, n2, n3, n4, n5).orderBy(orderList);

			// Get Result
			TypedQuery<Tuple> result = em.createQuery(query);
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			motorIds = result.getResultList();

			List<String> custRefNos = new ArrayList<String>();
			List<String> reqRefNos = new ArrayList<String>();
			for (Tuple ids : motorIds) {
				String custRefNo = ids.get("customerReferenceNo").toString();
				custRefNos.add(custRefNo);
				String reqRefNo = ids.get("requestReferenceNo").toString();
				reqRefNos.add(reqRefNo);
			}

			List<EserviceCustomerDetails> custList = custRepo
					.findByCustomerReferenceNoInOrderByUpdatedDateDesc(custRefNos);
			List<EserviceMotorDetails> motorList = repo.findByRequestReferenceNoInOrderByUpdatedDateDesc(reqRefNos);

			Map<String, List<EserviceMotorDetails>> groupByVehicle = motorList.stream()
					.collect(Collectors.groupingBy(EserviceMotorDetails::getRequestReferenceNo));

			for (String data : groupByVehicle.keySet()) {
				EserviceCustomerDetailsRes res = new EserviceCustomerDetailsRes();
				List<GetAllMotorDetailsRes> motorRes = new ArrayList<GetAllMotorDetailsRes>();

				List<EserviceMotorDetails> getDatas = groupByVehicle.get(data);
				getDatas.sort(Comparator.comparing(EserviceMotorDetails::getRiskId));
				List<EserviceCustomerDetails> filterCustomerData = custList.stream().filter(
						o -> o.getCustomerReferenceNo().equalsIgnoreCase(getDatas.get(0).getCustomerReferenceNo()))
						.collect(Collectors.toList());
				res = mapper.map(filterCustomerData.get(0), EserviceCustomerDetailsRes.class);
				res.setRequestReferenceNo(getDatas.get(0).getRequestReferenceNo());
				Type listType = new TypeToken<List<GetAllMotorDetailsRes>>() {
				}.getType();
				motorRes = mapper.map(getDatas, listType);
				// res.setListOfEserviceMotorDetails(motorRes);
				custRes.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return custRes;
	}

	@Override
	public List<EserviceCustomerDetailsRes> getallExistingQuoteDetails(ExistingMotorDetailsReq req) {
		List<EserviceCustomerDetailsRes> custRes = new ArrayList<EserviceCustomerDetailsRes>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			cal.add(Calendar.DAY_OF_MONTH, -30);
			Date before30 = cal.getTime();

			int limit = StringUtils.isBlank(req.getLimit()) ? 0 : Integer.valueOf(req.getLimit());
			int offset = StringUtils.isBlank(req.getOffset()) ? 100 : Integer.valueOf(req.getOffset());

			// Find Quote Customer Details
			List<CriteriaCustomerRes> customerDetails = getallQuoteCustomerDetails(req, "Y", before30, today, limit,
					offset);

			for (CriteriaCustomerRes data : customerDetails) {
				EserviceCustomerDetailsRes res = new EserviceCustomerDetailsRes();
				res = dozerMapper.map(data, EserviceCustomerDetailsRes.class);
				custRes.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return custRes;
	}

	@Override
	public List<EserviceCustomerDetailsRes> getallRejectedQuoteDetails(ExistingMotorDetailsReq req) {
		List<EserviceCustomerDetailsRes> custRes = new ArrayList<EserviceCustomerDetailsRes>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			cal.add(Calendar.DAY_OF_MONTH, -30);
			Date before30 = cal.getTime();

			int limit = StringUtils.isBlank(req.getLimit()) ? 0 : Integer.valueOf(req.getLimit());
			int offset = StringUtils.isBlank(req.getOffset()) ? 100 : Integer.valueOf(req.getOffset());

			// Find Quote Customer Details
			List<CriteriaCustomerRes> customerDetails = getallQuoteCustomerDetails(req, "R", before30, today, limit,
					offset);

			for (CriteriaCustomerRes data : customerDetails) {
				EserviceCustomerDetailsRes res = new EserviceCustomerDetailsRes();
				res = dozerMapper.map(data, EserviceCustomerDetailsRes.class);
				custRes.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return custRes;
	}

	@Override
	public List<EserviceCustomerDetailsRes> getallLapsedQuoteDetails(ExistingMotorDetailsReq req) {
		List<EserviceCustomerDetailsRes> custRes = new ArrayList<EserviceCustomerDetailsRes>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			cal.add(Calendar.DAY_OF_MONTH, -30);
			Date before30 = cal.getTime();

			int limit = StringUtils.isBlank(req.getLimit()) ? 0 : Integer.valueOf(req.getLimit());
			int offset = StringUtils.isBlank(req.getOffset()) ? 100 : Integer.valueOf(req.getOffset());

			// Find Quote Customer Details
			List<CriteriaCustomerRes> customerDetails = getallLapsedQuoteCustomerDetails(req, "Y", before30, limit,
					offset);

			for (CriteriaCustomerRes data : customerDetails) {
				EserviceCustomerDetailsRes res = new EserviceCustomerDetailsRes();
				res = dozerMapper.map(data, EserviceCustomerDetailsRes.class);
				custRes.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return custRes;
	}

	public List<CriteriaCustomerRes> getallQuoteCustomerDetails(ExistingMotorDetailsReq req, String status,
			Date startDate, Date endDate, Integer limit, Integer offset) {
		List<CriteriaCustomerRes> customerDetails = new ArrayList<CriteriaCustomerRes>();
		try {
			// Get Request Ref No
			List<String> reqRefNos = new ArrayList<String>();
			{
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<String> query = cb.createQuery(String.class);
				Root<EserviceCustomerDetails> c = query.from(EserviceCustomerDetails.class);
				Root<EserviceMotorDetails> m = query.from(EserviceMotorDetails.class);

				query.select(m.get("requestReferenceNo")).distinct(true);

				// Order By
				List<Order> orderList = new ArrayList<Order>();
				orderList.add(cb.desc(m.get("updatedDate")));

				// Where
				Predicate n1 = cb.equal(c.get("customerReferenceNo"), m.get("customerReferenceNo"));
				Predicate n2 = cb.equal(m.get("branchCode"), req.getBranchCode());
				Predicate n3 = cb.equal(m.get("companyId"), req.getInsuranceId());
				Predicate n4 = cb.equal(m.get("productId"), req.getProductId());
				Predicate n5 = cb.equal(m.get("createdBy"), req.getCreatedBy());
				Predicate n6 = cb.equal(m.get("status"), status);
				Predicate n7 = cb.lessThanOrEqualTo(m.get("updatedDate"), endDate);
				Predicate n8 = cb.greaterThanOrEqualTo(m.get("updatedDate"), startDate);
				query.where(n1, n2, n3, n4, n5, n6, n7, n8).orderBy(orderList);

				// Get Result
				TypedQuery<String> result = em.createQuery(query);
				result.setFirstResult(limit * offset);
				result.setMaxResults(offset);
				reqRefNos = result.getResultList();

			}

			// Get Datas
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CriteriaCustomerRes> query = cb.createQuery(CriteriaCustomerRes.class);

			// Find All
			Root<EserviceCustomerDetails> c = query.from(EserviceCustomerDetails.class);
			Root<EserviceMotorDetails> m = query.from(EserviceMotorDetails.class);

			// Select
			query.multiselect(
					// Customer Info
					c.get("customerReferenceNo").alias("customerReferenceNo"),
					c.get("policyHolderTypeid").alias("policyHolderTypeid"), c.get("idType").alias("idType"),
					c.get("idNumber").alias("idNumber"), c.get("age").alias("age"),
					c.get("clientName").alias("clientName"), c.get("titleDesc").alias("titleDesc"),
					c.get("policyHolderType").alias("policyHolderType"), c.get("idTypeDesc").alias("idTypeDesc"),
					c.get("dobOrRegDate").alias("dobOrRegDate"), c.get("genderDesc").alias("genderDesc"),
					c.get("occupationDesc").alias("occupationDesc"),
					c.get("businessTypeDesc").alias("businessTypeDesc"), c.get("telephoneNo1").alias("telephoneNo1"),
					c.get("telephoneNo2").alias("telephoneNo2"), c.get("telephoneNo3").alias("telephoneNo3"),
					c.get("mobileNo1").alias("mobileNo1"), c.get("mobileNo2").alias("mobileNo2"),
					c.get("mobileNo3").alias("mobileNo3"), c.get("email1").alias("email1"),
					c.get("email2").alias("email2"), c.get("email3").alias("email3"),

					c.get("vrnGst").alias("vrnGst"),

					// Vehicle Info
					m.get("companyId").alias("companyId"), m.get("productId").alias("productId"),
					m.get("branchCode").alias("branchCode"), m.get("requestReferenceNo").alias("requestReferenceNo"),
					m.get("createdBy").alias("createdBy"), m.get("status").alias("status"),
					m.get("quoteNo").alias("quoteNo"), m.get("customerId").alias("customerId"),
					m.get("entryDate").alias("entryDate"), m.get("updatedDate").alias("updatedDate"),
					m.get("updatedBy").alias("updatedBy")).distinct(true);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(m.get("quoteNo")));

			// In
			Expression<String> e0 = m.get("requestReferenceNo");

			// Where
			Predicate n1 = e0.in(reqRefNos);
			Predicate n2 = cb.equal(c.get("customerReferenceNo"), m.get("customerReferenceNo"));
			query.where(n1, n2).orderBy(orderList);

			// Get Result
			TypedQuery<CriteriaCustomerRes> result = em.createQuery(query);
			customerDetails = result.getResultList();

			customerDetails = customerDetails.stream()
					.filter(distinctByKey(o -> Arrays.asList(o.getRequestReferenceNo()))).collect(Collectors.toList());
			customerDetails.sort(Comparator.comparing(CriteriaCustomerRes::getUpdatedDate).reversed());

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return customerDetails;
	}

	public Integer getBackDays(String companyId, String productId, String loginId) {
		Integer backDays = 0;
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			List<BrokerCommissionDetails> list = new ArrayList<BrokerCommissionDetails>();

			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<BrokerCommissionDetails> query = cb.createQuery(BrokerCommissionDetails.class);

			// Find All
			Root<BrokerCommissionDetails> b = query.from(BrokerCommissionDetails.class);

			// Select
			query.select(b);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<BrokerCommissionDetails> ocpm1 = effectiveDate.from(BrokerCommissionDetails.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(b.get("companyId"), ocpm1.get("companyId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(b.get("loginId"), ocpm1.get("loginId"));
			Predicate a4 = cb.equal(b.get("productId"), ocpm1.get("productId"));
			Predicate a11 = cb.equal(b.get("policyType"), ocpm1.get("policyType"));
			Predicate a12 = cb.equal(b.get("id"), ocpm1.get("id"));
			effectiveDate.where(a1, a2, a3, a4, a11, a12);

			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<BrokerCommissionDetails> ocpm2 = effectiveDate2.from(BrokerCommissionDetails.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a6 = cb.equal(b.get("companyId"), ocpm2.get("companyId"));
			Predicate a8 = cb.equal(b.get("productId"), ocpm2.get("productId"));
			Predicate a9 = cb.equal(b.get("loginId"), ocpm2.get("loginId"));
			Predicate a10 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a13 = cb.equal(b.get("policyType"), ocpm2.get("policyType"));
			Predicate a14 = cb.equal(b.get("id"), ocpm2.get("id"));
			effectiveDate2.where(a6, a8, a9, a10, a13, a14);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("policyType")));

			// Where
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("effectiveDateEnd"), effectiveDate2);
			Predicate n3 = cb.equal(b.get("companyId"), companyId);
			Predicate n4 = cb.equal(b.get("productId"), productId);
			Predicate n5 = cb.equal(b.get("loginId"), loginId);
			Predicate n6 = cb.equal(b.get("policyType"), "99999");
			Predicate n7 = cb.equal(b.get("id"), "99999");
			query.where(n1, n2, n3, n4, n5, n6, n7).orderBy(orderList);

			// Get Result
			TypedQuery<BrokerCommissionDetails> result = em.createQuery(query);

			list = result.getResultList();
			backDays = list.size() > 0 ? (list.get(0).getBackDays() != null ? list.get(0).getBackDays() : 0) : 0;

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return backDays;
	}

	private static <T> java.util.function.Predicate<T> distinctByKey(
			java.util.function.Function<? super T, ?> keyExtractor) {
		Map<Object, Boolean> seen = new ConcurrentHashMap<>();
		return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}

	public List<CriteriaCustomerRes> getallLapsedQuoteCustomerDetails(ExistingMotorDetailsReq req, String status,
			Date startDate, Integer limit, Integer offset) {
		List<CriteriaCustomerRes> customerDetails = new ArrayList<CriteriaCustomerRes>();
		try {
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CriteriaCustomerRes> query = cb.createQuery(CriteriaCustomerRes.class);

			// Find All
			Root<EserviceMotorDetails> m = query.from(EserviceMotorDetails.class);
			Root<EserviceCustomerDetails> c = query.from(EserviceCustomerDetails.class);

			// Select
			query.multiselect(
					// Customer Info
					c.get("customerReferenceNo").alias("customerReferenceNo"),
					c.get("policyHolderTypeid").alias("policyHolderTypeid"), c.get("idType").alias("idType"),
					c.get("idNumber").alias("idNumber"), c.get("age").alias("age"),
					c.get("clientName").alias("clientName"), c.get("titleDesc").alias("titleDesc"),
					c.get("policyHolderType").alias("policyHolderType"), c.get("idTypeDesc").alias("idTypeDesc"),
					c.get("dobOrRegDate").alias("dobOrRegDate"), c.get("genderDesc").alias("genderDesc"),
					c.get("occupationDesc").alias("occupationDesc"),
					c.get("businessTypeDesc").alias("businessTypeDesc"), c.get("telephoneNo1").alias("telephoneNo1"),
					c.get("telephoneNo2").alias("telephoneNo2"), c.get("telephoneNo3").alias("telephoneNo3"),
					c.get("mobileNo1").alias("mobileNo1"), c.get("mobileNo2").alias("mobileNo2"),
					c.get("mobileNo3").alias("mobileNo3"), c.get("email1").alias("email1"),
					c.get("email2").alias("email2"), c.get("email3").alias("email3"), c.get("vrnGst").alias("vrnGst"),

					// Vehicle Info
					m.get("companyId").alias("companyId"), m.get("productId").alias("productId"),
					m.get("branchCode").alias("branchCode"),

					m.get("requestReferenceNo").alias("requestReferenceNo"), m.get("createdBy").alias("createdBy"),
					m.get("status").alias("status"), m.get("quoteNo").alias("quoteNo"),
					m.get("customerId").alias("customerId"), m.get("entryDate").alias("entryDate")
			// m.get("updatedDate").alias("updatedDate") ,
			// m.get("updatedBy").alias("updatedBy")
			).distinct(true);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(m.get("updatedDate")));

			// RequestRefNo Sub Query
			Subquery<String> reqRefNo = query.subquery(String.class);
			Root<EserviceMotorDetails> ocpm1 = reqRefNo.from(EserviceMotorDetails.class);
			reqRefNo.select(ocpm1.get("requestReferenceNo")).distinct(true);
			// Predicate a1 =
			// cb.equal(ocpm1.get("requestReferenceNo"),m.get("requestReferenceNo") );
			// reqRefNo.where(a1);

			// In
			Expression<String> e0 = m.get("requestReferenceNo");

			// Where
			Predicate n1 = cb.equal(c.get("customerReferenceNo"), m.get("customerReferenceNo"));
			Predicate n2 = e0.in(reqRefNo);
			Predicate n3 = cb.equal(m.get("branchCode"), req.getBranchCode());
			Predicate n4 = cb.equal(m.get("companyId"), req.getInsuranceId());
			Predicate n5 = cb.equal(m.get("productId"), req.getProductId());
			Predicate n6 = cb.equal(m.get("createdBy"), req.getCreatedBy());
			Predicate n7 = cb.equal(m.get("status"), status);
			Predicate n8 = cb.lessThanOrEqualTo(m.get("updatedDate"), startDate);

			query.where(n1, n2, n3, n4, n5, n6, n7, n8).orderBy(orderList);

			// Get Result
			TypedQuery<CriteriaCustomerRes> result = em.createQuery(query);
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			customerDetails = result.getResultList();

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return customerDetails;
	}

	@Override
	public SuccessRes updateLapsedQuote(UpdateLapsedQuoteReq req) {
		SuccessRes res = new SuccessRes();
		try {
			Date today = new Date();

			CriteriaBuilder cb = this.em.getCriteriaBuilder();
			// create update
			CriteriaUpdate<EserviceMotorDetails> update = cb.createCriteriaUpdate(EserviceMotorDetails.class);
			// set the root class
			Root<EserviceMotorDetails> m = update.from(EserviceMotorDetails.class);
			// set update and where clause
			update.set("updatedBy", req.getCreatedBy());
			update.set("updatedDate", today);
			Predicate n1 = cb.equal(m.get("requestReferenceNo"), req.getRequestReferenceNo());
			update.where(n1);
			// perform update
			em.createQuery(update).executeUpdate();

			res.setResponse("Successfully Updated");
			res.setSuccessId(req.getRequestReferenceNo());

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public SuccessRes deleteMotorDetails(EserviceMotorDetailsGetReq req) {
		SuccessRes res = new SuccessRes();
		try {
			EserviceMotorDetails findData = repo.findByRequestReferenceNoAndRiskId(req.getRequestReferenceNo(),
					Integer.valueOf(req.getVehicleId()));
			if (findData != null && StringUtils.isBlank(req.getEndtType())) {
				repo.delete(findData);
				res.setResponse("Successfully Updated");
				res.setSuccessId(req.getRequestReferenceNo());

			} else if (findData != null && StringUtils.isNotBlank(req.getEndtType())) {
				findData.setStatus("D");
				repo.save(findData);
				res.setResponse("Successfully Updated");
				res.setSuccessId(req.getRequestReferenceNo());
			} else {
				res.setResponse("Data Not Found");
				res.setSuccessId(req.getRequestReferenceNo());
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public List<Error> validateDriverDetails(List<MotorDriverSaveReq> req) {
		List<Error> error = new ArrayList<Error>();

		try {

			Integer rowNo = 0;
			List<DriverLicenceReq> licenseNos = new ArrayList<DriverLicenceReq>();

			for (MotorDriverSaveReq dri : req) {
				rowNo = rowNo + 1;
				if (StringUtils.isBlank(dri.getDriverName())) {
					error.add(new Error("10", "Driver Name", "Please Enter Driver Name in Row No : " + rowNo));
				} else if (!dri.getDriverName().matches("[a-zA-Z ]+")) {
					error.add(new Error("10", "Driver Name", "Please Enter Valid Driver Name in Row No : " + rowNo));
				}
				if (StringUtils.isBlank(dri.getDriverType())) {
					error.add(new Error("10", "Driver Type", "Please Select Owner/Driver Type in Row No : " + rowNo));
				}
				if (StringUtils.isBlank(dri.getLicenseNo())) {
					error.add(new Error("10", "License No", "Please Enter License No in Row No : " + rowNo));
				} else if (dri.getLicenseNo().length() > 20) {
					error.add(new Error("10", "License No",
							"Please Enter License No With in 20 Charecter in Row No : " + rowNo));
				} else if (StringUtils.isNotBlank(dri.getRiskId())) {
					List<DriverLicenceReq> filterLicense = licenseNos.stream()
							.filter(o -> o.getRiskId().equalsIgnoreCase(dri.getRiskId())
									&& o.getLicenseNo().equalsIgnoreCase(dri.getLicenseNo()))
							.collect(Collectors.toList());
					if (filterLicense.size() > 0) {
						error.add(new Error("10", "License No",
								"License No Duplicate in Risk Id :  " + dri.getRiskId() + " Row No : " + rowNo));

					} else {
						DriverLicenceReq li = new DriverLicenceReq();
						li.setRiskId(dri.getRiskId());
						li.setLicenseNo(dri.getLicenseNo());
						licenseNos.add(li);
					}

				}
				if (dri.getDriverDob() == null) {
					error.add(new Error("10", "Driver Dob", "Please Enter Driver Dob in Row No : " + rowNo));
				}
				if (StringUtils.isBlank(dri.getQuoteNo())) {
					error.add(new Error("10", "Quote No", "Please Enter Quote No in Row No : " + rowNo));
				}

				if (StringUtils.isBlank(dri.getRiskId())) {
					error.add(new Error("10", "Chassis No", "Please Enter Vehicle Chassis No in Row No : " + rowNo));
				}
				if (StringUtils.isBlank(dri.getCreatedBy())) {
					error.add(new Error("10", "Created By", "Please Enter Created By in Row No : " + rowNo));
				}

			}

		} catch (Exception e) {

			log.error(e);
			e.printStackTrace();
			error.add(new Error("42", "Common Error", e.getMessage()));
		}
		return error;
	}

	@Override
	public DriverSaveRes saveDriverDetails(List<MotorDriverSaveReq> req) {
		DriverSaveRes res = new DriverSaveRes();
		if(req!=null) {
			if("100004".equalsIgnoreCase(req.get(0).getInsuranceId()))	{
				res=madisonMotDriDet.saveDriverDetails(req);
			}else if("100018".equalsIgnoreCase(req.get(0).getInsuranceId()))	{
				res=oromiaMotDriDet.saveDriverDetails(req);
			}else if("100019".equalsIgnoreCase(req.get(0).getInsuranceId()))	{
				res=ugandaMotDriDet.saveDriverDetails(req);
			}else if("100020".equalsIgnoreCase(req.get(0).getInsuranceId()))	{
				res=kenyaMotDriDet.saveDriverDetails(req);
			}else if("100027".equalsIgnoreCase(req.get(0).getInsuranceId()))	{
				res=angolaMotDriDet.saveDriverDetails(req);
			}else if("100028".equalsIgnoreCase(req.get(0).getInsuranceId()))	{
				res=eagleMotDriDet.saveDriverDetails(req);
			}else if("100040".equalsIgnoreCase(req.get(0).getInsuranceId())){
				res=sanlamMotDriDet.saveDriverDetails(req);
			}else if("100042".equalsIgnoreCase(req.get(0).getInsuranceId()))	{
				res=burkinoMotDriDet.saveDriverDetails(req);
			}else if("100046".equalsIgnoreCase(req.get(0).getInsuranceId()))	{
				res=phoenixMotDriDet.saveDriverDetails(req);
			}else {
				res=tanzaniaMotDriDet.saveDriverDetails(req);
			}
		}
		return res;
	}

	public synchronized List<ListItemValue> getListItemDriver(String companyId, String branchCode, String itemType,
			String itemCode) {
		List<ListItemValue> list = new ArrayList<ListItemValue>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ListItemValue> query = cb.createQuery(ListItemValue.class);
			// Find All
			Root<ListItemValue> c = query.from(ListItemValue.class);

			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("itemId"), ocpm1.get("itemId"));
			Predicate b1 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
			Predicate b2 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2, b1, b2);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("itemId"), ocpm2.get("itemId"));
			Predicate b3 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			Predicate b4 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3, a4, b3, b4);

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), companyId);
			// Predicate n5 = cb.equal(c.get("companyId"), "99999");
			Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
			// Predicate n8 = cb.or(n4,n5);
			Predicate n9 = cb.or(n6, n7);
			Predicate n10 = cb.equal(c.get("itemType"), itemType);
			Predicate n11 = cb.equal(c.get("itemCode"), itemCode);
			query.where(n1, n2, n3, n4, n9, n10, n11).orderBy(orderList);
			// Get Result
			TypedQuery<ListItemValue> result = em.createQuery(query);
			list = result.getResultList();
			list.sort(Comparator.comparing(ListItemValue::getItemValue));
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return list;
	}

	@Override
	public List<DriverDetailsRes> getDriverDetails(DriverDetailsGetReq req) {
		List<DriverDetailsRes> resList = new ArrayList<DriverDetailsRes>();
		if("100004".equalsIgnoreCase(req.getInsuranceId()))	{
			resList=madisonEserviceMotorDetails.getDriverDetails(req);
		}else if("100018".equalsIgnoreCase(req.getInsuranceId()))	{
			resList=oromiaEserviceMotorDetails.getDriverDetails(req);
		}else if("100019".equalsIgnoreCase(req.getInsuranceId()))	{
			resList=ugandaEserviceMotorDetails.getDriverDetails(req);
		}else if("100020".equalsIgnoreCase(req.getInsuranceId()))	{
			resList=kenyaEserviceMotorDetails.getDriverDetails(req);
		}else if("100027".equalsIgnoreCase(req.getInsuranceId()))	{
			resList=angolaEserviceMotorDetails.getDriverDetails(req);
		}else if("100028".equalsIgnoreCase(req.getInsuranceId()))	{
			resList=eagleEserviceMotorDetails.getDriverDetails(req);
		}else if("100040".equalsIgnoreCase(req.getInsuranceId())){
			resList=sanlamEserviceMotorDetails.getDriverDetails(req);
		}else if("100042".equalsIgnoreCase(req.getInsuranceId()))	{
			resList=burkinoEserviceMotorDetails.getDriverDetails(req);
		}else if("100046".equalsIgnoreCase(req.getInsuranceId()))	{
			resList=phoenixEserviceMotorDetails.getDriverDetails(req);
		}else {
			resList=tanzaniaEserviceMotorDetails.getDriverDetails(req);
		}
		return resList;
	}

	@Override
	public FleetDetailsRes updateFleetDetails(FleetDetailsSaveReq req) {
		FleetDetailsRes fleetRes = new FleetDetailsRes();
		fleetRes.setRequestReferenceNo(req.getRequestReferenceNo());
		fleetRes.setNoOfVehicles(0);
		fleetRes.setPdrefno("0");
		try {
			CompanyProductMaster product = getCompanyProductMasterDropdown2(req.getInsuranceId(), req.getProductId()); // productRepo.findByProductIdOrderByAmendIdDesc(Integer.valueOf(req.getProductId()));

			if ("M".equalsIgnoreCase(product.getMotorYn())) {
				List<String> statusesNot = new ArrayList<String>();
				statusesNot.add("D");

				List<EserviceMotorDetails> motors = repo
						.findByRequestReferenceNoAndStatusNotIn(req.getRequestReferenceNo(), statusesNot);
				Integer count = motors.size();
				EserviceMotorDetails motDetails = motors.size() > 0 ? motors.get(motors.size() - 1) : null;

				if (motDetails != null) {
					MsPolicySaveReq msPolicySaveReq = new MsPolicySaveReq();
					msPolicySaveReq.setCurrency(motDetails.getCurrency());
					msPolicySaveReq
							.setEndtCategoryId(motDetails.getIsFinaceYn() == null ? "N" : motDetails.getIsFinaceYn());
					msPolicySaveReq.setEndtTypeId(
							motDetails.getEndorsementType() == null ? 0 : motDetails.getEndorsementType());
					msPolicySaveReq.setExchangeRate(motDetails.getExchangeRate());
					msPolicySaveReq.setGroupCount(count);
					msPolicySaveReq.setHavepromocode(motDetails.getHavepromocode());
					msPolicySaveReq.setPromocode(motDetails.getPromocode());
					msPolicySaveReq.setNoOfVehicles(count);
					msPolicySaveReq.setRequestReferenceNo(req.getRequestReferenceNo());
					msPolicySaveReq.setPdRefno(null);
					msPolicySaveReq.setStatus(motDetails.getStatus());
					msPolicySaveReq.setPeriodOfInsurance(motDetails.getPeriodOfInsurance());
					msPolicySaveReq.setBuildingSumInsured(BigDecimal.ZERO);
					msPolicySaveReq
							.setCdRefno(motDetails.getCdRefno() == null ? null : Long.valueOf(motDetails.getCdRefno()));

					// Save Method Call
					String pdRefNo = saveMsPolicyDetails(msPolicySaveReq);
					fleetRes.setNoOfVehicles(count);
					fleetRes.setPdrefno(pdRefNo);
					fleetRes.setInsuranceId(motDetails.getCompanyId());
					fleetRes.setBranchCode(motDetails.getBranchCode());
					fleetRes.setAgencyCode(
							motDetails.getAgencyCode() == null ? "99999" : motDetails.getAgencyCode().toString());
					fleetRes.setSectionId("99999");
					fleetRes.setProductId(motDetails.getProductId());
					fleetRes.setMSRefNo("");
					fleetRes.setVehicleId("99999");
					fleetRes.setCdRefNo(motDetails.getCdRefno() == null ? "99999" : motDetails.getCdRefno().toString());
					fleetRes.setVdRefNo(pdRefNo);
					fleetRes.setCreatedBy(motDetails.getCreatedBy());
					fleetRes.setRequestReferenceNo(motDetails.getRequestReferenceNo());
					fleetRes.setPdrefno2(pdRefNo);

				}

			} else if ("A".equalsIgnoreCase(product.getMotorYn())) {
				List<String> statusesNot = new ArrayList<String>();
				statusesNot.add("D");

				List<EserviceBuildingDetails> buildings = eserBuildRepo
						.findByRequestReferenceNoAndStatusNotIn(req.getRequestReferenceNo(), statusesNot);
				Double suminsured = 0D;
				suminsured = buildings.stream()
						.filter(o -> !"0".equalsIgnoreCase(o.getSectionId()) && o.getBuildingSuminsured() != null)
						.mapToDouble(o -> o.getBuildingSuminsured().doubleValue()).sum();

				Integer count = 1;
				EserviceBuildingDetails buildDetails = buildings.size() > 0 ? buildings.get(buildings.size() - 1)
						: null;
				if (buildDetails != null) {
					MsPolicySaveReq msPolicySaveReq = new MsPolicySaveReq();
					msPolicySaveReq.setCurrency(buildDetails.getCurrency());
					msPolicySaveReq
							.setEndtCategoryId(buildDetails.getIsFinyn() == null ? "N" : buildDetails.getIsFinyn());
					msPolicySaveReq.setEndtTypeId(
							buildDetails.getEndorsementType() == null ? 0 : buildDetails.getEndorsementType());
					msPolicySaveReq.setExchangeRate(buildDetails.getExchangeRate());
					msPolicySaveReq.setGroupCount(count);
					msPolicySaveReq.setHavepromocode(buildDetails.getHavepromocode());
					msPolicySaveReq.setPromocode(buildDetails.getPromocode());
					msPolicySaveReq.setNoOfVehicles(count);
					msPolicySaveReq.setRequestReferenceNo(req.getRequestReferenceNo());
					msPolicySaveReq.setPdRefno(null);
					msPolicySaveReq.setStatus(buildDetails.getStatus());
					msPolicySaveReq.setPeriodOfInsurance(
							buildDetails.getPolicyPeriord() == null ? "0" : buildDetails.getPolicyPeriord().toString());
					msPolicySaveReq
							.setBuildingSumInsured(suminsured == null ? BigDecimal.ZERO : new BigDecimal(suminsured));
					msPolicySaveReq.setCdRefno(
							buildDetails.getCdRefno() == null ? null : Long.valueOf(buildDetails.getCdRefno()));

					// Save Method Call
					String pdRefNo = saveMsPolicyDetails(msPolicySaveReq);
					fleetRes.setNoOfVehicles(count);
					fleetRes.setPdrefno(pdRefNo);
					fleetRes.setInsuranceId(buildDetails.getCompanyId());
					fleetRes.setBranchCode(buildDetails.getBranchCode());
					fleetRes.setAgencyCode(
							buildDetails.getAgencyCode() == null ? "99999" : buildDetails.getAgencyCode().toString());
					fleetRes.setSectionId("99999");
					fleetRes.setProductId(buildDetails.getProductId());
					fleetRes.setMSRefNo("");
					fleetRes.setVehicleId("99999");
					fleetRes.setCdRefNo(
							buildDetails.getCdRefno() == null ? "99999" : buildDetails.getCdRefno().toString());
					fleetRes.setVdRefNo(pdRefNo);
					fleetRes.setCreatedBy(buildDetails.getCreatedBy());
					fleetRes.setRequestReferenceNo(buildDetails.getRequestReferenceNo());
					fleetRes.setPdrefno2(pdRefNo);
				}
			} else if ("H".equalsIgnoreCase(product.getMotorYn())) {
				List<String> statusesNot = new ArrayList<String>();
				statusesNot.add("D");

				List<EserviceCommonDetails> humans = eserCommonRepo
						.findByRequestReferenceNoAndStatusNotIn(req.getRequestReferenceNo(), statusesNot);
				Integer count = 0;
				Long totalcount = humans.stream().filter(o -> o.getCount() != null).mapToLong(o -> o.getCount()).sum();
				count = Integer.valueOf(totalcount.toString());

				EserviceCommonDetails human = humans.size() > 0 ? humans.get(humans.size() - 1) : null;
				if (human != null) {
					MsPolicySaveReq msPolicySaveReq = new MsPolicySaveReq();
					msPolicySaveReq.setCurrency(human.getCurrency());
					msPolicySaveReq.setEndtCategoryId(human.getIsFinyn() == null ? "N" : human.getIsFinyn());
					msPolicySaveReq.setEndtTypeId(human.getEndorsementType() == null ? 0 : human.getEndorsementType());
					msPolicySaveReq.setExchangeRate(human.getExchangeRate());
					msPolicySaveReq.setGroupCount(count);
					msPolicySaveReq.setHavepromocode(human.getHavepromocode());
					msPolicySaveReq.setPromocode(human.getPromocode());
					msPolicySaveReq.setNoOfVehicles(count);
					msPolicySaveReq.setRequestReferenceNo(req.getRequestReferenceNo());
					msPolicySaveReq.setPdRefno(null);
					msPolicySaveReq.setStatus(human.getStatus());
					msPolicySaveReq.setPeriodOfInsurance(
							human.getPolicyPeriod() == null ? "0" : human.getPolicyPeriod().toString());
					msPolicySaveReq.setBuildingSumInsured(BigDecimal.ZERO);
					msPolicySaveReq.setCdRefno(human.getCdRefno() == null ? null : Long.valueOf(human.getCdRefno()));

					// Save Method Call
					String pdRefNo = saveMsPolicyDetails(msPolicySaveReq);
					fleetRes.setNoOfVehicles(count);
					fleetRes.setPdrefno(pdRefNo);
					fleetRes.setInsuranceId(human.getCompanyId());
					fleetRes.setBranchCode(human.getBranchCode());
					fleetRes.setAgencyCode(human.getAgencyCode() == null ? "99999" : human.getAgencyCode().toString());
					fleetRes.setSectionId("99999");
					fleetRes.setProductId(human.getProductId());
					fleetRes.setMSRefNo("");
					fleetRes.setVehicleId("99999");
					fleetRes.setCdRefNo(human.getCdRefno() == null ? "99999" : human.getCdRefno().toString());
					fleetRes.setVdRefNo(pdRefNo);
					fleetRes.setCreatedBy(human.getCreatedBy());
					fleetRes.setRequestReferenceNo(human.getRequestReferenceNo());
					fleetRes.setPdrefno2(pdRefNo);
				}
			}

		} catch (Exception e) {

			log.error(e);
			e.printStackTrace();
			return null;
		}
		return fleetRes;
	}

	public synchronized String saveMsPolicyDetails(MsPolicySaveReq request) {
		String pdRefNo = "";
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		// SimpleDateFormat sdf = new SimpleDateFormat("yyMMddhhmmssSS");
		try {
			List<MsPolicyDetails> list = new ArrayList<MsPolicyDetails>();

			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<MsPolicyDetails> query = cb.createQuery(MsPolicyDetails.class);
			// Find All
			Root<MsPolicyDetails> b = query.from(MsPolicyDetails.class);
			// Select
			query.select(b);

			Predicate n1 = cb.equal(b.get("currency"), request.getCurrency());
			Predicate n2 = cb.equal(b.get("endtCategoryId"), request.getEndtCategoryId());
			Predicate n3 = cb.equal(b.get("endtTypeId"), request.getEndtTypeId());
			Predicate n4 = cb.equal(b.get("exchangeRate"), request.getExchangeRate());
			Predicate n5 = cb.equal(b.get("groupCount"), request.getGroupCount());
			Predicate n6 = cb.equal(b.get("havepromocode"), request.getHavepromocode());
			Predicate n7 = cb.equal(b.get("promocode"), request.getPromocode());
			if (request.getPromocode() == null)
				n7 = cb.isNull(b.get("promocode"));

			Predicate n8 = cb.equal(b.get("noOfVehicles"), request.getNoOfVehicles());
			Predicate n9 = cb.equal(b.get("requestReferenceNo"), request.getRequestReferenceNo());
			// Predicate n1 = cb.equal( b.get("policyHolderTypeid")request.getPdRefno(null);
			Predicate n10 = cb.equal(b.get("status"), request.getStatus());
			Predicate n11 = cb.equal(b.get("periodOfInsurance"), request.getPeriodOfInsurance());
			Predicate n12 = cb.equal(b.get("buildingSuminsured"), request.getBuildingSumInsured());
			Predicate n13 = cb.equal(b.get("cdRefno"), request.getCdRefno());

			query.where(n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13);

			TypedQuery<MsPolicyDetails> result = em.createQuery(query);
			list = result.getResultList();
			if (list != null && list.size() > 0) {
				pdRefNo = String.format("%05d", list.get(0).getPdRefno());
			} else {
				// Random rand = new Random();
				// int random=rand.nextInt(90)+10;custData.getRegionCode()==null

				pdRefNo = genPdRefNo(); // sdf.format(new Date()) + random ;
				MsPolicyDetails saveNewEntry = new MsPolicyDetails();
				dozerMapper.map(request, saveNewEntry);
				saveNewEntry.setPdRefno(Long.valueOf(pdRefNo));
				saveNewEntry.setEntryDate(new Date());
				saveNewEntry.setBuildingSuminsured(request.getBuildingSumInsured());
				msPolicyRepo.save(saveNewEntry);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.error("Exception is ---> " + e.getMessage());
			return null;
		}

		return pdRefNo;
	}

	public CompanyProductMaster getCompanyProductMasterDropdown2(String companyId, String productId) {
		CompanyProductMaster product = new CompanyProductMaster();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProductMaster> query = cb.createQuery(CompanyProductMaster.class);
			List<CompanyProductMaster> list = new ArrayList<CompanyProductMaster>();
			// Find All
			Root<CompanyProductMaster> c = query.from(CompanyProductMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("productName")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CompanyProductMaster> ocpm1 = effectiveDate.from(CompanyProductMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("productId"), ocpm1.get("productId"));
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2, a3);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CompanyProductMaster> ocpm2 = effectiveDate2.from(CompanyProductMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("productId"), ocpm2.get("productId"));
			Predicate a5 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a4, a5, a6);

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), companyId);
			Predicate n5 = cb.equal(c.get("productId"), productId);
			query.where(n1, n2, n3, n4, n5).orderBy(orderList);
			// Get Result
			TypedQuery<CompanyProductMaster> result = em.createQuery(query);
			list = result.getResultList();
			product = list.size() > 0 ? list.get(0) : null;
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return product;
	}

	public synchronized String genPdRefNo() {
		try {
			PdRefno entity;
			entity = pdRefNoRepo.save(new PdRefno());
			return String.format("%05d", entity.getPdRefno());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}

	}

	public List<MotorMakeModelMaster> getMotorMakeModel(String makeId, String modelId, String companyId,
			String branchCode) {
		List<MotorMakeModelMaster> list = new ArrayList<MotorMakeModelMaster>();
		try {

			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<MotorMakeModelMaster> query = cb.createQuery(MotorMakeModelMaster.class);

			// Find All
			Root<MotorMakeModelMaster> b = query.from(MotorMakeModelMaster.class);

			// Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<MotorMakeModelMaster> ocpm1 = amendId.from(MotorMakeModelMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("modelId"), b.get("modelId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
			Predicate a4 = cb.equal(ocpm1.get("makeId"), b.get("makeId"));
			amendId.where(a1, a2, a3, a4);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("amendId")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), companyId);
			Predicate n3 = cb.equal(b.get("branchCode"), branchCode);
			Predicate n4 = cb.equal(b.get("branchCode"), "99999");
			Predicate n5 = cb.or(n3, n4);
			Predicate n6 = cb.equal(b.get("makeId"), makeId);
			Predicate n7 = cb.equal(b.get("modelId"), modelId);
//				Predicate n8 = cb.equal(b.get("bodyId"), req.getBodyId());
			query.where(n1, n2, n5, n6, n7).orderBy(orderList);

			// Get Result
			TypedQuery<MotorMakeModelMaster> result = em.createQuery(query);
			list = result.getResultList();
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return list;
	}

	@Override
	public CommonRes depreciationCalculation(DepreciationReq req) {

		CommonRes res = new CommonRes();
		try {

			if (req == null || null == req.getInflationSumInsured() || null == req.getInflationPercentage()
					|| null == req.getPurchaseDate() || StringUtils.isBlank(req.getRequestReferenceNo())
					|| null == req.getRiskId()
					// ||StringUtils.isBlank(req.getVdRefNo())
					|| null == req.getExchangeRate()) {

				res.setIsError(true);
				res.setMessage("Failed - BadRequest");

				log.error("Bad request ");
				return res;

			}

			DepreciationRes depreciation = new DepreciationRes();
			BigDecimal divider = new BigDecimal(100);

			depreciation.setInflationActualSumInsured(req.getInflationSumInsured());
			depreciation.setInflationPercentage(req.getInflationPercentage());
			depreciation.setPurchaseDate(req.getPurchaseDate());

			BigDecimal inflationPercentageValue = req.getInflationSumInsured()
					.multiply(req.getInflationPercentage().divide(divider));

			BigDecimal inflationSiWithpercentage = req.getInflationSumInsured().add(inflationPercentageValue);

			depreciation.setInflationSiWithPercentage(inflationSiWithpercentage);

			// Years calculation

			Date currentDate = new Date();

			Integer years = yearCalculation(currentDate, req.getPurchaseDate());

			if (null != years) {

				depreciation.setYearsPassed(years);

				if (years > 0) {

					BigDecimal percen = new BigDecimal(20);

					BigDecimal val = inflationSiWithpercentage;

					for (int i = 0; i < years; i++) {

						BigDecimal percentageValue = val.multiply(percen.divide(divider));

						val = val.subtract(percentageValue);

						percen = new BigDecimal(15);

					}
					depreciation.setInflationSumInsured(val);

				} else {

					depreciation.setInflationSumInsured(inflationSiWithpercentage);
				}

				DecimalFormat decFormat = new DecimalFormat();
				decFormat.setParseBigDecimal(true);

				BigDecimal sumInsuredLc = null;
				String sumLc = depreciation.getInflationSumInsured() == null ? null
						: decFormat.format(depreciation.getInflationSumInsured().multiply(req.getExchangeRate()));

				if (null != sumLc) {

					sumInsuredLc = (BigDecimal) decFormat.parse(sumLc);

				}

				if (null != sumInsuredLc) {

					EserviceMotorDetails motor = repo.findByRequestReferenceNoAndRiskId(req.getRequestReferenceNo(),
							req.getRiskId());

					if (null != motor) {

						motor.setSumInsured(depreciation.getInflationSumInsured());
						motor.setSumInsuredLc(sumInsuredLc);

						repo.saveAndFlush(motor);

					}

//							if(req.getVdRefNo().matches("[0-9]+")) {
//								
//								
//										
//								String vdRef = req.getVdRefNo().trim().toString();
//								Long vd = Long.valueOf(vdRef);
//
//								MsVehicleDetails vehicle = msVehicleRepo.findByVdRefno(vd);
//								
//
//								if(null != vehicle) {
//									vehicle.setSumInsured(depreciation.getInflationSumInsured());
//									vehicle.setSumInsuredLc(sumInsuredLc);								
//									msVehicleRepo.saveAndFlush(vehicle);								
//								}
//								
//							}

					res.setIsError(false);
					res.setMessage("Success");
					res.setCommonResponse(depreciation);

					return res;

				}
			}
			res.setIsError(true);
			res.setMessage("failure- (Date issue)");
			res.setCommonResponse(null);
			return res;

		}

		catch (Exception e) {

			log.error("Error Occurs When calculating The Depreciation");
			e.printStackTrace();
			// throw new ArithmeticException("Check Depreciation Calculation Data" +
			// e.getMessage());

		}
		return res;

	}

	private Integer yearCalculation(Date currentDate, Date purchaseDate) {

		try {

			SimpleDateFormat simple = new SimpleDateFormat("yyyy-MM-dd");

			LocalDate l1 = LocalDate.parse(simple.format(currentDate));

			LocalDate l2 = LocalDate.parse(simple.format(purchaseDate));

			Period period = Period.between(l1, l2);

			int years = Math.abs(period.getYears());

			return years;
		}

		catch (Exception e) {
			log.error("Error Occurs When Calculating The Years Between Two Dates");
			e.printStackTrace();
			// throw new DateTimeException("Check Date Formats Of Depreciation Data");

		}
		return null;

	}

	@Override
	public DriverSaveRes saveOtherVehicleInfo(OtherVehicleInfoReq vehicleDetails) {
		DriverSaveRes res = new DriverSaveRes();

		List<MotorDataDetails> save = new ArrayList<MotorDataDetails>();
		MotorDataDetails existingrecords = null;

		try {

			existingrecords = motordatarepo.findByQuoteNoAndVehicleId(vehicleDetails.getQuoteNo(),
					vehicleDetails.getVehicleId());
			if (existingrecords != null) {
				existingrecords.setSeries(vehicleDetails.getSeriesNo());
				existingrecords.setNoOfCyclinders(vehicleDetails.getNoCylinder());
				existingrecords.setPlateTypeId(vehicleDetails.getPlateType());

				existingrecords.setPlateColorId(vehicleDetails.getPlateColorId());

				if (StringUtils.isNotBlank(String.valueOf(vehicleDetails.getNoDoors()))) {
					ListItemValue datasec = listRepo.findByItemTypeAndItemCodeAndCompanyId("NO_OF_DOORS",
							String.valueOf(vehicleDetails.getNoDoors()), vehicleDetails.getCompanyId());
					existingrecords.setNoOfDoorsDesc(datasec == null ? null : datasec.getItemValue());
					existingrecords.setNoOfDoors(vehicleDetails.getNoDoors());
					existingrecords.setNoOfDoorsDescLocal(
							(datasec != null && StringUtils.isNotBlank(datasec.getItemValueLocal()))
									? datasec.getItemValueLocal()
									: "");

				} else {
					existingrecords.setNoOfDoorsDesc(null);

				}
				if (StringUtils.isNotBlank(String.valueOf(vehicleDetails.getNoCylinder()))) {
					ListItemValue datasec = listRepo.findByItemTypeAndItemCodeAndCompanyId("NO_OF_CYLINDERS",
							String.valueOf(vehicleDetails.getNoCylinder()), vehicleDetails.getCompanyId());
					existingrecords.setNoOfCyclindersDesc(datasec == null ? null : datasec.getItemValue());
					;
					existingrecords.setNoOfCyclindersDescLocal(
							(datasec != null && StringUtils.isNotBlank(datasec.getItemValueLocal()))
									? datasec.getItemValueLocal()
									: "");
				} else {
					existingrecords.setNoOfCyclindersDesc(null);
				}
				if (StringUtils.isNotBlank(String.valueOf(vehicleDetails.getPlateType()))) {
					ListItemValue datasec = listRepo.findByItemTypeAndItemCodeAndCompanyId("PLATE_TYPE",
							String.valueOf(vehicleDetails.getPlateType()), vehicleDetails.getCompanyId());
					existingrecords.setPlateTypeDesc(datasec == null ? null : datasec.getItemValue());
					existingrecords.setPlateTypeDescLocal(
							(datasec != null && StringUtils.isNotBlank(datasec.getItemValueLocal()))
									? datasec.getItemValueLocal()
									: "");
				} else {
					existingrecords.setPlateTypeDesc(null);
				}
				if (StringUtils.isNotBlank(String.valueOf(vehicleDetails.getPlateColorId()))) {
					MotorColorMaster colordel = color.findByColorIdAndCompanyId(vehicleDetails.getPlateColorId(),
							vehicleDetails.getCompanyId());
					existingrecords.setPlateColor(colordel == null ? null : colordel.getColorDesc());
					existingrecords
							.setPlateColor((colordel != null && StringUtils.isNotBlank(colordel.getColorDescLocal()))
									? colordel.getColorDescLocal()
									: "");
				} else {
					existingrecords.setPlateColor(null);
				}
				save.add(existingrecords);
				motordatarepo.save(existingrecords);// save in motor data details
			}

			if (!save.isEmpty()) {
				res.setResponse("Success");
			} else {
				res.setResponse("Empty Request");
			}

		} catch (Exception Problem) {
			System.out.println("********* Exception Occured in other vehicle save *****************");
			System.out.print(Problem.getMessage());
			Problem.printStackTrace();
			res.setResponse("Oops something went wrong..........");
			return null;
		}
		return res;
	}

	public GetOtherVehicleInfoRes getOthervehicle(OtherVehicleInfoGetReq req) {
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		GetOtherVehicleInfoRes resList = new GetOtherVehicleInfoRes();
		List<VehicleDetailsReq> vehicleDetails = new ArrayList<>();
		String companyId = null, QuoteNo = null, RequestReferenceNo = null;
		Integer pid = 0, SectionId = 0;
		try {
			if (req.getQuoteNo() != null) {
				VehicleDetailsReq setvalue = new VehicleDetailsReq();
				List<MotorDataDetails> existingrecords = motordatarepo.findByQuoteNo(req.getQuoteNo());
				if (!existingrecords.isEmpty()) {
					companyId = existingrecords.get(0).getCompanyId();
					RequestReferenceNo = existingrecords.get(0).getRequestReferenceNo();
					QuoteNo = existingrecords.get(0).getQuoteNo();
					pid = existingrecords.get(0).getProductId();
					SectionId = existingrecords.get(0).getSectionId();

					for (MotorDataDetails m1 : existingrecords) {
						VehicleDetailsReq update = new VehicleDetailsReq();
						update.setVehicleId(m1.getVehicleId());
						update.setSeriesNo(m1.getSeries());
						update.setPlatetypedesc(m1.getPlateTypeDesc());
						update.setPlateType(m1.getPlateTypeId());
						update.setPlateColorId(m1.getPlateColorId());
						update.setPlateColor(m1.getPlateColor());
						update.setNoDoors(m1.getNoOfDoors() == null ? 0 : Integer.valueOf(m1.getNoOfDoors()));
						update.setNoDoorsDesc(m1.getNoOfDoorsDesc());
						update.setNoCylinder(
								m1.getNoOfCyclinders() == null ? 0 : Integer.valueOf(m1.getNoOfCyclinders()));
						update.setNoCylinderDesc(m1.getNoOfCyclindersDesc());
						vehicleDetails.add(update);
					}
				} else {
					vehicleDetails.add(new VehicleDetailsReq());
				}
				resList.setSectionId(SectionId);
				resList.setCompanyId(companyId);
				resList.setProductId(pid);
				resList.setQuoteNo(QuoteNo);
				resList.setRequestReferenceNo(RequestReferenceNo);
				resList.setVehicleDetails(vehicleDetails);
			}

		} catch (Exception Problem) {

			System.out.println("********* Exception Occured in  other vehicle getapi *****************");
			System.out.print(Problem.getMessage());
			Problem.printStackTrace();

			// res.setResponse("Oops something went wrong..........");
			return resList;
		}
		return resList;
	}

	public List<MotorColorMaster> findMotorColorMasters(String companyId, String branchCode, String colorId) {
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<MotorColorMaster> cq = cb.createQuery(MotorColorMaster.class);
		Root<MotorColorMaster> root = cq.from(MotorColorMaster.class);

		Predicate companyPredicate = cb.equal(root.get("companyId"), companyId);

		Predicate branchPredicate = cb.or(cb.equal(root.get("branchCode"), branchCode),
				cb.equal(root.get("branchCode"), "99999"));

		Predicate colorPredicate = cb.or(cb.equal(root.get("colorId").as(String.class), colorId),
				cb.equal(root.get("colorCode"), colorId), cb.equal(root.get("colorDesc"), colorId));

		cq.select(root).where(cb.and(companyPredicate, branchPredicate, colorPredicate))
				.orderBy(cb.desc(root.get("amendId")));

		return em.createQuery(cq).getResultList();
	}

	public List<ListItemValue> findEwayListItemValues(String companyId, String branchCode, String itemType,
			String itemCode) {
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ListItemValue> cq = cb.createQuery(ListItemValue.class);
		Root<ListItemValue> root = cq.from(ListItemValue.class);

		Predicate companyPredicate = cb.equal(root.get("companyId"), companyId);

		Predicate branchPredicate = cb.or(cb.equal(root.get("branchCode"), branchCode),
				cb.equal(root.get("branchCode"), "99999"));

		Predicate itemTypePredicate = cb.equal(root.get("itemType"), itemType);

		Predicate itemPredicate = cb.or(cb.equal(root.get("itemCode"), itemCode),
				cb.equal(root.get("itemValue"), itemCode));

		cq.select(root).where(cb.and(companyPredicate, branchPredicate, itemTypePredicate, itemPredicate))
				.orderBy(cb.desc(root.get("amendId")));

		return em.createQuery(cq).getResultList();
	}

}
